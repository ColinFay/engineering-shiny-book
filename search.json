[{"path":"index.html","id":"introduction","chapter":"Introduction","heading":"Introduction","text":" Welcome “Engineering Production-Grade Shiny Apps” Colin Fay, Sébastien Rochette, Vincent Guyader Cervan Girard.book available print, published R Series Chapman Hall/CRC.can grab copy routledge.com.online version book free read (thanks Chapman & Hall/CRC), licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.","code":""},{"path":"index.html","id":"motivation","chapter":"Introduction","heading":"Motivation","text":"book get started shiny, talk work shiny sent production.\ndiscussing book process building application later sent production.topic? Lots blog posts books talk getting started shiny (Chang et al. 2022) application ready sent production.\n() talk area -: confidently work shiny know basics, send production.book going talk : building robust shiny applications ready sent production.\n’ll focus process, workflow, necessary tools building production-grade shiny applications.","code":""},{"path":"index.html","id":"audience-for-this-book","chapter":"Introduction","heading":"Audience for this book","text":"starting read book, assume working knowledge build small application using shiny, want know go one step .\nwords, already knowledge shiny works, able build small working application, want know build serious, production-grade application can sent production.content book oscillates conceptual discussions (e.g., complexity?), exploration project-management questions (e.g., organize work building production shiny applications?), technical topics (e.g. shiny modules, optimize shiny?), large portion book dedicated technical questions.book interest two groups:Team managers want help organize work, shiny developers want learn project management.\ngroup find relevant content first 1/3 book (roughly Chapter 5).Team managers want help organize work, shiny developers want learn project management.\ngroup find relevant content first 1/3 book (roughly Chapter 5).Developers want cover medium advanced shiny topics relevant production.\ngroup interested rest book, roughly spans Chapter 6 end.\nNote technical elements covered book range intermediate advanced topics, hope find relevant topics current goals, whatever level .Developers want cover medium advanced shiny topics relevant production.\ngroup interested rest book, roughly spans Chapter 6 end.\nNote technical elements covered book range intermediate advanced topics, hope find relevant topics current goals, whatever level .practice, ’ve come realize lot shiny projects built small teams large number “teams” composed one developer.\ncontext, realized project management development often assigned person,1 making two skills deeply integrated carrying production projects.’s book tries reconcile worlds, building production-grade software needs reliable operational code-base made possible solid technical skills, also reliable operational team work project management.","code":""},{"path":"index.html","id":"what-is-production","chapter":"Introduction","heading":"What is “production”?","text":"throughout book, using term “production” refer way build deploy application.\n“production”?lot definitions production , even today ask around get wide range different answers.\nlike think piece software production combines three following properties, users, also engineers working :used, even one person.used, even one person.relied upon user(s).relied upon user(s).real life impact something goes wrong.real life impact something goes wrong.three properties impact two specific groups: users developers.Indeed, users rely app work can job, expect deliver meaningful results can count .\nengineering point view, production-grade software can relied upon sense developers count run expected, need rely software resilient change, .e modular, documented, strongly tested changes can integrated confidence.production software also real-life impact something goes wrong: users make wrong decisions, might unable day--day work, things can happen software use daily basis fails run.\nengineering point view, production-grade software real impact something goes wrong: someone fix bug, company selling software might lose money, data can lost, .Given two properties, can understand production doesn’t necessarily mean served gazillions users,2 serving trillions gigabytes data: even software used one person relies application job production software.book : building shiny applications can used, users can rely, including tools help prevent things going wrong, eventually , making sure equipped quickly fix bugs.","code":""},{"path":"index.html","id":"book-structure","chapter":"Introduction","heading":"Book structure","text":"Part 1, “Building Successful shiny Apps” gives general context mean “production-grade” “successful” shiny applications, challenges arise dealing large-scale application designed production.\npart, define mean “Successful”, stress importance project management, develop structure project production, introduce golem (Fay, Guyader, Rochette, et al. 2023) package.\nfinally, briefly introduce development workflow: workflow explored Parts 2 6.Part 1, “Building Successful shiny Apps” gives general context mean “production-grade” “successful” shiny applications, challenges arise dealing large-scale application designed production.\npart, define mean “Successful”, stress importance project management, develop structure project production, introduce golem (Fay, Guyader, Rochette, et al. 2023) package.\nfinally, briefly introduce development workflow: workflow explored Parts 2 6.Part 2 6 explore workflow building successful applications.\nPart 2: Design (Step 1) underlines centrality user experience engineering application, emphasizes importance designing coding.\nPart 3: Prototype (Step 2) stresses importance prototyping, explores setting golem-based application, presents shinipsum, fakir, “Rmd First” development methodology.\nPart 4: Build (Step 3) explores building step application, .e core engineering application prototyping phase finished.\nPart 5: Strengthen (Step 4) explores -depth testing, continuous integration, version control.\nPart 6: Deploy (Step 5) develops various possibilities preparing application deployed.Part 2 6 explore workflow building successful applications.\nPart 2: Design (Step 1) underlines centrality user experience engineering application, emphasizes importance designing coding.\nPart 3: Prototype (Step 2) stresses importance prototyping, explores setting golem-based application, presents shinipsum, fakir, “Rmd First” development methodology.\nPart 4: Build (Step 3) explores building step application, .e core engineering application prototyping phase finished.\nPart 5: Strengthen (Step 4) explores -depth testing, continuous integration, version control.\nPart 6: Deploy (Step 5) develops various possibilities preparing application deployed.Part 7, “Optimizing” tackles question optimization, first introducing general concepts optimization, presenting common caveats shiny apps, showing optimize R code, use JavaScript lighten R work.\npart ends gentle introduction CSS (Cascading Style Sheets).Part 7, “Optimizing” tackles question optimization, first introducing general concepts optimization, presenting common caveats shiny apps, showing optimize R code, use JavaScript lighten R work.\npart ends gentle introduction CSS (Cascading Style Sheets).","code":""},{"path":"index.html","id":"about-the-authors","chapter":"Introduction","heading":"About the authors","text":"","code":""},{"path":"index.html","id":"colin-fay","chapter":"Introduction","heading":"Colin Fay","text":"Colin written vast majority book. ’s responsible general structure, original design workflow described. time (every time) “” actually refers . lead developer golem framework, creator many tools described book.Colin works ThinkR, French agency focused everything R related. day, helps companies take full advantage power R, building tools (packages, web apps, etc.) setting infrastructure. main areas expertise data software engineering, infrastructure, web applications (front-end back-end), R production.night, Colin also hyperactive open-source developer open-data advocate. can find lot work GitHub account (https://github.com/ColinFay) ThinkR’s account (https://github.com/thinkr-open).also active R Data community, international speaker.","code":""},{"path":"index.html","id":"sébastien-rochette","chapter":"Introduction","heading":"Sébastien Rochette","text":"Sébastien instrumental review book’s chapters.\nalso written section prototyping RMarkdown, concept initiated.Sébastien data scientist ThinkR, teaches anything R related beginner expert level, guides R developers towards implementation best practices, creates tailor-made R solutions needs customers.","code":""},{"path":"index.html","id":"vincent-guyader","chapter":"Introduction","heading":"Vincent Guyader","text":"Vincent founder ThinkR. created first proof--concept framework shiny applications inside packages; idea led creation golem.\nfeel like GitHub archaeologist, first version still available little bit exploration!ten years experience R, scientific technical background, Vincent R enthusiast.\nstill hands code, whether develop applications, analyze data, build packages.\n’s coding, plays Docker manages servers.\nstrongly believes meeting highly technical challenges incompatible pedagogy: passionately trains diverse learner profiles R.","code":""},{"path":"index.html","id":"cervan-girard","chapter":"Introduction","heading":"Cervan Girard","text":"Cervan worked example applications used inside book, namely {shinipsumdemo}, {databasedemo}, {grayscale}, {bs4dashdemo}, {shinyfuture}.Cervan Data Scientist ThinkR.\nenthusiastic motivated comes rolling sleeves new challenges, even means venturing dangerously depths R, learning new languages, experimenting outside comfort zone.Whatever challenge, remains reliable, constructive, efficient comes using skills train develop. also enjoys training learners levels R language.","code":""},{"path":"index.html","id":"disclaimer","chapter":"Introduction","heading":"Disclaimer","text":"Open source moving () fast, tools described book still active development.\ngood news!\nlarge portion book methodology, purely technology, even packages code sections used book can () become obsolete, significant part described book still relevant.reading book, remember “snapshot” various technologies packages, might someday become date, breaking changes, even disappear.\nlast revisions pages ’re reading now done March 12, 2024.\ntry update online version whenever changes made packages used book, feel free browse online version3 --date information.","code":""},{"path":"index.html","id":"software-information-and-conventions","chapter":"Introduction","heading":"Software information and conventions","text":"book built knitr (Xie 2023b) bookdown (Xie 2023a).Package names curly brackets code format (e.g., rmarkdown), inline code file names formatted typewriter font (e.g., knitr::knit('doc.Rmd')).\nFunction names formatted typewriter font followed parentheses (e.g., render_book()).\nLarger code blocks formatted typewriter font gray backgroud, e.g.:describe package can installed GitHub, use install_github() function remotes (Csárdi et al. 2023) package.\nwords, following code:means package installed GitHub, can use remotes package, installed machine already .","code":"\ninstall.packages(\"golem\")\nremotes::install_github(\"ColinFay/dockerstats\")"},{"path":"index.html","id":"want-to-help","chapter":"Introduction","heading":"Want to help?","text":"feedback book welcome.\nFeel free open issue, make Pull Request spot typo.","code":""},{"path":"index.html","id":"other-resources","chapter":"Introduction","heading":"Other resources","text":"One single book cover everything know shiny.\nresources can use addition book.\ncan also find resources bibliography.","code":""},{"path":"index.html","id":"getting-started-with-shiny","chapter":"Introduction","heading":"Getting started with {shiny}","text":"Mastering ShinyLearn Shiny RStudioGetting Started ShinyA gRadual intRoduction ShinyShiny Start Finish","code":""},{"path":"index.html","id":"putting-shiny-into-production","chapter":"Introduction","heading":"Putting {shiny} into production","text":"Shiny production: Principles, practices, toolsShiny ProductionFeel free suggest resource!","code":""},{"path":"index.html","id":"acknowledgments","chapter":"Introduction","heading":"Acknowledgments","text":"","code":""},{"path":"index.html","id":"special-thanks","chapter":"Introduction","heading":"Special thanks","text":"want thank ThinkR allowing us time write book, always supportive project.Colin wants personally thank Christophe Dervieux help book projects, awesome person.\nalso wants thank Eric Nantz taking time write Foreword, one first golem adopters, always enthusiastic things gravitating around golemverse.\nbig thanks also David Granjon precious feedback book.","code":""},{"path":"index.html","id":"contributors-to-this-book","chapter":"Introduction","heading":"Contributors to this book","text":"want thank people contributed book, either via Pull Requests, Issues book’s GitHub repository, via direct conversation.@aicesan, @allaway, @andreferraribr, @ardeeshany, @aronolof, @BenjaminLouis, @bstrain71, @cedricbriandgithub, @coreyyanofsky, @dA505819, @dan-reznik, @davidpb90, @denrou, @Dschaykib, @ehesch, @eroten, @espinielli, @etiennebacher, @fBedecarrats, @flrd, @frankschmitt, @FrieseWoudloper, @giocomai, @gowachin, @graue70, @Guillaume-Lombardo, @gwd999, @hadley, @hsm207, @jamespooley, @jcrodriguez1989, @jonmcalder, @josbop, @jpmarindiaz, @jtelleriar, @julianstanley, @kdaily, @maelle, @mayeulk, @naomistrandberg, @psychometrician, @rainiercito, @ronniemo, @rpodcast, @sowla, @tellyshia, @ukyouhanDVSA, @xari, @xvrdm.","code":""},{"path":"foreword.html","id":"foreword","chapter":"Foreword","heading":"Foreword","text":"long-time R user (since Version 2.0.0 back 2004), seen “game-changing” advancements transformed entire workflow opened doors new possibilities never imagined.\nOne came late 2012 RStudio released shiny R community.\nabsolutely floored notion create just web interface, dynamic web interface, R code!\ngive little perspective, web interfaces built Shiny utilitarian PHP-powered sites MySQL database back-end summarize local state parks data near graduate school’s location, let’s just say projects win awards web design!certainly experienced longtime adage learning hard way began create Shiny apps day job personal projects.\nfirst year time Shiny, created small apps revealed potential bring, still amazing somehow stitched together without fully understanding nuances reactivity, optimal UI designs, software-development principles classically trained statistician Linux enthusiast never knew !\nThings began click mind bit bit (especially attending first () Shiny Developer Conference), found task creating just simple prototypes, large-scale software products meant production use.\nOh , gotten ?frequent visitor Shiny mailing list helpful shiny tag Stack Overflow, felt serious lack resources addressing optimal techniques, best practices, practical advice taking Shiny apps production.\n, one transformative events R usage occurred.\n2019 rstudio::conf, checking excellent poster session found Building Big Shiny Apps poster presented Colin Fay.\nknown Colin fellow curator RWeekly project knew done work Shiny, walkthrough always loud voice head saying “Hey, Colin knows exactly ’ve thinking !” first time saw important challenges Shiny app developer space undoubtedly encounter stated language relate , even new software development mindset.\nNeedless say, tremendous fun talking Shiny things R Colin Vincent Guyader conferences, trying soak insights advice every chance .Colin agreed Shiny Developer Series episode creating resources audience important step evolution sharing best practices Shiny.\nFast forward today, now reading tremendous resource aimed squarely R users world embarked creating production-level applications.\nEngineering Production-Grade Shiny Apps contains excellent blend Shiny-specific topics (many addressed previous books Shiny) practical advice software development fit nicely Shiny apps.\nfind many nuggets wisdom sprinkled throughout chapters.\n’s hard pick favorites, certainly one felt like moment enlightenment concept building triggers watchers define patterns object invalidation.\nNow use technique every app create!\ncourse, one key pillars holding foundation book {golem} package, found time invested learn ins outs creating applications golem paid significantly creating complex applications, especially multi-person development teams.\nfinishing writing Foreword, four-year-old son asked , “golem create nice things, Daddy?” Well, book easily best way explain answer!\nhope reading Engineering Production-Grade Shiny Apps helps journey creating large Shiny applications!Eric Nantz - Host R-Podcast Shiny Developer Series","code":""},{"path":"application-presentation.html","id":"application-presentation","chapter":"Application presentation","heading":"Application presentation","text":"book uses series applications examples.","code":""},{"path":"application-presentation.html","id":"hexmake","chapter":"Application presentation","heading":"{hexmake}","text":"hexmake application designed build hex logos.\nbuilt Colin, serves two main purposes: helps creation logo, mainly serves example complex features can use inside shiny application (image manipulation, custom CSS, linking external database, save restore, etc.).Figure 0.1 screenshot application.\nFIGURE 0.1: hexmake application.\napp available engineering-shiny.org/hexmake/.code available github.com/ColinFay/hexmake.","code":""},{"path":"application-presentation.html","id":"tidytuesday201942","chapter":"Application presentation","heading":"{tidytuesday201942}","text":"tidytuesday201942 application using dataset week 42 tidytuesday 2019.\nbuilt Colin, serves example app built scratch using bootstrap 4.Figure 0.2 screenshot application.\nFIGURE 0.2: tidytuesday201942 application.\napp available engineering-shiny.org/tidytuesday201942/.code available github.com/ColinFay/tidytuesday201942.","code":""},{"path":"application-presentation.html","id":"minifying","chapter":"Application presentation","heading":"{minifying}","text":"{minifying} application minify CSS, JavaScript, HTML, JSON files.\nbuilt Colin use case workflow book.\nfind details app constructed Appendix, “Use case: Building App, Start Finish”.Figure 0.3 screenshot application.\nFIGURE 0.3: tidytuesday201942 application.\napp available engineering-shiny.org/minifying/.\ncode available github.com/ColinFay/minifying.","code":""},{"path":"application-presentation.html","id":"other-applications","chapter":"Application presentation","heading":"Other applications","text":"{shinipsumdemo} application built Cervan example shinipsum, available engineering-shiny.org/shinipsumdemo/.{shinipsumdemo} application built Cervan example shinipsum, available engineering-shiny.org/shinipsumdemo/.{golemhtmltemplate} application built Colin example shinipsum shiny::htmlTemplate(), available engineering-shiny.org/golemhtmltemplate/.{golemhtmltemplate} application built Colin example shinipsum shiny::htmlTemplate(), available engineering-shiny.org/golemhtmltemplate/.{databasedemo} application built Cervan using external database, available engineering-shiny.org/databasedemo/.{databasedemo} application built Cervan using external database, available engineering-shiny.org/databasedemo/.{grayscale} application built Cervan using external html template, available engineering-shiny.org/grayscale/.{grayscale} application built Cervan using external html template, available engineering-shiny.org/grayscale/.{bs4dashdemo} application built Cervan {bs4dash} package, available engineering-shiny.org/bs4dashdemo/.{bs4dashdemo} application built Cervan {bs4dash} package, available engineering-shiny.org/bs4dashdemo/.{shinyfuture} application built Cervan example using promises future inside shiny app, available engineering-shiny.org/shinyfuture/.{shinyfuture} application built Cervan example using promises future inside shiny app, available engineering-shiny.org/shinyfuture/.","code":""},{"path":"successful-shiny-app.html","id":"successful-shiny-app","chapter":"1 About Successful {shiny} Apps","heading":"1 About Successful {shiny} Apps","text":"","code":""},{"path":"successful-shiny-app.html","id":"a-very-short-introduction-to-shiny","chapter":"1 About Successful {shiny} Apps","heading":"1.1 A (very) short introduction to {shiny}","text":"reading page, chances already know shiny application (sometimes shortened “shiny app”) —web application communicates R, built R, working R.\nbeauty shiny (Chang et al. 2022) makes easy someone already familiar R create small app matter hours.\nsmall minimal shiny apps, knowledge HTML (HyperText Markup Language), CSS(Cascading Style Sheets) JavaScript required, think technical elements usually come web applications—example, think port application served : shiny picks one .4\ngoes serving external dependencies: application comes set CSS JavaScript dependencies common shiny developer need worry .\nprobably one main reasons package become successful years—little training, can rapidly create proof--concept (PoC) data product, showcase algorithm, present results elegant accessible user interfaces.first version shiny published 2012.\nSince , one top projects RStudio team.\ntime writing lines (April 2020), 4700 commits master branch GitHub repository, made 46 contributors.\nnow downloaded around 400K times month, according cranlogs, 1174 reverse dependencies (.e. packages depend ), according revdep(\"shiny\") devtools (Wickham, Hester, et al. 2022).new shiny, book might feel little bit overwhelming: discussing advanced shiny software engineering methods, best practices structural ideas sending shiny applications production.\nbook relies assumption already know build basic shiny applications, want push shiny skills next level: words, ready move Proof Concept production-grade application.\nnew shiny, suggest start Mastering Shiny book reading present book.Ready start engineering production-grade shiny apps?","code":""},{"path":"successful-shiny-app.html","id":"complex-shiny","chapter":"1 About Successful {shiny} Apps","heading":"1.2 What is a complex {shiny} application?","text":"One unfortunate things reality often poses complex problems demand complex solutions.Art Unix Programming (Raymond 2003)","code":""},{"path":"successful-shiny-app.html","id":"reaching-the-cliff-of-complexity","chapter":"1 About Successful {shiny} Apps","heading":"1.2.1 Reaching the cliff of complexity","text":"Building shiny application seems quite straightforward comes small prototypes proof concepts: hours practice documentation reading, R developers can small working application.\nthings change application reaches “cliff complexity”,5 .e. moment application reaches state can qualified “complex”.mean complexity?\nGetting clear definition easy task 6 much depends concerned talking .\ngood definition can found DevOps Handbook (Kim 2016): “One defining characteristics complex system defies single person’s ability see system whole understand pieces fit together. Complex systems typically high degree interconnectedness tightly coupled components, system-level behavior explained merely terms behavior system components.” (bold.)noted Refactoring Scale (Lemaire 2020), “becomes nearly impossible reason effect change might applied uniformly across sprawling, complex system. Many tools exist identify code smells automatically detect improvements within subsections code, largely unable automate human reasoning restructure large applications, codebases growing increasingly rapid pace.”Building top quotes, let’s try come definition serve us context engineering shiny applications.building software, can think complexity two points view: complexity seen developer, complexity seen customer/end user.7For code, bugs harder anticipate: hard think different paths software can follow difficult identify bugs deeply nested numerous routines app .\nalso hard think state app given moment numerous inputs outputs app contains.code, bugs harder anticipate: hard think different paths software can follow difficult identify bugs deeply nested numerous routines app .\nalso hard think state app given moment numerous inputs outputs app contains.user perspective, complex app , steeper learning curve.\nIndeed, user invest time learning app works, even disappointed ever realize time waste.user perspective, complex app , steeper learning curve.\nIndeed, user invest time learning app works, even disappointed ever realize time waste.Let’s dive little bit two types complexity.","code":""},{"path":"successful-shiny-app.html","id":"a.-developer-complexity","chapter":"1 About Successful {shiny} Apps","heading":"A. Developer complexity","text":"app considered complex large terms size functionality makes impossible reason , developers must rely tools methods understand handle complexity: example, comes shiny, rely tools like golem (Fay, Guyader, Rochette, et al. 2023) framework, introduced throughout book, handle implementation, development deployment complexity.\nbook introduce clear methodology comes series conventions, crucial comes building maintaining complex systems: imposing formalized structure software, enhances readability, lowers learning curve newcomers, reduces risk errors inherent repetitive tasks.type complexity called implementation complexity.\nOne goals book present methodology toolkit help reduce form complexity.","code":""},{"path":"successful-shiny-app.html","id":"b.-customer-and-user-complexity","chapter":"1 About Successful {shiny} Apps","heading":"B. Customer and user complexity","text":"Customers end users see complexity interface complexity.Interface complexity can driven lot elements, example, probability making error using app, difficulty understanding logical progression app, presence unfamiliar behavior terms, visual distractions, etc.\nbook also bring strategy help cope need simplification comes designing interface.","code":""},{"path":"successful-shiny-app.html","id":"balancing-complexities","chapter":"1 About Successful {shiny} Apps","heading":"1.2.2 Balancing complexities","text":"inherent tension two sources complexity, designing app means finding good balance implementation interface complexity.\nLowering one source complexity usually means increasing , managing application project means knowing draw line.\nusually requires restraining implementing many features, still creating application easy use, fits requirements received.example, something common shiny applications: can call “much reactivity pattern”.\ncases, developers try make everything reactive: e.g., three sliders drop-input, updating single plot.\nbehavior lowers interface complexity: users really think , move sliders, change inputs, boom!\nplot updates.\nkind pattern can make application perform much computation, example, users rarely go value need first try: usually miss value actually want select.One solution can delay reactivity cache things R computes fewer things.\ncomes cost: handling delayed reactivity caching elements increase implementation complexity.\nAnother solution add “update plot” button, updates plot user clicks .\npattern makes easier control reactivity implementation side.\ncan make interface little bit complex users, perform another action, top changing inputs.\nargue book enough reactivity better much reactivity, latter increases computation time, relies assumption user makes right action first try.Another good example shiny’s dateRangeInput() function.\nfunction requires user choose start date end date.\nHowever, function allows user choose start date end (behavior JavaScript plugin used shiny create input).\nallowing behavior leads bugs, notably context full reactivity.\nHandling special case completely doable: little bit craft, can watch user inputs throw error start end.8\none hand, solution increases implementation complexity, hand, allowing naive behavior requires user think carefully selecting, thus increasing interface complexity.?\n’s : deciding draw line interface implementation complexity much depends project, something keep mind throughout project’s life.","code":""},{"path":"successful-shiny-app.html","id":"assessing-code-complexity","chapter":"1 About Successful {shiny} Apps","heading":"1.2.3 Assessing code complexity","text":"developer side, want reduce code complexity everybody involved coding process able create mental model application works.\nuser side, want reduce interface complexity everybody comes using application good user experience.Reducing complexity first comes able identify potential sources, application codebase specifications describing application work.\nFinding sources complexity easy task, requires programming knowledge identify bottlenecks, basic UX (User Experience) skills implement good interface, course project management methodology structure whole life application.points addressed book.\n, let’s dive code complexity.","code":""},{"path":"successful-shiny-app.html","id":"a.-codebase-size","chapter":"1 About Successful {shiny} Apps","heading":"A. Codebase size","text":"total number lines code, number files, can good clue potential complexity, used order magnitude (example, 10,000-line codebase potentially complex 100-line codebase), relied used strictly, even try reduce number lines sacrificing code readability.R permissive comes indentation line breaks, , unlike JavaScript CSS, generally minified.9\nR, number lines code depends coding style packages using. example, tidyverse (Wickham et al. 2019) style guide encourages use %>% (called “pipe”), one function line, producing lines end code: “%>% always space , usually followed new line” (tidyverse style guide).\ncan expect “tidyverse-centric” package contain lines code, yet pipe thought tool lower code complexity enhancing readability.10For example, two following pieces code thing.\ndifferent number lines, different level reading complexity.Also, limit way can indent code.Six lines code something also written one line.words, using kind writing style can make codebase larger term lines, without really adding complexity general program.Another drawback metric focuses numbers instead readability, long run, yes, readability matters.\nnoted Art Unix Programming, “Pressure keep codebase size using extremely dense complicated implementation techniques can cause cascade implementation complexity system, leading un-debuggable mess” (Raymond 2003).Still, metric can useful reinforce learned metrics.\nrather unlikely find “extreme” coding style showed , even might make sense compare two codebases just differ 1% 2 % lines code, likely codebase ten, one hundred, one thousand times larger complex software.Another good metric related code complexity number files project: R developers tend split functions several files, files find project, larger codebase .\nnumerous files can also sign maintenance complexity, may harder reason app logic split several files something fits one linear code inside one file.11\nhand, one big 10,000-line file standing alone project good sign either.want use number--lines metric, can R cloc (Rudis Danial 2020) package, available https://github.com/hrbrmstr/cloc.example, let’s compare rather big package (shiny) small one (attempt (Fay 2020)):, two metrics, can safely assume shiny complex package attempt.\nwant compute prefix local package/repository, cloc_pkg() function can used.\nexample, compute cloc metric hexmake application:One thing package also allows counting number lines commented code: ’s usually good sign see package comments codebase, allow work safely future, provided metric doesn’t reveal large portions application “commented code” (opposed “code comments”).\nexample, can see {hemake} 2345 lines R code, come 669 lines code comments.","code":"\nlibrary(dplyr, warn.conflicts = FALSE)\n# With pipe\niris %>%\n  group_by(Species) %>%\n  summarize(mean_sl = mean(Sepal.Length))\n# Without the pipe\nsummarize(group_by(iris, Species), mean_sl = mean(Sepal.Length))\n# Putting one symbol by line \niris[\n  1\n  :\n    5, \n  \"Species\"\n]\n# Same code but everything is on the same line\niris[1:5, \"Species\"]\n# Install {cloc} from GitHub \nremotes::install_github(\"hrbrmstr/cloc\")\nlibrary(cloc)\n# Using dplyr to manipulate the results\nlibrary(dplyr, warn.conflicts = FALSE)\n\n# Computing the number of lines of code \n# for various CRAN packages\nshiny_cloc <- cloc_cran(\n  \"shiny\", \n  .progress = FALSE, \n  repos = \"http://cran.irsn.fr/\"\n)\nattempt_cloc <- cloc_cran(\n  \"attempt\", \n  .progress = FALSE, \n  repos = \"http://cran.irsn.fr/\" \n)\n\nclocs <- bind_rows(\n  shiny_cloc, \n  attempt_cloc\n)\n\n# Summarizing the number of line of code inside each package\nclocs %>%\n  group_by(pkg) %>%\n  summarise(\n    loc = sum(loc)\n  )# A tibble: 2 × 2\n  pkg        loc\n  <chr>    <int>\n1 attempt   6486\n2 shiny   175376\n# Summarizing the number of files inside each package\nclocs %>%\n  group_by(pkg) %>%\n  summarise(\n    files = sum(file_count)\n  )# A tibble: 2 × 2\n  pkg     files\n  <chr>   <int>\n1 attempt    64\n2 shiny     736\n# Calling the function on the {hexmake} \n# application Git repository\nhexmake_cloc <- cloc_git(\n  \"https://github.com/ColinFay/hexmake\"\n)\nhexmake_cloc# A tibble: 10 × 10\n   source  language   file_count file_count_pct   loc\n   <chr>   <chr>           <int>          <dbl> <int>\n 1 hexmake JSON                1         0.0102  3844\n 2 hexmake R                  34         0.347   2345\n 3 hexmake Markdown            5         0.0510    95\n 4 hexmake CSS                 1         0.0102    76\n 5 hexmake Dockerfile          2         0.0204    45\n 6 hexmake JavaScript          2         0.0204    31\n 7 hexmake Rmd                 2         0.0204    18\n 8 hexmake HTML                1         0.0102    14\n 9 hexmake YAML                1         0.0102     8\n10 hexmake SUM                49         0.5     6476\n# ℹ 5 more variables: loc_pct <dbl>,\n#   blank_lines <int>, blank_line_pct <dbl>,\n#   comment_lines <int>, comment_line_pct <dbl>"},{"path":"successful-shiny-app.html","id":"b.-cyclomatic-complexity","chapter":"1 About Successful {shiny} Apps","heading":"B. Cyclomatic complexity","text":"Cyclomatic complexity software engineering measure allows us define number different linear paths piece code can take.\nhigher number paths, harder can clear mental model function.Cyclomatic complexity computed based control-flow graph 12 representation algorithm, can seen Figure 1.1.\nexample, simple control flow ifelse statement (following paragraph details algorithm implementation, feel free skip interested implementation details).\nFIGURE 1.1: Control-flow graph representation algorithm.\ncomplexity number computed taking number nodes, subtracting number edges, adding twice number connected components graph.\nalgorithm \\(M = E − N + 2P\\), \\(M\\) measure, \\(E\\) number edges, \\(N\\) number nodes \\(2P\\) twice number connected components.\ngo deep topic, lot things going computation can find much documentation online.\nPlease refer bibliography readings theory behind measurement.R, cyclomatic complexity can computed using cyclocomp (Csardi 2016) package.\ncan get CRAN :cyclocomp package comes three main functions: cyclocomp(), cyclocomp_package(), cyclocomp_package_dir().\ndeveloping application, one interested cyclocomp_package_dir(): building successful shiny apps golem framework means building app package (get back later)., example, cyclomatic complexity default golem template (assuming located golex/ subdirectory):one another small application:, finally, metric shiny:, bonus, cyclocomp_package() function can also used retrieve number functions inside package.Clash said, “gonna now?”\nmight heard saying: “copy paste piece code twice, write function”, might tempted .\nIndeed, splitting code smaller pieces lowers local cyclomatic complexity, smaller functions lower cyclomatic complexity.\njust local level, can suboptimal option: large number functions calling can make harder navigate codebase.end day, splitting smaller functions magic solution :global complexity app lowered splitting things pieces (just local complexity) andThe deeper call stack, harder can debug.","code":"\n# Install the {cyclocomp} package\ninstall.packages(\"cyclocomp\")\n# Launch the {cyclocomp} package, and compute the \n# cyclomatic complexity of \"golex\",\n# A blank {golem} project with one module skeleton\nlibrary(cyclocomp)\ncyclocomp_package_dir(\"golex\") %>% \n  head()                          name cyclocomp\n1                   app_server         1\n2                       app_ui         1\n3 golem_add_external_resources         1\n4                      run_app         1\n# Same metric, but for the application \n# {tidytuesday201942}, available at\n# https://engineering-shiny.org/tidytuesday201942.html\ncyclocomp_package(\"tidytuesday201942\") %>% \n  head()                  name cyclocomp\n24      mod_dataviz_ui         8\n23  mod_dataviz_server         7\n35                  rv         6\n14             display         4\n39           undisplay         4\n37 tagRemoveAttributes         3\n# Computing this metric for the {shiny} package\ncyclocomp_package(\"shiny\") %>% \n  head()                       name cyclocomp\n494                  untar2        75\n115            diagnoseCode        54\n389                  runApp        50\n150 find_panel_info_non_api        37\n371             renderTable        37\n102          dataTablesJSON        34"},{"path":"successful-shiny-app.html","id":"c.-other-measures-for-code-complexity","chapter":"1 About Successful {shiny} Apps","heading":"C. Other measures for code complexity","text":"Complexity can come sources: insufficient code coverage, dependencies break implementation, relying old packages, lot things.can use packageMetrics2 (Csardi 2023) package get metrics: example, number dependencies, code coverage, number releases date last one, etc., number lines code cyclomatic complexity.time writing lines, package CRAN can installed using following line code:package can now used assess dependencies use application.\n, let’s create small function computes metric returns tibble:run metric golem,shinyIf building shiny application golem, can use DESCRIPTION file, contains list dependencies, starting point explore metrics dependencies, example, using desc (Csárdi, Müller, Hester 2022) attachment (Rochette Guyader 2023):important metrics watch follow:Test coverage: better, large code coverage imply bugs easily caught.number downloads: largely downloaded package likely less prone bug, used large user base.Number dependencies: package dependencies, likely point time, something dependency graph break.Dates first publish CRAN, last publish, updates: package actively maintained good sign.13","code":"\n# Installing {packageMetrics2} from GitHub\nremotes::install_github(\"MangoTheCat/packageMetrics2\")\nlibrary(packageMetrics2)\n# A function to turn the output of the metrics into a data.frame\nframe_metric <- function(pkg){\n  metrics <- package_metrics(pkg)\n  tibble::tibble(\n    n = names(metrics), \n    val = metrics, \n    expl = list_package_metrics()[names(metrics)]\n  )\n}\n# Using this function with{golem}\nframe_metric(\"golem\") # A tibble: 22 × 3\n   n     val                       expl                \n   <chr> <chr>                     <chr>               \n 1 ARR   4                         Number of times = i…\n 2 ATC   <NA>                      Author Test Coverage\n 3 DWL   82823                     Number of Downloads \n 4 DEP   33                        Num of Dependencies \n 5 DPD   12                        Number of Reverse-D…\n 6 CCP   2.72727272727273          Cyclomatic Complexi…\n 7 FLE   4.23440285204991          Average number of c…\n 8 FRE   2019-08-05T14:50:02+00:00 Date of First Relea…\n 9 LIB   0                         Number of library a…\n10 LLE   109                       Number of code line…\n# ℹ 12 more rows\n# Using this function with {shiny}\nframe_metric(\"shiny\") # A tibble: 22 × 3\n   n     val                       expl                \n   <chr> <chr>                     <chr>               \n 1 ARR   14                        Number of times = i…\n 2 ATC   46.3623848353278          Author Test Coverage\n 3 DWL   18122047                  Number of Downloads \n 4 DEP   35                        Num of Dependencies \n 5 DPD   933                       Number of Reverse-D…\n 6 CCP   3.80062794348509          Cyclomatic Complexi…\n 7 FLE   2.41493883924699          Average number of c…\n 8 FRE   2012-12-01T07:16:17+00:00 Date of First Relea…\n 9 LIB   4                         Number of library a…\n10 LLE   738                       Number of code line…\n# ℹ 12 more rows\n# Get the dependencies from the DESCRIPTION file.\n# You can use one of these two functions to list \n# the dependencies of your package, \n# and compute the metric for each dep\ndesc::desc_get_deps(\"golex/DESCRIPTION\")     type package  version\n1 Imports  config >= 0.3.1\n2 Imports   golem >= 0.4.0\n3 Imports   shiny >= 1.7.4\n# See also \nattachment::att_from_description(\"golex/DESCRIPTION\")[1] \"config\" \"golem\"  \"shiny\" "},{"path":"successful-shiny-app.html","id":"d.-complexity-assessment-checklist","chapter":"1 About Successful {shiny} Apps","heading":"D. Complexity assessment checklist","text":"sum , quick checklist things check assess complexity application:Running metrics cloc, get idea number files, diversity terms extensions (example hexmake also JSON, JavaScript, YAML files), ratio comments code.\nRemember one big R file red flag, zero code comments.Running metrics cloc, get idea number files, diversity terms extensions (example hexmake also JSON, JavaScript, YAML files), ratio comments code.\nRemember one big R file red flag, zero code comments.Assess cyclomatic complexity package containing application.\nRemember function scores metric, complex debug .Assess cyclomatic complexity package containing application.\nRemember function scores metric, complex debug .Check package common metrics using packageMetrics2, notably dependencies including package.\nMetrics look test coverage, number downloads, number dependencies, date first release last release.Check package common metrics using packageMetrics2, notably dependencies including package.\nMetrics look test coverage, number downloads, number dependencies, date first release last release.","code":""},{"path":"successful-shiny-app.html","id":"production-grade-software-engineering","chapter":"1 About Successful {shiny} Apps","heading":"1.2.4 Production-grade software engineering","text":"Complexity still frowned upon lot developers, notably seen something avoid according Unix philosophy.\ndozens reasons app can become complex: example, question app answering quite complex involves lot computation routines.\nresulting app rather ambitious implements lot features, etc.\nchance reading page, working planning work complex shiny app.\nnecessarily bad thing!\nshiny apps can definitely used implement production-grade 14 software, production-grade software implies production-grade software engineering.\nmake project success, need use tools reduce complexity app ensure app resilient aging.words, production-grade shiny apps require working software engineering mindset, always easy task R world: many R developers learned language tool data analysis, building model, making statistics; really tool building software.use R evolved since initial version released 1995, using programming language tool build software production still challenge, even 29 years first release.\nstill today, lot R users, software still used “experimentation tool”, production quality one least concerns.\nrise shiny (among packages) drastically changed potential R language production software engineering: ease use also one reasons language now used outside academia, “traditional” software engineering teams.changing context requires different mindsets, skills, tools.shiny, said , quite easy prototype simple app, without “hardcore” software engineering skills.\nhappy little proof concept, tempted add something new.\nanother.\nanother.\nwithout structured methodology, almost certain reach cliff complexity soon end codebase hardly (ever) ready refactored sent production.good news building complex app R (language) impossible task.\nrequires planning, rigor, correct engineering.\nbook : organize shiny app way time code efficient, use correct engineering make app success.","code":""},{"path":"successful-shiny-app.html","id":"what-is-a-successful-shiny-app","chapter":"1 About Successful {shiny} Apps","heading":"1.3 What is a successful {shiny} app?","text":"Defining “successful” means easy task, can extract common patterns comes applications considered successful.","code":""},{"path":"successful-shiny-app.html","id":"it-exists","chapter":"1 About Successful {shiny} Apps","heading":"1.3.1 It exists","text":"First , app successful delivered.\nwords, developer team able move specification implementation testing delivering.\nengineering-oriented definition success, pragmatic one: app never reaches state usability successful app, something along way blocked process finishing software.condition implies lot things, mostly implies team members able organize efficient way, able work together making project success.\nAnybody already worked codebase team knows easy task.","code":""},{"path":"successful-shiny-app.html","id":"it-is-accurate","chapter":"1 About Successful {shiny} Apps","heading":"1.3.2 It is accurate","text":"project success application delivered, answers question supposed answer, serves purpose supposed serve.\nDelivering thing keep mind: can deliver working app might work way supposed work.Just , accuracy means moment idea appears someone’s mind moment app actually ready used, everybody able work together toward common goal, now goal reached, also certain answers get application accurate, users can rely application make decisions.","code":""},{"path":"successful-shiny-app.html","id":"it-is-usable","chapter":"1 About Successful {shiny} Apps","heading":"1.3.3 It is usable","text":"usable means app delivered, serves purpose, user-friendly.Unless just coding joy coding, always one end users.\npeople use application hard use, hard understand, slow inherent logic user experience designed, inappropriate call app success.","code":""},{"path":"successful-shiny-app.html","id":"it-is-immortal","chapter":"1 About Successful {shiny} Apps","heading":"1.3.4 It is immortal","text":"course, “immortal” little bit far-fetched, designing application, aim robustness years, engineering (theoretically) immortal application.Planning future important component successful shiny app project.\napp , successful can exist long run, hazards implies: new package versions potentially break codebase, sudden calls implementation new features global interface, changing key features UI (User Interface) back-end, mention passing codebase along someone worked first version, now charge developing next version.15\n, , hard without effective planning efficient engineering.","code":""},{"path":"planning-ahead.html","id":"planning-ahead","chapter":"2 Planning Ahead","heading":"2 Planning Ahead","text":"","code":""},{"path":"planning-ahead.html","id":"working-with-a-long-term-mindset","chapter":"2 Planning Ahead","heading":"2.1 Working with a “long-term” mindset","text":"Rome ne fut pas faite toute en un jour.French proverb","code":""},{"path":"planning-ahead.html","id":"prepare-for-success","chapter":"2 Planning Ahead","heading":"2.1.1 Prepare for success","text":"Whatever ambitions shiny application, take time today set robust foundations save lot time future.common thing hear shiny good prototyping tool.\ndenied.\nBuilding Proof Concept (PoC) app relatively straightforward compare needed build applications languages.\nshiny, can build “works machine” web application couple hours, show team, boss, investors.\nThanks way shiny designed, care websockets, ports, HTML (HyperText Markup Language), JavaScript libraries, things elegantly bundled shiny.Hence, can quick, hacky application work machine, rapidly.\nway start.\nIndeed, starting hacky foundations lead two possibilities:rewrite everything scratch robust application production.want rewrite code, get stuck legacy codebase application, built top hacky functions, sent production using hacky solutions.Either way, heavy technical debt.shiny good tool prototyping, harm starting application solid ground, even prototype: sooner start robust framework better, longer wait harder gets convert application production-ready one.\nlarger codebase, harder untangle everything make work.book, present framework called golem, toolbox building production-grade shiny applications.\nEven golem focused production, reason use proof concepts: starting new golem project relatively straightforward, even use advanced features, can use small apps.\nbenefit starting straight inside golem application really outweighs cost.\nhear lot question “switch golem?” answer simple: switch golem, start .\nway, getting ready complexity, , one day, need turn small app production app, foundations .","code":""},{"path":"planning-ahead.html","id":"develop-with-the-kiss-principle","chapter":"2 Planning Ahead","heading":"2.1.2 Develop with the KISS principle","text":"KISS principle states systems work best kept simple rather made complicated; therefore, simplicity key goal design, unnecessary complexity avoided.KISS principle, Wikipedia article (https://en.wikipedia.org/wiki/KISS_principle)KISS principle, “Keep Simple, Stupid”, drive implementation features application allow anyone future, including original developers, take development.story behind principle supposed Kelly Johnson, lead engineer Lockheed Skunk Works, gave workers set common tools said every airplane repairable tools, tools , repairing aircraft possible average engineer.principle keep mind building applications.\nIndeed, large-scale shiny projects can lead many people working codebase, long period time.\nlarge team means variety skills, common ground shiny development, potentially various levels comes R, web development, production engineering.\nchoosing implement, try make rule go simplest solution,16 .e. one common shiny developer able understand maintain.\ngo exotic solution complex technology, sure good reason: unknown hard--grasp technology reduces chance finding someone able maintain piece code future, reduce smoothness collaboration, “Code can easily comprehend elevates absolutely everyone team, matter tenure experience level” (Lemaire 2020).","code":""},{"path":"planning-ahead.html","id":"working-as-a-team-tools-and-structure","chapter":"2 Planning Ahead","heading":"2.2 Working as a team: Tools and structure","text":"Working team, whatever coding project, requires adequate tools, discipline organization.\nComplex shiny apps usually imply several people work application.\nexample, ThinkR, 3 4 people usually work parallel application, might people involved larger projects.\nchoice tools team structured crucial successful application.","code":""},{"path":"planning-ahead.html","id":"from-the-tools-point-of-view","chapter":"2 Planning Ahead","heading":"2.2.1 From the tools point of view","text":"","code":""},{"path":"planning-ahead.html","id":"a.-version-control-and-test-all-things","chapter":"2 Planning Ahead","heading":"A. Version control and test all things","text":"get informed code break development, need write tests app, use continuous integration (CI) sure automatically detected.17\nworking complex application, chances working significant period time, meaning write code, modify , use , go back weeks, change things, probably break things.\nBreaking things natural process software engineering, notably working piece code long period. Remember last chapter explained complex applications large understood fully?\nAdding code breaks codebase happen complex apps, sooner take measures solve changes, better.prevent code breaking, least get tooling :informed codebase broken: role tests combined CI.able identify changes versions, potentially, get back time previous codebase: role version control.go deeper testing version control chapter 14.","code":""},{"path":"planning-ahead.html","id":"b.-small-is-beautiful","chapter":"2 Planning Ahead","heading":"B. Small is beautiful","text":"Building application multiple small independent pieces lighten development process mental load.\nprevious chapter introduced notion complexity size, app grows large hard good grasp .\nlarge codebase implies safe way work split app pieces.Splitting shiny project made possible following two methods:Extract core “non-reactive” functions, also call “business logic”, include external files, can work outside app.\nWorking independent functions implement features prevent relaunching whole application every time need add something new.Extract core “non-reactive” functions, also call “business logic”, include external files, can work outside app.\nWorking independent functions implement features prevent relaunching whole application every time need add something new.Split app shiny modules, app can though tree, making possible every developer concentrate one node, one, instead think global infrastructure implementing features.Split app shiny modules, app can though tree, making possible every developer concentrate one node, one, instead think global infrastructure implementing features.Figure 2.1 , example, representation shiny application modules sub-modules.\nable decipher text inside node, idea give sense shiny application modules can organized split smaller pieces related tree form.\nFIGURE 2.1: Representation shiny application modules sub-modules.\nget back shiny modules organize project next chapter.","code":""},{"path":"planning-ahead.html","id":"from-the-team-point-of-view","chapter":"2 Planning Ahead","heading":"2.2.2 From the team point of view","text":"recommend define two kinds developers: unique person (maybe two) charge supervising whole project developers work specific features.\nNote project organized perfect world: practice, lot shiny projects managed one developer charge managing project, interacting client, building whole codebase.","code":""},{"path":"planning-ahead.html","id":"a.-a-person-in-charge","chapter":"2 Planning Ahead","heading":"A. A person in charge","text":"person charge development complete view entire project manage team developers implement features fit together.complex applications, can hard complete understanding entire app .\ntime, necessary developers complete picture.\ndefining one person charge, “manager” get whole picture: part software , make everything work together, avoid development conflicts, course check , end day, results returned built application correct ones.project manager one kicks project, writes first draft application.\nfollow book’s workflow, person first create golem project, fill information, define application structure providing main modules, potentially work prototyped UI app.skeleton app created, person charge list things done.\nstrongly suggest use Git graphical interface (GitLab, GitHub, Bitbucket, etc.) graphical interface help manage project.\ntasks defined issues, closed development.\ninterfaces can also used set continuous integration.team follows git flow (described Chapter 12), manager also charge reviewing accepting pull/merge requests main dev branch solve associated issues.worry sounds like foreign language , get back method later book (Chapter 12).","code":""},{"path":"planning-ahead.html","id":"b.-developers","chapter":"2 Planning Ahead","heading":"B. Developers","text":"Developers focus small features.\nperson charge correctly separated work developers team, focusing one parts application, need know every single bit application .\nperfect world, application split various shiny modules, one module equals one file, member team assigned development one modules.simpler work context one developer assigned one module, although know reality may little complex, several members team might go back forth working common module.\nperson charge help make pieces fit together.","code":""},{"path":"structuring-project.html","id":"structuring-project","chapter":"3 Structuring Your Project","heading":"3 Structuring Your Project","text":"","code":""},{"path":"structuring-project.html","id":"shiny-app-as-a-package","chapter":"3 Structuring Your Project","heading":"3.1 {shiny} app as a package","text":"next chapter introduced golem (Fay, Guyader, Rochette, et al. 2023) package, opinionated framework building production-ready shiny applications.\nframework used lot throughout book, relies idea every shiny application built R package.world shiny applications mostly created series files, bother package?","code":""},{"path":"structuring-project.html","id":"what-is-in-a-production-grade-shiny-app","chapter":"3 Structuring Your Project","heading":"3.1.1 What is in a production-grade {shiny} app?","text":"probably haven’t realized yet, built significant (terms size complexity codebase) shiny application, chances using package-like structure without knowing .Think last shiny application, created single-file (app.R) two-file app (ui.R server.R).\ntop files, need make production-ready application, package perfect infrastructure?","code":""},{"path":"structuring-project.html","id":"a.-it-has-metadata","chapter":"3 Structuring Your Project","heading":"A. It has metadata","text":"First , metadata.\nwords, necessary information something runs production: name app, version number (crucial serious, production-level project), application , contact something goes wrong, etc.get using package DESCRIPTION file.","code":""},{"path":"structuring-project.html","id":"b.-it-handles-dependencies","chapter":"3 Structuring Your Project","heading":"B. It handles dependencies","text":"Second, need find way handle dependencies.\nwant push app production, want conversation team:: Hey, tried source(\"app.R\") said, got error.: Hey, tried source(\"app.R\") said, got error.R-dev: error?R-dev: error?: says “find package ‘shiny’”.: says “find package ‘shiny’”.R-dev: Ah yes, need install {shiny}. Try run install.packages(\"shiny\").R-dev: Ah yes, need install {shiny}. Try run install.packages(\"shiny\").: OK nice. else?: OK nice. else?R-dev: Let think, try also install.packages(\"DT\")… good? Now try install.packages(\"ggplot2\"), …R-dev: Let think, try also install.packages(\"DT\")… good? Now try install.packages(\"ggplot2\"), …[…][…]: Ok, now source ‘app.R’, right?: Ok, now source ‘app.R’, right?R-dev: Sure!R-dev: Sure!: Ok says “find function runApp()”: Ok says “find function runApp()”R-dev: Ah, got library(shiny) beginning script. library(purrr), library(jsonlite), …R-dev: Ah, got library(shiny) beginning script. library(purrr), library(jsonlite), …example , library(purrr) library(jsonlite) lead NAMESPACE conflict flatten() function can cause debugging headaches (trust us, ).\ncool shiny app imports specific functions package, right?stress enough dependencies matter.\nneed handle , handle correctly want ensure smooth deployment production.\ndependency management native use package structure: packages application depends listed DESCRIPTION, functions/packages need import listed NAMESPACE file.","code":""},{"path":"structuring-project.html","id":"c.-its-split-into-functions","chapter":"3 Structuring Your Project","heading":"C. It’s split into functions","text":"Third, let’s say building big application.\nSomething thousands lines code.\nbuild large application writing one two files, simply impossible maintain long run use daily basis.\ndeveloping large application, split everything smaller files.\nmaybe can store files specific directory.done package, R/ folder.","code":""},{"path":"structuring-project.html","id":"d.-it-has-documentation","chapter":"3 Structuring Your Project","heading":"D. It has documentation","text":"Last least, want app live long prosper, means need document .Documenting shiny app involves explaining features end users also future developers (chances future developer ).\ngood news using R package structure helps leverage common tools documentation R:README file put root package, document install package, information use package. Note many cases developers go .md file (short markdown) format automatically rendered services like GitHub, GitLab, main version control system.README file put root package, document install package, information use package. Note many cases developers go .md file (short markdown) format automatically rendered services like GitHub, GitLab, main version control system.Vignettes longer-form documentation explains depth use app. also useful need detail core functions application using static document, notably prototyping /exchanging client. get back Vignettes Chapter 9 talk prototyping.Vignettes longer-form documentation explains depth use app. also useful need detail core functions application using static document, notably prototyping /exchanging client. get back Vignettes Chapter 9 talk prototyping.Function documentation. Every function package come documentation, even just future self. “Exported” functions, ones available run library(myapp), fully documented listed package help page. Internal functions need less documentation, documenting best way sure can come back app months still know things way , pieces apps used , use functions.18Function documentation. Every function package come documentation, even just future self. “Exported” functions, ones available run library(myapp), fully documented listed package help page. Internal functions need less documentation, documenting best way sure can come back app months still know things way , pieces apps used , use functions.18If needed, can build pkgdown website, can either deployed web kept internally. can contain installation steps .T., internal features use developers, user guide, etc.needed, can build pkgdown website, can either deployed web kept internally. can contain installation steps .T., internal features use developers, user guide, etc.","code":""},{"path":"structuring-project.html","id":"e.-its-tested","chapter":"3 Structuring Your Project","heading":"E. It’s tested","text":"thing need application successful long run testing infrastructure, sure introducing regression development.Nothing go production without tested. Nothing.Testing production apps broad question come back another chapter, let’s talk briefly using package structure helps testing.Frameworks package testing robust widely documented R world, choose embrace “shiny app package” structure, put extra-effort testing application back-end: use canonical testing framework like testthat (Wickham 2023a).\nLearning use subject chapter, feel free refer documentation, see also Chapter 5 workshop: “Building Package Lasts”.come back testing Chapter 11: “Build Safety Net”.","code":""},{"path":"structuring-project.html","id":"f.-there-is-a-native-way-to-build-and-deploy-it","chapter":"3 Structuring Your Project","heading":"F. There is a native way to build and deploy it","text":"Oh, also nice people get tar.gz install computer access local copy app!\ninstall server without headache!adopting package structure, can use classical tools locally install shiny application, .e. R package, built tar.gz.\nserver, RStudio products Docker containers, package infrastructure also allow leverage native R tools build, install launch R code.Chapter 13.","code":""},{"path":"structuring-project.html","id":"shiny-app-as-a-package-a-checklist","chapter":"3 Structuring Your Project","heading":"{shiny} app as a package, a checklist","text":"Let’s sum need application:Metadata dependencies, get DESCRIPTION + NAMESPACE files package.\nEven useful fact can “selective namespace extraction” inside package, .e. can say “want function package”.Metadata dependencies, get DESCRIPTION + NAMESPACE files package.\nEven useful fact can “selective namespace extraction” inside package, .e. can say “want function package”.bite-size code-base, aka functions.\ndone .R files, stored R/ directory, way package organized.bite-size code-base, aka functions.\ndone .R files, stored R/ directory, way package organized.Documentation can done using Vignettes, Readme, native R package documentation.Documentation can done using Vignettes, Readme, native R package documentation.Testing toolkit, done using native R CMD Check packages like testthat (Wickham 2023a).Testing toolkit, done using native R CMD Check packages like testthat (Wickham 2023a).Installation process, possible using package infrastructure.Installation process, possible using package infrastructure.","code":""},{"path":"structuring-project.html","id":"resources","chapter":"3 Structuring Your Project","heading":"3.1.2 Resources","text":"rest book, assume comfortable building R package.\nneed read resources continuing, feel free look links:R packagesR packagesBuilding Package LastsBuilding Package LastsWriting R ExtensionsWriting R ExtensionsR Package Primer - Minimal TutorialR Package Primer - Minimal Tutorial","code":""},{"path":"structuring-project.html","id":"using-shiny-modules","chapter":"3 Structuring Your Project","heading":"3.2 Using {shiny} modules","text":"Modules one powerful tools building shiny applications maintainable sustainable manner.","code":""},{"path":"structuring-project.html","id":"why-shiny-modules","chapter":"3 Structuring Your Project","heading":"3.2.1 Why {shiny} modules?","text":"Small beautiful.\nable properly cut codebase small modules help developers build mental model application (Remember “complex {shiny} application?”).\nshiny modules?shiny modules address namespacing problem shiny UI (User Interface) server logic, adding level abstraction beyond functions.Modularizing Shiny app code (https://shiny.rstudio.com/articles/modules.html)Let us first untangle quote example shiny namespace problem.","code":""},{"path":"structuring-project.html","id":"a.-the-one-million-validate-buttons-problem","chapter":"3 Structuring Your Project","heading":"A. The one million “Validate” buttons problem","text":"big shiny application usually requires reusing pieces UI/server, makes hard name identify similar inputs outputs.shiny requires outputs inputs unique id.\n, unfortunately, bypass : send plot R browser, .e. server ui, browser needs know exactly put element.\n“exactly ” handled use id.\nIds shiny specific: root way web pages work.\nUnderstanding purpose chapter: just remember shiny input output ids unique, just id web page, browser knows put receives R, R knows listen browser.\nneed unique made little bit complex way shiny handles names, shares global pool id names, native way use namespaces.\nWait, namespaces?Namespaces computer science concept created handle common issue: share name variable various places program without conflicting.\nwords, use object called my_dataset several times program, still sure correctly used depending context.R system namespaces; packages can purrr::flatten jsonlite::flatten computer inside script: function names , two exist different namespaces, behavior functions can totally different symbol evaluated inside two different namespaces.\nwant learn namespaces, please refer 7.4 Special environments chapter Advanced R, turn computer science book: namespaces pretty common programming language.modules made : creating small namespaces can safely define ids without conflicting ids app. need ?\nThink number times created “OK” “validate” button.\nhandling far?\ncreating validate1, validate2, forth.\nthink , mimicking namespacing process: validate namespace 1, another namespace 2.Consider following shiny application:, course, approach works.\nWell, works long codebase small.\ncan sure creating validate6 line 55 another line 837?\ncan sure deleting correct combination UI/server components named way?\nAlso, work smoothly context scroll sliderInput(\"choice1\") observeEvent( input$choice1 , {}) might separated thousands lines?","code":"\nlibrary(shiny)\nui <- function() {\n  fluidPage(\n    # Define a first sliderInput(), \n    # with an id that we will postfix with `1`\n    # in order to make it unique\n    sliderInput(\n      inputId = \"choice1\", \n      label = \"choice 1\", \n      min = 1, max = 10, value = 5\n    ),\n    # Define a first actionButton(), \n    # with an id that we will postfix with `1`\n    # in order to make it unique\n    actionButton(\n      inputId = \"validate1\",\n      label = \"Validate choice 1\"\n    ),\n    # We define here a second sliderInput, \n    # and need its id to be unique, so we \n    # postfix it with 2\n    sliderInput(\n      inputId = \"choice2\",\n      label = \"choice 2\", \n      min = 1, max = 10, value = 5\n    ),\n    # We define here a second actionButton, \n    # and need its id to be unique, so we \n    # postfix it with 2\n    actionButton(\n      inputId = \"validate2\", \n      label = \"Validate choice 2\"\n    )\n  )\n}\n\nserver <- function(input, output, session) {\n  \n  # Observing the first series of inputs\n  # Whenever the user clicks on the first validate button, \n  # the value of choice1 will be printed to the console\n  observeEvent( input$validate1 , {\n    print(input$choice1)\n  })\n  \n  # Same as the first observeEvent, except that we are \n  # observing the second series\n  observeEvent( input$validate2 , {\n    print(input$choice2)\n  })\n}\n\nshinyApp(ui, server)"},{"path":"structuring-project.html","id":"b.-working-with-a-bite-sized-codebase","chapter":"3 Structuring Your Project","heading":"B. Working with a bite-sized codebase","text":"Build application multiple smaller applications easier understand, develop maintain, using shiny (Chang et al. 2022) modules.assume know saying “copy paste something twice, make function”.\nshiny application, can refactor partially repetitive piece code reusable?Yes, guessed right: using shiny modules.\nshiny modules aim three things: simplify “id” namespacing, split codebase series functions, allow UI/Server parts app reused. time, modules used two first. case, say 90% modules write never reused;19 allow us split codebase smaller, manageable pieces.shiny modules, writing combination UI server functions.\nThink small, standalone shiny apps, handle fraction global application.\ndevelop R packages, chances split functions series smaller functions.\nshiny modules, exact thing: just little bit tweaking, can split application series smaller applications.","code":""},{"path":"structuring-project.html","id":"when-to-use-shiny-modules","chapter":"3 Structuring Your Project","heading":"3.2.2 When to use {shiny} modules","text":"matter big application , always safe start modularizing beginning.\nsooner use modules, easier downstream development .\neven easier working golem, promotes use modules beginning application.“Yes, just want write small app, nothing fancy.”production app almost always started small proof concept.\n, small PoC becomes interesting idea.\n, idea becomes strategic asset.\nknow , --fancy app needs become larger larger.\n, better starting solid foundations beginning.","code":""},{"path":"structuring-project.html","id":"a-practical-walkthrough","chapter":"3 Structuring Your Project","heading":"3.2.3 A practical walkthrough","text":"example worth thousand words, let’s explore code small shiny application split modules.","code":""},{"path":"structuring-project.html","id":"a.-your-first-shiny-module","chapter":"3 Structuring Your Project","heading":"A. Your first {shiny} module","text":"Let’s try transform example (one two sliders two action buttons) application module.\nNote following code work shiny version 1.5.0 .Let’s stop minute decompose .server function module (mod_server()) pretty much : use code one use server part shiny application.ui function module (mod_ui()) requires specific things.\ntwo new things: ns <- NS(id) ns(inputId).\nnamespacing happens.\nRemember previous version identified two “validate” buttons slightly different namespaces: validate1 validate2?\n, create namespaces ns() function, built ns <- NS(id).\nline, ns <- NS(id), added top module UI functions allow building namespaces module id.understand , let us try run outside shiny:, namespaced id!call module choice_server() requires different id argument allow creating various internal namespaces prevent id conflicts.20\ncan many validate ids want whole app, long input unique id inside module.","code":"\n# Re-usable module\nchoice_ui <- function(id) {\n  # This ns <- NS structure creates a \n  # \"namespacing\" function, that will \n  # prefix all ids with a string\n  ns <- NS(id)\n  tagList(\n    sliderInput(\n      # This looks the same as your usual piece of code, \n      # except that the id is wrapped into \n      # the ns() function we defined before\n      inputId = ns(\"choice\"), \n      label = \"Choice\",\n      min = 1, max = 10, value = 5\n    ),\n    actionButton(\n      # We need to ns() all ids\n      inputId = ns(\"validate\"),\n      label = \"Validate Choice\"\n    )\n  )\n}\n\nchoice_server <- function(id) {\n  # Calling the moduleServer function\n  moduleServer(\n    # Setting the id\n    id,\n    # Defining the module core mechanism\n    function(input, output, session) {\n      # This part is the same as the code you would put \n      # inside a standard server\n      observeEvent( input$validate , {\n        print(input$choice)\n      })\n    }\n  )\n}\n\n\n# Main application\nlibrary(shiny)\napp_ui <- function() {\n  fluidPage(\n    # Call the UI  function, this is the only place \n    # your ids will need to be unique\n    choice_ui(id = \"choice_ui1\"),\n    choice_ui(id = \"choice_ui2\")\n  )\n}\n\napp_server <- function(input, output, session) {\n  # We are now calling the module server functions \n  # on a given id that matches the one from the UI\n  choice_server(id = \"choice_ui1\")\n  choice_server(id = \"choice_ui2\")\n}\n\nshinyApp(app_ui, app_server)\n# Defining the id\nid <- \"mod_ui_1\"\n# Creating the internal \"namespacing\" function\nns <- NS(id)\n# \"namespace\" the id\nns(\"choice\")[1] \"mod_ui_1-choice\""},{"path":"structuring-project.html","id":"note-for-shiny-1.5.0","chapter":"3 Structuring Your Project","heading":"Note for {shiny} < 1.5.0","text":"Released 2020-06-23, version 1.5.0 shiny introduced new way write shiny modules, using new function called moduleServer().\nnew function introduced make couple ui_function / server_function obvious, old version used require callModule(server_function, id) call.\ncallModule notation still valid (least time writing lines), chose go moduleServer() notation book.\napplications used examples book built new function though, read code, find callModule implementation.","code":""},{"path":"structuring-project.html","id":"b.-passing-arguments-to-your-modules","chapter":"3 Structuring Your Project","heading":"B. Passing arguments to your modules","text":"shiny modules potentially reused may need specific user interface inputs.\nrequires using extra arguments generate UI server.\nUI server functions, can set parameters used configure internals result.can see, app_ui contains series calls \nmod_ui(unique_id, ...) function, allowing additional arguments like function:app_server side contains series mod_server(unique_id, ...), also allowing additional parameters, just like function.live example, can look mod_dataviz.R tidytuesday201942 (Fay 2023l) shiny application, available https://connect.thinkr.fr/tidytuesday201942/.\nFigure 3.1 screenshot application.application contains 6 tabs, 4 pretty much alike: side bar inputs, main panel button, plot.\nplot can , depending tab, scatterplot, histogram, boxplot, barplot.typical case reuse modules: several parts relatively similar, easier bundle inside reusable module, condition UI/server function arguments.\nFIGURE 3.1: Snapshot tidytuesday201942 shiny application.\nLet’s extract pieces application show () parametrize module.module server:, UI entire application :app_server() application:","code":"\nmod_ui <- function(id, button_label) {\n  ns <- NS(id)\n  tagList(\n    actionButton(ns(\"validate\"), button_label)\n  )\n}\n\n# Printing the HTML for this piece of UI\nmod_ui(\"mod_ui_1\", button_label = \"Validate \")\nmod_ui(\"mod_ui_2\", button_label = \"Validate, again\")<!-- The ids are \"namespaced\" with mod_ui_*-->\n<button id=\"mod_ui_1-validate\" type=\"button\" \nclass=\"btn btn-default action-button\">Validate<\/button>\n\n<!-- The ids are \"namespaced\" with mod_ui_*-->\n<button id=\"mod_ui_2-validate\" type=\"button\" \nclass=\"btn btn-default action-button\">Validate, again<\/button>mod_dataviz_ui <- function(\n  id, \n  type = c(\"point\", \"hist\", \"boxplot\", \"bar\")\n) {\n  # Setting a header with the specified type of graph\n  h4(\n    sprintf( \"Create a geom_%s\", type )\n  ),\n  # [ ... ]\n  # We want to allow a coord_flip only with barplots\n  if (type == \"bar\"){\n    checkboxInput(\n      ns(\"coord_flip\"),\n      \"coord_flip\"\n    )\n  }, \n  # [ ... ]\n  # We want to display the bins input only \n  # when the type is histogram\n  if (type == \"hist\") {\n    numericInput(\n      ns(\"bins\"), \n      \"bins\", \n      30, \n      1, \n      150,\n      1\n    )\n  },\n  # [ ... ]\n  # The title input will be added to the graph \n  # for every type of graph\n  textInput(\n    ns(\"title\"),\n    \"Title\",\n    value = \"\"\n  )\n}\nmod_dataviz_server <- function(\n  input, \n  output, \n  session, \n  type\n) {\n  # [ ... ]\n  if (type == \"point\") {\n    # Defining the server logic when the type is point\n    # When the type is point, we have access to input$x, \n    # input$y, input$color, and input$palette, \n    # so we reuse them here\n    ggplot(\n      big_epa_cars, \n      aes(\n        .data[[input$x]], \n        .data[[input$y]], \n        color = .data[[input$color]])\n    )  +\n      geom_point()+ \n      scale_color_manual(\n        values = color_values(\n          1:length(\n            unique(\n              pull(\n                big_epa_cars, \n                .data[[input$color]])\n            )\n          ), \n          palette = input$palette\n        )\n      )\n  } \n  # [ ... ]\n  if (type == \"hist\") {\n    # Defining the server logic when the type is hist\n    # When the type is point, we have access to input$x, \n    # input$color, input$bins, and input$palette\n    # so we reuse them here\n    ggplot(\n      big_epa_cars, \n      aes(\n        .data[[input$x]], \n        fill = .data[[input$color]]\n      )\n    ) +\n      geom_histogram(bins = input$bins)+ \n      scale_fill_manual(\n        values = color_values(\n          1:length(\n            unique(\n              pull(\n                big_epa_cars, \n                .data[[input$color]]\n              )\n            )\n          ), \n          palette = input$palette\n        )\n      )\n  } \n}\napp_ui <- function() {\n  # [...]\n  tagList(\n    fluidRow(\n      # Setting the first tab to be of type point\n      id = \"geom_point\", \n      mod_dataviz_ui(\n        \"dataviz_ui_1\", \n        type = \"point\"\n      )\n    ), \n    fluidRow(\n      # Setting the second tab to be of type point\n      id = \"geom_hist\", \n      mod_dataviz_ui(\n        \"dataviz_ui_2\", \n        type = \"hist\"\n      )\n    )\n  )\n}\napp_server <- function(input, output, session) {\n  # This app has been built before shiny 1.5.0, \n  # so we use the callModule structure\n  # \n  # We here call the server module on their \n  # corresponding id in the UI, and set the \n  # parameter of the server function to \n  # match the correct type of input\n  callModule(mod_dataviz_server, \"dataviz_ui_1\", type = \"point\")\n  callModule(mod_dataviz_server, \"dataviz_ui_2\", type = \"hist\")\n}"},{"path":"structuring-project.html","id":"communication-between-modules","chapter":"3 Structuring Your Project","heading":"3.2.4 Communication between modules","text":"One hardest part using modules sharing data across .\nleast three approaches:Returning reactive functionThe “stratégie du petit r” (pronounced French accent course)“stratégie du grand R6”","code":""},{"path":"structuring-project.html","id":"a.-returning-values-from-the-module","chapter":"3 Structuring Your Project","heading":"A. Returning values from the module","text":"One common approach return reactive function one module, pass another general app_server() function.example illustrates pattern.strategy works well, large shiny apps might hard handle large lists reactive outputs / inputs keep track things organized.\nmight also create reactivity issues, lot reactive function calls harder control, lead much computation server.","code":"\n# Module 1, which will allow to select a number\nchoice_ui <- function(id) {\n  ns <- NS(id)\n  tagList(\n    # Add a slider to select a number\n    sliderInput(ns(\"choice\"), \"Choice\", 1, 10, 5)\n  )\n}\n\n\nchoice_server <- function(id) {\n  moduleServer( id, function(input, output, session) {\n    # We return a reactive function from this server, \n    # that can be passed along to other modules\n    return(\n      reactive({\n        input$choice\n      })\n    )\n  }\n  )\n}\n\n# Module 2, which will display the number\nprinting_ui <- function(id) {\n  ns <- NS(id)\n  tagList(\n    # Insert the number modified in the first module\n    verbatimTextOutput(ns(\"print\"))\n  )\n}\n\nprinting_server <- function(id, number) {\n  moduleServer(id, function(input, output, session) {\n    # We evaluate the reactive function \n    # returned from the other module\n    output$print <- renderPrint({\n      number()\n    })\n  }\n  )\n}\n\n# Application\nlibrary(shiny)\napp_ui <- function() {\n  fluidPage(\n    choice_ui(\"choice_ui_1\"),\n    printing_ui(\"printing_ui_2\")\n  )\n}\n\napp_server <- function(input, output, session) {\n  # choice_server() returns a value that is then passed to \n  # printing_server()\n  number_from_first_mod <- choice_server(\"choice_ui_1\")\n  printing_server(\n    \"printing_ui_2\", \n    number = number_from_first_mod\n  )\n}\n\nshinyApp(app_ui, app_server)"},{"path":"structuring-project.html","id":"b.-the-stratégie-du-petit-r","chapter":"3 Structuring Your Project","heading":"B. The “stratégie du petit r”","text":"strategy, create global reactiveValues list passed along modules.\nidea allows less preoccupied module takes input outputs.\ncan think approach creating small, internal database passed along modules application., create “global” (sense initiated top module hierarchy) reactiveValues() object app_server() function.\ngo modules, passed function argument.good thing method whenever add something one module, immediately available modules r present.\ndownside can make harder reason app, input/content r specified anywhere unless explicitly document : parameter server function “r” , need little bit zealous comes documenting .Note want share module, example package, document structure r.\nexample:","code":"\n# Module 1, which will allow to select a number\nchoice_ui <- function(id) {\n  ns <- NS(id)\n  tagList(\n    # Add a slider to select a number\n    sliderInput(ns(\"choice\"), \"Choice\", 1, 10, 5)\n  )\n}\n\nchoice_server <- function(id, r) {\n  moduleServer(\n    id,\n    function(input, output, session) {\n      # Whenever the choice changes, the value inside r is set\n      observeEvent( input$choice , {\n        r$number_from_first_mod <- input$choice\n      })\n      \n    }\n  )\n}\n\n# Module 2, which will display the number\nprinting_ui <- function(id) {\n  ns <- NS(id)\n  tagList(\n    # Insert the number modified in the first module\n    verbatimTextOutput(ns(\"print\"))\n  )\n}\n\nprinting_server <- function(id, r) {\n  moduleServer(\n    id,\n    function(input, output, session) {\n      # We evaluate the reactiveValue element modified in the \n      # first module\n      output$print <- renderPrint({\n        r$number_from_first_mod\n      })\n    }\n  )\n}\n\n# Application\nlibrary(shiny)\napp_ui <- function() {\n  fluidPage(\n    choice_ui(\"choice_ui_1\"),\n    printing_ui(\"printing_ui_2\")\n  )\n}\n\napp_server <- function(input, output, session) {\n  # both servers take a reactiveValue,\n  #  which is set in the first module\n  # and printed in the second one.\n  # The server functions don't return any value per se\n  r <- reactiveValues()\n  choice_server(\"choice_ui_1\", r = r)\n  printing_server(\"printing_ui_2\", r = r)\n}\n\nshinyApp(app_ui, app_server)#' @param r a `reactiveValues()` list with a \n    `number_from_first_mod` element in it. \n#' This `r$number_from_first_mod` will be \n    printed to the `print` output."},{"path":"structuring-project.html","id":"c.-the-stratégie-du-grand-r6","chapter":"3 Structuring Your Project","heading":"C. The “stratégie du grand R6”","text":"Similar “stratégie du petit r”, can create R6 object, passed along inside modules.R6 objects, created using package name, “traditional” object-oriented programming implementations R.\nR6 object data structure can hold data functions.\nparticularity ’s modified inside function, modified value kept outside function ’s called, making powerful tool manage data across application.R6 object reactive object meant used , uncontrolled reactivity application reduced, thus reduces complexity handling chain reactions across modules.\ncourse, need another special tool app trigger elements.\nexplained detail Chapter 15 book, can find example pattern inside {hexmake} (Fay 2023g) application.eager know R6 works, suggest chapter subject Advanced R (Wickham 2019), R6.","code":""},{"path":"structuring-project.html","id":"d.-other-approaches-about-tidymodules","chapter":"3 Structuring Your Project","heading":"D. Other approaches: About {tidymodules}","text":"tidymodules (Larbaoui 2023) package helps building shiny modules using object-oriented paradigm, based R6.\nallows automatically take care namespaces, makes sharing data across modules easier.\napproach, modules objects, can also define inheritance modules.“Getting Started” page tidymodules offers presentation can build modules using approach, feel free refer want know , dive article advanced features offered package.","code":""},{"path":"structuring-project.html","id":"structuring-your-app","chapter":"3 Structuring Your Project","heading":"3.3 Structuring your app","text":"","code":""},{"path":"structuring-project.html","id":"business-logic-and-application-logic","chapter":"3 Structuring Your Project","heading":"3.3.1 Business logic and application logic","text":"shiny application two main components: application logic business logic.Application logic makes shiny app interactive: structure, buttons, tables, interactivity, etc.\ncomponents specific core business.\nuse line work professional context.\nuse case interactive application.\nmeant used outside app, use markdown report instance.Application logic makes shiny app interactive: structure, buttons, tables, interactivity, etc.\ncomponents specific core business.\nuse line work professional context.\nuse case interactive application.\nmeant used outside app, use markdown report instance.Business logic includes components core algorithms functions make application specific area work.\ncan recognize elements ones can run outside interactive context.\ncase specific computations algorithms, custom plots geom ggplot2 (Wickham, Chang, et al. 2023), specific calls database, etc.Business logic includes components core algorithms functions make application specific area work.\ncan recognize elements ones can run outside interactive context.\ncase specific computations algorithms, custom plots geom ggplot2 (Wickham, Chang, et al. 2023), specific calls database, etc.two components live together.\nreality, live together want keep sanity building app.\nkeep components together file, end rerun app scratch spend five minutes clicking everywhere just sure correctly set color palette graph last tabPanel().Trust us, , pretty.way go?\nExtract business function reactive functions.\nLiterally.\nCompare pattern:one:scripts exact thing.\ndifference second code can easily explored without relaunch app.\nable build reproducible example explore, illustrate, improve top_this().\nfunction can tested, documented, reused outside application.\nMoreover, approach lowers cognitive load debugging: either debug application issue, business logic issue.\nnever debug time.Even , think future: likely colors UI subject change, compared likely core algorithms change?\nsaid Art Unix Programming, “Fashions look feel GUI toolkits may come go, raster operations compositing forever” (Raymond 2003).\nwords, core back-end, consolidated, potentially stay unchanged forever.\nhand, front-end might change: new colors, new graphic designs, new interactions, new visualization libraries, etc.\nWhenever happens, happy separated business logic application logic, change less code.?\nAdd application logic file (typically, module), business logic another R script (typically starting fct_ utils_).\ncan even write business logic inside another package, making functions really reusable outside application.","code":"\nlibrary(shiny)\nlibrary(dplyr)\n# A simple app that returns a table\nui <- function() {\n  tagList(\n    tableOutput(\"tbl\"), \n    sliderInput(\"n\", \"Number of rows\", 1, 50, 25)\n  )\n}\n\nserver <- function(input, output, session) {\n  output$tbl <- renderTable({\n    # Writing all the business logic for the table manipulation \n    # inside the server\n    mtcars %>%\n      # [...] %>% \n      # [...] %>% \n      # [...] %>% \n      # [...] %>% \n      # [...] %>% \n      top_n(input$n)\n  })\n}\n\nshinyApp(ui, server)\nlibrary(shiny)\nlibrary(dplyr)\n\n# Writing all the business logic for the table manipulation \n# inside an external function\ntop_this <- function(tbl, n) {\n  tbl %>%\n    # [...] %>% \n    # [...] %>% \n    # [...] %>% \n    # [...] %>% \n    top_n(n)\n}\n\n# A simple app that returns a table\nui <- function() {\n  tagList(\n    tableOutput(\"tbl\"), \n    sliderInput(\"n\", \"Number of rows\", 1, 50, 25)\n  )\n}\n\n\nserver <- function(input, output, session) {\n  output$tbl <- renderTable({\n    # We call the previously declared function inside the server\n    # The business logic is thus defined outside the application\n    top_this(mtcars, input$n)\n  })\n}\n\nshinyApp(ui, server)"},{"path":"structuring-project.html","id":"small-is-beautiful-bis-repetita","chapter":"3 Structuring Your Project","heading":"3.3.2 Small is beautiful (bis repetita)","text":"lot reasons splitting application smaller pieces, including fact easier maintain, easier decipher, facilitates collaboration.nothing harder maintain shiny app made unique 1000-line long app.R file.\nWell, still 10000-line long app.R file, get idea.\nLong scripts almost always synonymous complexity comes building software.\ncourse, small numerous scripts systematically prevent codebase complexity, simplify collaboration maintenance, divide application logic smaller, easier--understand bits code.practice, big files complex handle make development harder.\nhappens work application production:work long period time (either one run split across several months) codebase.\nHence, get back pieces code wrote long time ago.work long period time (either one run split across several months) codebase.\nHence, get back pieces code wrote long time ago.possibly develop developers.\nMaintaining codebase several people work directory already complex thing: time time might work file separately, situation careful merge things changes implemented.\nalmost impossible work together file throughout project without losing mind: even file thousands lines long.possibly develop developers.\nMaintaining codebase several people work directory already complex thing: time time might work file separately, situation careful merge things changes implemented.\nalmost impossible work together file throughout project without losing mind: even file thousands lines long.implement numerous features.\nNumerous features imply lot UI server interactions.\napp.R file containing thousands lines, hard match UI element server counterpart.\nUI line 50 server line 570, scrolling lot working elements.implement numerous features.\nNumerous features imply lot UI server interactions.\napp.R file containing thousands lines, hard match UI element server counterpart.\nUI line 50 server line 570, scrolling lot working elements.","code":""},{"path":"structuring-project.html","id":"conventions-matter","chapter":"3 Structuring Your Project","heading":"3.3.3 Conventions matter","text":"section find suggestion naming convention app files help team organized.Splitting files good.\nSplitting files using defined convention better.\n?\nusing common convention files helps developers (potentially ) know exactly contained specific file, making easier navigate codebase, newcomers developers already familiar software.developed Refactoring Scale (Lemaire 2020), lacking defined file structure comes codebase leads slower productivity long run, notably new engineers join team: engineers knowledge file structure learned navigate codebase, new comers find hard understand everything organized.\ncourse, long run, even developers knowledge structure can get lost, even haven’t worked project months.’s easier maintain status quo, instead proactively beginning organize related files […], engineers instead learn navigate increasingly sprawling code.\nNew engineers introduced growing chaos raise warning flag encourage team begin splitting code, concerns fall deaf ears […].\nEventually, codebase reaches critical mass persistent lack organization dramatically slowed productivity across engineering team.\nteam take time draft plan grooming codebase, point number variables consider far greater made concerted effort tackle problem months (even years) earlier.Refactoring Scale (Lemaire 2020)Using convention allows everyone know look debugging, refactoring, implementing new features.\nexample, follow golem’s convention (one developed section), know immediately file starting mod_ contains module.\ntake project, look R/ folder, see files starting three letters, know immediately files contain modules.proposition convention defining split application smaller pieces.First , put everything R/ folder.\nbuild app using golem framework, already case.\nuse package convention hold functions application.naming convention golem following:app_*.R (typically app_ui.R app_server.R) contain top-level functions defining user interface server function.app_*.R (typically app_ui.R app_server.R) contain top-level functions defining user interface server function.fct_* files contain business logic, potentially large functions.\nbackbone application may specific given module.\ncan added using golem add_fct(\"name\") function.fct_* files contain business logic, potentially large functions.\nbackbone application may specific given module.\ncan added using golem add_fct(\"name\") function.mod_* files contain unique module.\nMany shiny apps contain series tabs, least tab-like pattern, suggest number according step application.\nTabs almost always named user interface, can use tab name file name.\nexample, build dashboard first tab called “Import”, name file mod_01_import.R.\ncan create file module skeleton using golem::add_module(\"01_import\").mod_* files contain unique module.\nMany shiny apps contain series tabs, least tab-like pattern, suggest number according step application.\nTabs almost always named user interface, can use tab name file name.\nexample, build dashboard first tab called “Import”, name file mod_01_import.R.\ncan create file module skeleton using golem::add_module(\"01_import\").utils_* files contain utilities, small helper functions.\nexample, might want not_na, not_na <- Negate(.na), not_null, small tools using application-wide.\nNote can also create utils specific module.utils_* files contain utilities, small helper functions.\nexample, might want not_na, not_na <- Negate(.na), not_null, small tools using application-wide.\nNote can also create utils specific module.*_ui_*, example utils_ui.R, relates user interface.*_ui_*, example utils_ui.R, relates user interface.*_server_* files contain anything related application’s back-end.\nexample, fct_connection_server.R contain functions related connection database, specifically used server side.*_server_* files contain anything related application’s back-end.\nexample, fct_connection_server.R contain functions related connection database, specifically used server side.Note building module file golem, can also create fct_ utils_ files hold functions utilities specific module.\nexample, golem::add_module(\"01_import\", fct = \"readr\", utils = \"ui\") create R/mod_01_import.R, R/mod_01_import_fct_readr.R R/mod_01_import_utils_ui.R.course, convention, might occasionally feel like deviating general pattern.\napp may many functions, maybe functions can fit one utils_ file.\nwhether one thousands files, always good practice stick formalized pattern much possible.","code":""},{"path":"golem.html","id":"golem","chapter":"4 Introduction to {golem}","heading":"4 Introduction to {golem}","text":"golem (Fay, Guyader, Rochette, et al. 2023) package framework building production-grade shiny applications.\nMany patterns methodologies described book linked golem packages golemverse.\ncourse, advice developed book still valid even plan use golem.quickly introduced golem last chapter, come back package many times following chapters.\nLet’s start introduction package.\nNote version used time writing book 0.4.0.","code":""},{"path":"golem.html","id":"what-is-golem","chapter":"4 Introduction to {golem}","heading":"4.1 What is {golem}?","text":"Note: current version golem used writing book 0.4.0, features presented book might available using older version, little bit different newer version. Feel free browse package NEWS.golem toolkit simplifying creation, development deployment shiny application.\nfocuses building applications sent production, course starting golem beginning also possible, even recommended: easier start golem refactor codebase fit framework.stable release can found CRAN installed :golem development version can found GitHub installed :version package used writing book :motivation behind golem building proof--concept application easy, things change application becomes larger complex, especially need send app production.\nrecently real framework building deploying production-grade shiny apps.\ngolem comes play: offering shiny developers toolkit making stable, easy--maintain, robust production web application R.\ngolem developed abstract away common engineering tasks (example, module creation, addition linking external CSS JavaScript file, etc.), can focus matters: building application.\napplication ready deployed, golem guides testing brings tools deploying common platforms.things keep mind using golem:golem application contained inside package.\nKnowing build package heavily recommended.\ngood news also everything know package development can applied golem.golem application contained inside package.\nKnowing build package heavily recommended.\ngood news also everything know package development can applied golem.golem app works better working shiny modules.\nKnowing modules work also recommended necessary.golem app works better working shiny modules.\nKnowing modules work also recommended necessary.","code":"\ninstall.packages(\"golem\")\nremotes::install_github(\"Thinkr-open/golem\")\npackageVersion(\"golem\")[1] '0.4.0'"},{"path":"golem.html","id":"understanding-golem-app-structure","chapter":"4 Introduction to {golem}","heading":"4.2 Understanding {golem} app structure","text":"golem application R package.\nR package architecture perfectly suited production-ready programs, developed previous chapter.Let’s focus architecture default golem app, present role file plays can use (use) .can create golem project, called golex, RStudio “New project” creation command line.project start specific architecture:familiar building R packages, structure look familiar .\ngood reason: golem app package.","code":"\ngolem::create_golem(\"golex\")\n# Listing the files from the `golex` project using {fs}\nfs::dir_tree(\"golex\")golex\n├── DESCRIPTION\n├── NAMESPACE\n├── R\n│   ├── app_config.R\n│   ├── app_server.R\n│   ├── app_ui.R\n│   └── run_app.R\n├── dev\n│   ├── 01_start.R\n│   ├── 02_dev.R\n│   ├── 03_deploy.R\n│   └── run_dev.R\n├── inst\n│   ├── app\n│   │   └── www\n│   │       └── favicon.ico\n│   └── golem-config.yml\n└── man\n    └── run_app.Rd"},{"path":"golem.html","id":"description-and-namespace","chapter":"4 Introduction to {golem}","heading":"4.2.1 DESCRIPTION and NAMESPACE","text":"DESCRIPTION NAMESPACE standard package files (.e. golem-specific).\nDESCRIPTION, add series metadata package, example, wrote package, package version, goal, complain things go wrong, also information external dependencies, license, encoding, forth.DESCRIPTION file filled automatically first function run dev/01_start.R, functions dev/ scripts.\nwords, time interact directly, wrappers golem usethis (Wickham, Bryan, Barrett 2022) listed dev scripts.NAMESPACE file file NEVER edit hand!\ndefines interact rest package: functions import package functions export, .e. functions available user library(golex).\nfile built running documenting process R package, .e. devtools::document(), specifically case golem::document_and_reload().\nprocess build man/ files fill NAMESPACE, scanning {roxygen} tags .R files.want learn files, resources can refer :Writing R Extensions—DESCRIPTION fileWriting R Extensions—Package namespacesR Packages—Package metadataR Packages—NamespaceBuilding package lasts—eRum 2018 workshop","code":""},{"path":"golem.html","id":"r","chapter":"4 Introduction to {golem}","heading":"4.2.2 R/","text":"R/ folder standard folder store app functions.\nstart project golem, folder pre-populated four .R files: app_config.R, app_server.R, app_ui.R run_app.R.process building application, core functionalities app stored R/ directory, standard way store functions using R package framework.\nNote files “core” features application , .R files also exists.\nexample, need deploy application RStudio platforms, golem create app.R root directory.21\ndev/ folder also contains .R scripts, inside folder live inside R/ folder: utilitarian files used development, core functionalities application.Inside .R files, contained inside R/ folder, find content modules (one added golem::add_modules()) utilitarian/business logic functions, built golem::add_utils() golem::add_fct().Note also folder must contain sub-folders.","code":""},{"path":"golem.html","id":"app_config.r","chapter":"4 Introduction to {golem}","heading":"app_config.R","text":"app_config.R file contains internal mechanics golem, notably referring values inst/ folder, get values config file inst/ folder.\nKeep mind ever need change name application, need change inside DESCRIPTION, also inside app_sys() function.\nmake process easier, can use golem::set_golem_name(), perform actions, plus setting name inside config file.","code":"\n#' Access files in the current app\n#'\n#' NOTE: If you manually change your package\n#' name in the DESCRIPTION, don't forget to change it here too,\n#' and in the config file. For a safer name change mechanism,\n#' use the `golem::set_golem_name()` function.\n#'\n#' @param ... character vectors, specifying subdirectory\n#' and file(s) within your package.\n#' The default, none, returns the root of the app.\n#'\n#' @noRd\napp_sys <- function(...){\n  system.file(..., package = \"golex\")\n}\n\n\n#' Read App Config\n#'\n#' @param value Value to retrieve from the config file.\n#' @param config GOLEM_CONFIG_ACTIVE value.\n#' If unset, R_CONFIG_ACTIVE.  If unset, \"default\".\n#' @param use_parent Logical,\n#' scan the parent directory for config file.\n#'\n#' @noRd\nget_golem_config <- function(\n  value,\n  config = Sys.getenv(\n    \"GOLEM_CONFIG_ACTIVE\",\n    Sys.getenv(\n      \"R_CONFIG_ACTIVE\",\n      \"default\"\n    )\n  ),\n  use_parent = TRUE\n){\n  config::get(\n    value = value,\n    config = config,\n    # Modify this if your config file is somewhere else:\n    file = app_sys(\"golem-config.yml\"),\n    use_parent = use_parent\n  )\n}"},{"path":"golem.html","id":"app_server.r","chapter":"4 Introduction to {golem}","heading":"app_server.R","text":"app_server.R file contains function server logic.\nfamiliar classic “ui.R/server.R” approach, function can seen replacement content function server.R.Building complex shiny application commonly implies using shiny modules.\n, adding series callModule(), ones get bottom file created golem::add_module().also find global elements server-logic: top-level reactiveValues(), connections databases, setting options, forth.","code":"\n#' The application server-side\n#'\n#' @param input,output,session Internal parameters for {shiny}.\n#'     DO NOT REMOVE.\n#' @import shiny\n#' @noRd\napp_server <- function( input, output, session ) {\n  # Your application server logic\n\n}"},{"path":"golem.html","id":"app_ui.r","chapter":"4 Introduction to {golem}","heading":"app_ui.R","text":"piece app_ui.R designed receive counterpart put server.\nEverything put # application UI logic line.\nJust server counterparts, UI side elements ones bottom file creating golem::add_module().default, golem uses fluidPage(), commonly used shiny (Chang et al. 2022) template.\never want use navBarPage(), define : replace one , good go.\ncan also define template page, example htmlTemplate().\nexample application built using htmlTemplate, please visit engineering-shiny.org/grayscale/, engineering-shiny.org/golemhtmltemplate/: applications built top external html template.’re tempted , aware fluidPage() comes series CSS/JS elements, plan using default shiny *Page() function, need add CSS.second part file contains golem_add_external_resources() function, used add, well, external resources.\nmay noticed function found file, app_ui() function.\nfunction used linking external files inside applications: notably files create golem::add_css_file() friends.golem_add_external_resources(), can also define custom resourcesPath.\nfirst line (one add_resource_path()) one allowing inst/app/www folder mounted available www app launch .\nlink makes possible golem bundle CSS JavaScript files automatically.part function, starting tags$head, creates <head> tag application.\n<head> tag pretty standard tag, used HTML define series metadata app.\nlast part function, one bundle_resources(), links CSS JavaScript files contained inst/app/www application, don’t link manually.finally, want add elements <head> application (example, calling shinyalert::useShinyalert() cicerone::use_cicerone() hexmake),22 can add calls bundle_resources() function.\nNote elements inside tags$head(), treated list, separated commas.","code":"\n#' The application User-Interface\n#'\n#' @param request Internal parameter for `{shiny}`.\n#'     DO NOT REMOVE.\n#' @import shiny\n#' @noRd\napp_ui <- function(request) {\n  tagList(\n    # Leave this function for adding external resources\n    golem_add_external_resources(),\n    # Your application UI logic\n    fluidPage(\n      h1(\"golex\")\n    )\n  )\n}\n#' Add external Resources to the Application\n#'\n#' This function is internally used to add external\n#' resources inside the Shiny application.\n#'\n#' @import shiny\n#' @importFrom golem add_resource_path activate_js\n#' @importFrom golem favicon bundle_resources\n#' @noRd\ngolem_add_external_resources <- function(){\n\n  add_resource_path(\n    'www', app_sys('app/www')\n  )\n\n  tags$head(\n    favicon(),\n    bundle_resources(\n      path = app_sys('app/www'),\n      app_title = 'cloop'\n    )\n    # Add here other external resources\n    # for example, you can add\n    # shinyalert::useShinyalert()\n  )\n}"},{"path":"golem.html","id":"run_app.r","chapter":"4 Introduction to {golem}","heading":"run_app.R","text":"run_app() function one use launch app.23The body function wrapped inside with_golem_options(), allows pass arguments run_app() function, can called later golem::get_golem_options().\nidea can pass arguments function, arguments later used inside application display specific version application.\nUsing with_golem_options() function simplifies parameterization shiny applications, development, deployed server, shared package.examples can pass shiny application using pattern:run_app(user_country = \"france\") run_app(user_country = \"germany\") launch application show data specific country.run_app(user_country = \"france\") run_app(user_country = \"germany\") launch application show data specific country.run_app(with_mongo = TRUE) launch application without MongoDB back-end (example taken hexmake).run_app(with_mongo = TRUE) launch application without MongoDB back-end (example taken hexmake).run_app(dataset = iris) make dataset available golem::get_golem_options(\"dataset\"), user can launch function package using dataset created/loadedrun_app(dataset = iris) make dataset available golem::get_golem_options(\"dataset\"), user can launch function package using dataset created/loaded","code":"\n#' Run the Shiny Application\n#'\n#' @param ... arguments to pass to golem_opts.\n#' See `?golem::get_golem_options` for more details.\n#' @inheritParams shiny::shinyApp\n#'\n#' @export\n#' @importFrom shiny shinyApp\n#' @importFrom golem with_golem_options\nrun_app <- function(\n  onStart = NULL,\n  options = list(),\n  enableBookmarking = NULL,\n  uiPattern = \"/\",\n  ...\n) {\n  with_golem_options(\n    app = shinyApp(\n      ui = app_ui,\n      server = app_server,\n      onStart = onStart,\n      options = options,\n      enableBookmarking = enableBookmarking,\n      uiPattern = uiPattern\n    ),\n    golem_opts = list(...)\n  )\n}"},{"path":"golem.html","id":"golem-config","chapter":"4 Introduction to {golem}","heading":"4.2.3 golem-config","text":"","code":""},{"path":"golem.html","id":"app_config.r-1","chapter":"4 Introduction to {golem}","heading":"app_config.R","text":"Inside R/ folder app_config.R file.\nfile designed handle two things:app_sys() wrapper around system.file(package = \"golex\"), allows quickly refer files inside inst/ folder.\nexample, app_sys(\"x.txt\") points inst/x.txt file inside package.app_sys() wrapper around system.file(package = \"golex\"), allows quickly refer files inside inst/ folder.\nexample, app_sys(\"x.txt\") points inst/x.txt file inside package.get_golem_config() helps manipulate config file located inst/golem-config.yml.get_golem_config() helps manipulate config file located inst/golem-config.yml.","code":""},{"path":"golem.html","id":"manipulating-golem-config.yml","chapter":"4 Introduction to {golem}","heading":"Manipulating golem-config.yml","text":"default config file looks like:based config (Allaire 2020) format, allows define contexts, values associated specific contexts.\nexample, default example:default.golem_name, default.golem_version, default.app_prod usable across whole life golem app: developing, also production.production.app_prod might used adding elements used app production.dev.golem_wd dev config moment might reliably use config developing app. Use app_sys() function want rely package path app deployed.options globally set :functions reading options config file :can set :already familiar config package, can use file just config file.golem comes amend_golem_config() function add elements .R/app_config.R, find get_golem_config() function allows retrieve config config file:can also use environment variable (default config behavior):good news don’t want/need use config, can safely ignore file, just leave : used internally golem functions.","code":"default:\n  golem_name: golex\n  golem_version: 0.0.0.9000\n  app_prod: no\n\nproduction:\n  app_prod: yes\n\ndev:\n  golem_wd: !expr golem::pkg_path()\n# This functions sets all the default options for your project\nset_golem_options()── Setting {golem} options in `golem-config.yml` ──────\n✓ Setting `golem_wd` to /Users/colin/golex\nYou can change golem working directory with\nset_golem_wd('path/to/wd')\n✓ Setting `golem_name` to golex\n✓ Setting `golem_version` to 0.0.0.9000\n✓ Setting `app_prod` to FALSE\n── Setting {usethis} project as `golem_wd` ────────────\n# Get the values from the config file\nget_golem_name()[1] \"golex\"\nget_golem_wd()[1] \"/Users/colin/golex\"\nget_golem_version()[1] \"0.0.0.9000\"\n# Get the values in the config file\nset_golem_name(\"this\")✓ Setting `golem_name` to this\nset_golem_version(\"0.0.1\")✓ Setting `golem_version` to 0.0.1\n# Get the values from the config file\nget_golem_name()[1] \"this\"\nget_golem_version()[1] \"0.0.1\"\n# Add a key in the default configuration\namend_golem_config(\n  key = \"MONGODBURL\",\n  value = \"localhost\"\n)\n# Add a key in the production configuration\namend_golem_config(\n  key = \"MONGODBURL\",\n  value = \"0.0.0.0\",\n  config = \"production\"\n)\n# Retrieve the value of `where`\nget_golem_config(\n  \"MONGODBURL\"\n)[1] \"localhost\"\nget_golem_config(\n  \"MONGODBURL\",\n  config = \"production\"\n)[1] \"0.0.0.0\"\nSys.setenv(\"GOLEM_CONFIG_ACTIVE\" = \"production\")\nget_golem_config(\n  \"MONGODBURL\"\n)[1] \"0.0.0.0\""},{"path":"golem.html","id":"golem_config-vs-golem_options","chapter":"4 Introduction to {golem}","heading":"golem_config vs golem_options","text":"two ways configure golem apps:golem_opts run_app() functionThe golem-config.yml fileThe big difference two golem options run_app() meant configured runtime: run_app(val = \"\"), whereas golem-config meant used back-end, linked parameters passed run_app() (even technically possible, main objective).also linked GOLEM_CONFIG_ACTIVE R_CONFIG_ACTIVE environment variables.idea also golem-config.yml file shareable across golem projects (golem_opts application specific), tracked version control systems.example, let’s imagine want deploy hexmake application two RStudio Connect instances, need different MongoDB configuration comes port, db, collection name.\n, can take several approaches:Set values run_app() parameters, means maintain one app.R server deploy.Set everything environment variables, means every server, centralized way keep track variables.Set values golem-config.yaml, set value GOLEM_CONFIG_ACTIVE environment variable environment app deployed.last solution convenient one want easily re-deploy application various servers without (re)set values environment.\nNote, though, shouldn’t used store sensitive data (example users passwords).config file illustrate just said (removed golem-related entries sake clarity):Using configuration file, can deploy app two servers, configure going read application setting environment variable inside RStudio Connect interface, shown Figure 4.1.\nFIGURE 4.1: Setting environment variable RStudio Connect.\n","code":"default:\n  url: mongo\n  mongoport: 12345\n  mongodb: users\n  mongocollecton: hex\nserver1:\n  url: mongo\n  mongoport: 6543\n  mongodb: users\n  mongocollecton: hex\nserver2:\n  url: mongo\n  mongoport: 9876\n  mongodb: shiny\n  mongocollecton: hexmake\nserver2:\n  url: 127.0.0.1\n  mongoport: 3214\n  mongodb: connect\n  mongocollecton: app1"},{"path":"golem.html","id":"instappwww","chapter":"4 Introduction to {golem}","heading":"4.2.4 inst/app/www/","text":"inst/app/www/ folder contains files made available application run time.\nweb application external files allow run.24\nexample, shiny fluidPage() function bundles series CSS JavaScript files, notably Bootstrap library, jQuery. external files enhance app: CSS design part JavaScript interactive part (less).\ntop , can add files: design CSS, JavaScript content (see last chapters book).\norder work, include link files somewhere UI.\ngolem_add_external_resources() made : linking external resources build following functions.golem::add_css_file()golem::add_js_file()golem::add_js_handler()golem::use_external_css_file()golem::use_external_js_file()golem::use_favicon()aware files available www/ application run time, .e. www/ folder available via browser, via R runs/generates application.\nwords, can use www prefix HTML generated UI, read browser, R/server side.\nwant link file read application generation, need use app_sys() function , example, includeMarkdown( app_sys(\"app/www/howto.md\") ).encourage add new external file (e.g. pictures) inst/app/www folder, can later use UI common www prefix.\nAnother common pattern :Adding images inst/app/imgCalling addResourcePath( 'img', system.file('app/img', package = 'golex') )Adding elements UI tags$img(src = \"img/name.png\")","code":""},{"path":"golem.html","id":"dev","chapter":"4 Introduction to {golem}","heading":"4.2.5 dev/","text":"dev/ folder used notebook development process: find series functions can used throughout project.content files specific golem , concept using script store development steps restricted shiny application: easily done package, something recommend .\nfunctions inside files ones used setup, like usethis::use_mit_license() usethis::use_vignette(\"-analysis\"), add testing infrastructure, like usethis::use_test(\"-function\") devtools::check().\nalso find functions populate application like golem::add_module(\"-module\") golem::add_js_file(\"-script\").\nfinally, functions need application ready: pkgdown::build_site(), rhub::check_for_cran() golem::add_dockerfile().come back files later book describe depth golem workflow.","code":""},{"path":"golem.html","id":"man","chapter":"4 Introduction to {golem}","heading":"4.2.6 man/","text":"man/ folder includes package documentation.\ncommon folder automatically filled document app, notably running dev/run_dev.R script document_and_reload() function.Building documentation package widely documented subject, want know documentation build , external links:R Packages - Object documentationIntroduction roxygen2Building package lasts—eRum 2018 workshop","code":""},{"path":"workflow.html","id":"workflow","chapter":"5 The Workflow","heading":"5 The Workflow","text":"Building robust, production-ready web application made easier following given workflow.\none advocating divided five steps:DesignPrototypeBuildStrengthenDeployIn chapter, give brief overview different steps: rest book cover steps depth.course, workflow, one one-size-fits-solution: projects unique, technical requirements, specific planning team coder(s).\nthink following workflow help get good habits comes structuring application project, even know day one application going work large application, whether terms codebase, complexity, time.Note ideas behind workflow, process, used outside shiny project: can applied coding project, even outside R world.\ncourse, tools presented book R shiny specific, general ideas can bootstrapped used outside context.","code":""},{"path":"workflow.html","id":"step-1-design","chapter":"5 The Workflow","heading":"5.1 Step 1: Design","text":"first part workflow design part.first step one happens starting code: one thinking general implementation features application, build general roadmap coding process.\nprocess designing, define application built: somewhere users’ dreams, technically possible, time build application.first step shiny R specific, something software engineers software web application: discuss clients,25\nend users, developers work project.\nidea first step get clear idea everybody involved project wants/able :client/end user’s point view, step involves working getting clear idea want application , confront view developers evaluate possible , much time take implement desired features, etc.client/end user’s point view, step involves working getting clear idea want application , confront view developers evaluate possible , much time take implement desired features, etc.developer team point view, step also involves getting clear idea client asking, words involves translating requirements technical specifications.\nexample, client might write something like “Save plot inside database can search later ”: application user point view, clear feature, developer point view, requirement can translated many ways.developer team point view, step also involves getting clear idea client asking, words involves translating requirements technical specifications.\nexample, client might write something like “Save plot inside database can search later ”: application user point view, clear feature, developer point view, requirement can translated many ways.first step actually implies lot thinking coding.\nmain goal step spend time thinking application still anything implemented, discover blocking elements late, least already written lot code.\nsituation project tell : “wish known sooner”: working designing application building helps lowering chances kind bad surprise.first part workflow span three chapters:“UX Matters”, Chapter 6, chapter introduce concepts “User eXperience” (UX), crucial concept building application.\nchapter cover importance simplicity creating web applications, danger trying implement many components (aka “feature creep”), finally introduce general rules web accessibility.\ntopics vast topics, lot literature online resources exist subjects: readings resources linked inside section.“UX Matters”, Chapter 6, chapter introduce concepts “User eXperience” (UX), crucial concept building application.\nchapter cover importance simplicity creating web applications, danger trying implement many components (aka “feature creep”), finally introduce general rules web accessibility.\ntopics vast topics, lot literature online resources exist subjects: readings resources linked inside section.Chapter 7, “Don’t rush coding” underlines “coding first” might best strategy comes building production application.\nalso quickly introduce concept maps, list common questions might want ask people involved project.Chapter 7, “Don’t rush coding” underlines “coding first” might best strategy comes building production application.\nalso quickly introduce concept maps, list common questions might want ask people involved project.Finally, first part workflow covers gentle introduction CSS, might crucial skill master comes sending application production: either clients already CSS template want include application, want application color design match one company.\nAlso, building professional application, chances want app stand crowd: hence little bit CSS.\npart included design part something might want think beginning: example, companies pre-existing shiny templates, might want include specific fonts, logo, icons, etc.\nthings better known starting code: easier start working inside shiny template migrating existing code template.Finally, first part workflow covers gentle introduction CSS, might crucial skill master comes sending application production: either clients already CSS template want include application, want application color design match one company.\nAlso, building professional application, chances want app stand crowd: hence little bit CSS.\npart included design part something might want think beginning: example, companies pre-existing shiny templates, might want include specific fonts, logo, icons, etc.\nthings better known starting code: easier start working inside shiny template migrating existing code template.","code":""},{"path":"workflow.html","id":"step-2-prototype","chapter":"5 The Workflow","heading":"5.2 Step 2: Prototype","text":"prototype part one build front-end back-end, separately.may know, shiny application interface (front-end, “UI”) used communicate information end users computed server side (back-end, “server”).start solid ground, need build two (front back) separately.one hand, work general appearance, without working actual algorithmic implementation: position inputs outputs, general design, interactions, etc.; everything rely computation back-end.\n“UI first” approach made possible shiny notably one package, shinipsum (Fay Rochette 2023b).hand, (someone team), working building back-end logic, comprises actual outputs going displayed, algorithm compute results, elements need interactive runtime work.\npoint, can use call “Rmd-first” approach, combining R functions writing vignettes describe internals application.\npart workflow developed two chapters:Chapter (8), “Setting success golem”, cover basics getting started golem package can start prototyped application solid foundation.Chapter (8), “Setting success golem”, cover basics getting started golem package can start prototyped application solid foundation.Chapter (9), “Building “ipsum-app”” cover importance prototyping comes building applications, present shinipsum fakir, finally introduce can use “Rmd First” methodology prototype application back-end.Chapter (9), “Building “ipsum-app”” cover importance prototyping comes building applications, present shinipsum fakir, finally introduce can use “Rmd First” methodology prototype application back-end.","code":""},{"path":"workflow.html","id":"step-3-build","chapter":"5 The Workflow","heading":"5.3 Step 3: Build","text":"build part one combine business (back-end) logic front-end.\nthird part, work core engine application, making business logic work inside interactive logic application.step workflow cover Building app golem (10), chapter presents various functions can use build application, .e one using combine back-end front-end.step, cover:handle dependencies project, .e use external libraries inside projectHow organize modules functions inside projectHow add tests back-end application (testing covered depth Step 4)document application codebase, add code coverage continuous integrationHow leverage internal dev functions golem modify behavior specific functions based option()","code":""},{"path":"workflow.html","id":"step-4-strengthen","chapter":"5 The Workflow","heading":"5.4 Step 4: Strengthen","text":"strengthen part covers ensure application immortal, sense defined Chapter 1 book.part, go unit tests, reproducible development environments, version control, continuous integration context shiny applications.\nBuilding solid testing suite crucial success project, allows project stable long run, want add new feature refactor existing code:Refactoring requires able confidently ensure behavior remains identical every iteration. can increase confidence nothing changed writing suite tests (unit, integration, end--end), seriously consider moving forward refactoring effort ’ve established sufficient test coverage.Refactoring Scale (Lemaire 2020)step workflow span chapters.first one, “Build safety net” (Chapter 11), details build testing environment shiny application, testing back-end front-end.\nchapter, introduced testthat testing application back-end, tools linked testing front-end like NodeJS puppeteer module, shinytest crrry testing interactive logic, shinyloadtest dockerstats testing application load.\nchapter also cover renv Docker, two essential tools developing reproducible environment.first one, “Build safety net” (Chapter 11), details build testing environment shiny application, testing back-end front-end.\nchapter, introduced testthat testing application back-end, tools linked testing front-end like NodeJS puppeteer module, shinytest crrry testing interactive logic, shinyloadtest dockerstats testing application load.\nchapter also cover renv Docker, two essential tools developing reproducible environment.Chapter 12, “Version Control”, introduced git automated testing using continuous integration (CI) platforms like Travis CI GitHub Actions.Chapter 12, “Version Control”, introduced git automated testing using continuous integration (CI) platforms like Travis CI GitHub Actions.","code":""},{"path":"workflow.html","id":"step-5-deploy","chapter":"5 The Workflow","heading":"5.5 Step 5: Deploy","text":"deploy send application production built.exhaustive impossible task: countless ways make application accessible targeted users, try cover basics part.\ncourse, deploying application depends lot parameters.\nexample, end users, want use application?\nend users familiar R use daily basis, might looking application runs library(app), .e need application available R package can install machine.\nend users coders, might need application available web application, just open browser navigate URL.\ncases raise questions: can make package available repository R users can get install.packages()?\napplication made available URL, deployed?\ndeployment server available , company ordering application?\nquestions () covered deploy part book.part, present series methods prepare application deployed various environments, notably:Sharing application package can installed manually, GitHub, shared package repository like CRAN BioConductorSending RStudio platformBuilding Docker image serve app cloud providerThis step workflow covered Chapter 13, “Deploy application”.","code":""},{"path":"ux-matters.html","id":"ux-matters","chapter":"6 UX Matters","heading":"6 UX Matters","text":"Let’s state truth: matter complex innovative back-end , application bad user experience (UX) bad.\n’s hard truth.\nnatural tendency, R-coders, focused back-end, .e. server part application, perfectly normal—chances come R design front-ends.26However, people understand use application, application front-end work , application successful matter innovative incredible computation algorithms back-end .building complex, production-grade shiny application, underestimate necessity successful front-end - , , first thing (probably thing) end users web application see.\nHowever, natural back-end/server logic R developers can play us long run - neglecting UI UX, make application less likely adopted among users, good way fail application project.","code":""},{"path":"ux-matters.html","id":"simplicity-is-gold","chapter":"6 UX Matters","heading":"6.1 Simplicity is gold","text":"Simplify, add lightness.Colin Chapman CBE, Founder Lotus Cars (https://www.lotuscars.com/lotus-philosophy/)Aiming simplicity hard thing, rules help build better UX, paving way successful application.mainly two contexts building web app R: professional use (.e., people rely app job), fun (.e., people just use app distraction).cases something common: people want app usable, easily usable.people use app professional context, want fight interface, read complex manuals, lose time understanding supposed supposed use application, least comes core usage application.\ncore usage needs “self-explanatory”, sense , possible, main usage application require reading manual; hand, advanced/rarely used features need detailed documentation.words, want efficient tool, something - beyond accurate - easy grasp.\nprofessional context, comes “business applications”, remember quicker understand interface, better user experience.\nThink professional applications software ranting professional life, cranky user interfaces understand /need relearn every time use .\nwant app one applications.hand, users open app fun, going fight application; just going give app complex use.\nEven game appear easy use users open .section, review two general principles: “don’t make think” principle, states interfaces self-explanatory possible, “rule least surprise”, states elements behave way commonly expected behave.\ntwo rules aim solving one issue: bigger cognitive load app, harder end user use daily basis.","code":""},{"path":"ux-matters.html","id":"how-we-read-the-web-scanning-content","chapter":"6 UX Matters","heading":"6.1.1 How we read the web: Scanning content","text":"One big lie tell developers end user use app way designed used (though honest, true software).\nlove think faced app, users carefully read instructions make rational decision based careful examination inputs expect .\nharsh truth , happens.First , users rarely carefully read instructions: scan perform first action less matches need , .e., satisfice (portmanteau satisfy suffice); process shown Figure 6.1.\nNavigating web, users try optimize decision, making decision “optimal”, first action sufficiently satisfactory relevance.\nbehave like lot reasons, notably want quick possible web, cost wrong low time - even make wrong decision website, chances just “return” “cancel” button away canceling last action.\nFIGURE 6.1: design web page versus user really scan . (Krug 2014).\nexample, let’s look user interface hexmake (Fay 2023g), shiny app building hex stickers, available https://connect.thinkr.fr/hexmake/ (see Figure 0.3 screenshot application).\nFIGURE 6.2: Snapshot hexmake shiny application https://connect.thinkr.fr/hexmake/.\nreading pattern application?\nfirst thing using app?inherent logic application: sub-menu designed handle one specific part sticker.\nsecond menu one used download sticker, last menu one used open “” app.\nopening app, first move open “”?\nopen sub-menus select “logical” one start ?\nChances reading line, think .\nreality, behave less rationally ’d like think.\ntime click first thing matches .\nexample, time first change package name upload image even opening “” section app.users scanned page, perform first action seems reasonable, coined “Rational Choice Structure Environment” Herbert . Simon, “organisms adapt well enough ‘satisfice’; , general, optimize.”.\nwords, “soon find link seems like might lead ’re looking , ’s good chance ’ll click ” (Don’t Make Think, (Krug 2014)).also means user might perform ’d expect “irrational” choices.\nscanning application, might something unexpected, use part app way expect used.\nexample, creating app designed take input data filled following specific form, need check requirement fulfilled, end debugging errors uncommon entries.pretty common thing apps software general: expect users use product ways expected, ways might seem absurd .\ncalled “defensive programming” - prevent application used unexpected way, instead relying end user rational choice, “defend” function unexpected inputs.example, consider small app:wrong app?\nProbably nothing developer point view - label stating one select one elements drop-list, something plotted .\nPretty standard.\nhappens drop-empty?\nfirst thought never happen, explicitly specified one elements selected.\nfact, chances even label, users eventually end empty selectInput(), leading printing red error plot .\nlucky , error prevents plot displayed; errors make application crash.?\nAdopt defensive programming mindset.\nEvery time create interactive elements, inputs outputs, things user might interact , ask : “[crazy thing] happens? handle case minimal viable requirements app met?”\nfact, focusing user side - back-end also examined potential unexpected behaviors.\nexample, shiny app relies database connection, gracefully check connection possible, , send message user database reachable, either restart app come back minutes.fact, crucial thing comes making app successful: always fail gracefully informatively.\nmeans even R code fails, whole app fail.\nR code fails reason, user either get nothing back informative bug message, faced grayish version application.27\nNote using external widgets, like one DT package (binds external JavaScript library), can make principle harder apply: less control happening using widget, gracefully handling errors can tricky.\nIndeed, DT sometimes returns errors originates user’s browser, nothing R.\ncase, might hard catch error gracefully manage .\nupside error crash whole application.way shiny designed, lot R errors make shiny app fail completely.\nthought upfront, means user might use app 10 minutes, series specifications, enter parameters data, app completely crash point.\nuser restart scratch, native way - - restart app crashed.\nimportant thing keep mind building shiny apps: app failed, easy way natively get back moment just crashed, meaning users might lose significant amount time spent configuring app.One good practice try, much possible, wrap server calls form try-catch pattern.\nway, can, example, send notification user process fails, either using shiny (Chang et al. 2022) notification function, external package like shinyalert (Attali Edwards 2021), custom JavaScript alert like notify.js.\npseudo-code pattern using attempt (Fay 2020) package:","code":"\nlibrary(shiny)\nui <- function(){\n  tagList(\n    # Designing an interface that lets the \n    # user select a species from iris, \n    # then display a plot() of this dataset\n    selectInput(\n      \"species\", \n      \"Choose one or more species\",\n      choices = unique(iris$Species),\n      multiple = TRUE, \n      selected = unique(iris$Species)[1]\n    ), \n    plotOutput(\"plot\")\n  )\n}\n\nserver <- function(\n  input, \n  output, \n  session\n){\n  # Taking the species as input, and returning the plot \n  # of the filtered dataset\n  output$plot <- renderPlot({\n    plot(\n      iris[ iris$Species %in% input$species, ]\n    )\n  })\n}\n\nshinyApp(ui, server)\nlibrary(shiny)\nui <- function(){\n  # Here, we would define the interface\n  tagList(\n    # [...]\n  )\n}\n\nserver <- function(\n  input, \n  output, \n  session\n){\n  # We are attempting to connect to the database, \n  # using a `connect_db()` connection\n  conn <- attempt::attempt({\n    connect_db()\n  })\n  # if ever this connection failed, we notify the user \n  # about this failed connection, so that they can know\n  # what has gone wrong\n  if (attempt::is_try_error(conn)){\n    # Notify the user\n    send_notification(\"Could not connect\")\n  } else {\n    # Continue computing if the connection was successful\n    continue_computing()\n  }\n}\n\nshinyApp(ui, server)"},{"path":"ux-matters.html","id":"building-a-self-evident-app-or-at-least-self-explanatory","chapter":"6 UX Matters","heading":"6.1.2 Building a self-evident app (or at least self-explanatory)","text":"One goals usable app make self-evident, fall back self-explanatory app first option complex goal.\ndifference two?self-evident: “needing demonstrated explained; obvious.” lexico.comself-evident: “needing demonstrated explained; obvious.” lexico.comself-explanatory: “Easily understood; needing explanation.” lexico.comself-explanatory: “Easily understood; needing explanation.” lexico.comThe first app designed way learning curve using .\nself-explanatory app small learning curve, designed way make user understand matter seconds.Let’s, example, get back tidytuesday201942 (Fay 2023l) application available connect.thinkr.fr/tidytuesday201942.\n, application self-evident: need certain amount background knowledge understanding application designed .\nexample, might need vague sense tidytuesday .\n, read home text, help understand .\n, look menu elements, see series functions ggplot2 (Wickham, Chang, et al. 2023): without background package, might find difficult understand app actually .Yet, want understand app designed , find enough information either home page section, external links needed.\ncourse, building apps, context matters.\ntidytuesday201942 app one developed context tidytuesday, online weekly event learning data analysis, mainly use tidyverse packages.\ngood chance visitors app already know ggplot2 visiting app.","code":""},{"path":"ux-matters.html","id":"a.-about-the-rule-of-least-surprise","chapter":"6 UX Matters","heading":"A. About the “Rule of Least Surprise”","text":"rule also known “Principle Least Astonishment.”Rule Least Surprise: interface design, always least surprising thing.Art UNIX Programming (Raymond 2003)browsing web, series pre-conceptions things .\nexample, expect underline text clickable, good chance use underlined text app, user try click .\nUsually, link also colored differently rest text.\ngoes pointer mouse, usually switches arrow small hand finger .\nlot conventions exist web, endeavor follow : clickable link least one properties just described—neither underlined colored change pointer hovered, chances user click .Just imagine second “Download” button tidytuesday201942 app actually download graph generated.\nEven , imagine button download graph something else.\nfeel experience?just links: almost every visual element web page surrounded conventions.\nButtons borders.\nLinks appear clickable.\nBigger texts headers, bigger important.\nElements “visually nested” related.course, absolute rule, always room creativity comes design, keep mind much surprise can lead users lost comes understanding use application.Weirdly enough, easy thing spot arrive web page app: can either feel “natural”, can immediately see something .\nhard thing something spot new-comer: developing app makes us familiar app might miss something used way conventionally used.28Let’s exemplify “Render” button {tidytuesday201942} application.\napp built top Bootstrap 4, CSS class shiny action button.29\nResult: without CSS, buttons come buttons, making harder decipher actually buttons.\nCompare native design shown Figure 6.3 one little bit CSS (one online) shown Figure 6.4.\nFIGURE 6.3: Snapshot tidytuesday201942 without borders around “Render Plot” button.\n\nFIGURE 6.4: Snapshot tidytuesday201942 borders around “Render Plot” button.\nYes, subtle, yet second version button clearer understand.Least surprise crucial make user experience good one: users rarely think something behaving unexpectedly app, app: usually think fault.\ngoes application failing behaving unexpected way: users think “wrong”, instead blaming designer software.users astonished usually assume made mistake; unlikely realize page astonished .\nlikely feel fault anticipating page.\nDon’t take advantage ; making users feel stupid endearing.cranky user: Principle Least Astonishment (https://www.ibm.com/developerworks/web/library/us-cranky10/us-cranky10-pdf.pdf)","code":""},{"path":"ux-matters.html","id":"b.-thinking-about-progression","chapter":"6 UX Matters","heading":"B. Thinking about progression","text":"progression app, design clear pattern moving forward.\nneed bring user step 1 step 7, need guide whole process, can simple putting “Next” buttons bottom page.Inside app, progression clear, even step n+1 relies inputs n.\ngood simple way hide elements step n+1 requirements fulfilled step n.\nIndeed, can sure step 2 relies step 1 hide step 2 everything need, users go step 2 soon.Another way help readability ensure kind linear logic app: step 1, data upload, step 2, data cleaning, step 3, data visualization, step 4, exporting report.\norganized application around logic, left right / right left, top bottom.Let’s compare tidytuesday201942 hexmake—one clear progression, hexmake, designed : upper menus design stickers, filled can download .\nprogression , top bottom.\nhand, tidytuesday201942 real progression inside : can navigate one tab .\nHence visual clues progression app.","code":""},{"path":"ux-matters.html","id":"c.-inputs-and-errors","chapter":"6 UX Matters","heading":"C. Inputs and errors","text":"’re one developing app, course conscious inputs needed complete specific task.\nusers might new app; distracted reading, might clearly understand , maybe really want use app forced boss.\nmaybe app little bit hard understand, hard know first.building app, make sure input necessary, made clear inside app .\nOne way simply hiding UI elements used necessary inputs : example, plot fails rendering unless provided selection, try render plot unless selection done.\nbuilding dashboard tab 2 needs specific inputs tab 1, tab 3 specific inputs tab 2, sure tabs 2 3 clickable/available required inputs filled.\nway, can help user navigate app, reducing cognitive load sure everything correctly set : clickable, something missing.elements app: example, hexmake, start filled fields hex sticker ready, even start download part, application still work.\nchosen another pattern, making user fill everything able download, needed make downloading impossible fields filled.\nAnother example application use MongoDB back-end store hex stickers: application launched with_mongo set FALSE, user see buttons field refers option.Think times ordering something internet, need fill specific fields able click “Validate” button.\nWell, apply approach app; prevent unwanted mistakes.Note using golem::use_utils_ui() function, end script UI tools, one with_red_star, adds little red star end text entering, common pattern signifying field mandatory:Also, generous comes errors: rather frustrating user see app crash without explanation went wrong.\nsomething fails behaves unexpectedly, error messages key feature help user get right track.\n, time, helping correct error best way save time answering angry emails!Let’s refactor app , using shinyFeedback (Merlino Howard 2021) package., user, way easier understand went wrong: moved red error Error: need finite 'xlim' values pop-explaining went wrong way user configured app.\nPerfect way reduce bug tracker incoming tickets!way natively shiny, note can also use shinyalert package implement alerts.\nalso possible build little bit HTML, CSS JavaScript, shown notifyjsexample repository.","code":"\nwith_red_star(\"Enter your name here\")\nlibrary(shiny)\nlibrary(shinyFeedback)\n\nui <- function(){\n  tagList(\n    # Attaching the {shinyFeedback} dependencies\n    useShinyFeedback(),\n    # Recreating our selectInput + plot from before\n    selectInput(\n      \"species\", \n      \"Choose one or more species\",\n      choices = unique(iris$Species),\n      multiple = TRUE, \n      selected = unique(iris$Species)[1]\n    ), \n    plotOutput(\"plt\")\n  )\n}\n\nserver <- function(\n  input, \n  output, \n  session\n){\n  output$plt <- renderPlot({\n    # If the length of the input is 0 \n    # (i.e. nothing is selected),we show \n    # a feedback to the user in the form of a text\n    # If the length > 0, we remove the feedback.\n    if (length(input$species) == 0){\n      showFeedbackWarning(\n        inputId = \"species\",\n        text = \"Select at least one Species\"\n      )  \n    } else {\n      hideFeedback(\"species\")\n    }\n    # req() allows to stop further code execution \n    # if the condition is not a truthy. \n    # Hence if input$species is NULL, the computation \n    # will be stopped here.\n    req(input$species)\n    plot(\n      iris[ iris$Species %in% input$species, ]\n    )\n  })\n}\n\nshinyApp(ui, server)"},{"path":"ux-matters.html","id":"the-danger-of-feature-creep","chapter":"6 UX Matters","heading":"6.2 The danger of feature-creep","text":"","code":""},{"path":"ux-matters.html","id":"what-is-feature-creep","chapter":"6 UX Matters","heading":"6.2.1 What is feature-creep?","text":"Even often (least commercial software world) excessive complexity comes project requirements based marketing fad month rather reality customers want software can actually deliver.\nMany good design smothered marketing’s pile “checklist features”—features , often, customer ever use.\nvicious circle operates; competition thinks compete chrome adding chrome.\nPretty soon, massive bloat industry standard everyone using huge, buggy programs even developers can love.Art UNIX Programming (Raymond 2003)Feature-creep process adding features app complicate usage maintenance product, point extreme feature-creep can lead product entirely unusable completely impossible maintain.\nmovement always starts well-intentioned: easier navigation, information, visualizations, modifiable elements, forth.\ncan come project managers devs, users can also responsible asking features app.\nworking context app specifications designed users, regularly meet users feedback, often asking efficiently implementable.\nBehind feature-creep, always make user experience better, adding things often leads slower app, worse user experience, steeper learning curve, bad states want app.Let’s take rather common data analytic process: querying data, cleaning , plotting summarizing .\nlet’s say want add simple admin dashboard tracks users app.\n’s pretty tempting think single entity throw whole codebase one big project hope best.\nlet’s decompose minute: one task querying cleaning, one analyzing, one administration.\npoint one big app three different tasks?\nSplitting project three smaller apps keep large app harder maintain, might perform well.\nIndeed, put everything app, add extra mechanisms prevent admin panel loading user simply wants go extraction step, inversely, user visiting admin panel probably need extraction analysis back-end loaded simply want browse way users using app.Rule Parsimony: Write big program clear demonstration nothing else .Art UNIX Programming (Raymond 2003)let’s focus smaller scope, think things can thought feature-creeping shiny app.","code":""},{"path":"ux-matters.html","id":"too-much-reactivity","chapter":"6 UX Matters","heading":"6.2.2 Too much reactivity","text":"designing app, designing way users navigate app.\ntime, design idea users perform “correct selection” pattern.\nSomething like: “user select 40 sliderInput() plot update automatically. user select element need selectInput() plot update automatically”.\nreality happen : ”user click slider, aim 40 reach 45, 37, 42, right amount 40. select something selectInput(), chances , correct one first time.”real-life usage, people make mistakes using app (even discovering application): move sliders right place, application reacts moves, experience using app can bad: example , full reactivity means get 4 “wrong” computations plot getting right.tidytuesday201942 application example, let’s imagine elements left automatically update plot: especially context learning tool, reacting configuration change launch lot useless computation, slowing app long run, making user experience poorer.\nFIGURE 6.5: Snapshot tidytuesday201942 shiny application.\n?\nPrevent implementing “full reactivity”: instead, add user input launch computation.\nsimplest solution button user signals application now ready application compute parameterized.","code":""},{"path":"ux-matters.html","id":"too-much-interactivity","chapter":"6 UX Matters","heading":"6.2.3 Too much interactivity","text":"Users love interactive elements.\nMaybe much.\npresent user choice simple graph dynamic one, chances spontaneously go dynamic graph.\nYet, dynamic always solution, several reasons.","code":""},{"path":"ux-matters.html","id":"a.-speed","chapter":"6 UX Matters","heading":"A. Speed","text":"Dynamic elements slower render fixed ones.\ntime (always), rendering dynamic elements means bind external libraries, maybe make R convert data one format another.\nexample, rendering ggplot2 plot faster rendering ggplotly() plot, convert one format another.30That said, visualization libraries created equal, choosing interactive visualization automatically lead poorer performance: just keep mind can happen.Finally, choose use interactive library application, try , possible, stick one: ’s easier developer lower potential conflicts libraries, user, “learn” one interactive mechanism.","code":""},{"path":"ux-matters.html","id":"b.-visual-noise","chapter":"6 UX Matters","heading":"B. Visual noise","text":"interactivity can lead element less straightforward understand.\nThink minute plotly outputs, seen Figure 6.6.\nawesome need kind interactivity, common plot might many things understand.\nInstead focusing data, lot things show: buttons zoom, selection, export png, things like .\nkind graph, users might lose time focusing understanding buttons , instead focusing matters: getting insights data.\nFIGURE 6.6: Output plotly output, available buttons shown.\ncourse, features awesome need : exploring data interactively fundamental strength application context right.\nsolid reason using interactive table, use standard HTML table.\nwords, make things interactive value adding interactivity; example, small table users need sort table, filter, navigate pages, datatable() DT (Xie, Cheng, Tan 2023) add visual noise adding value application.Adding interactivity widgets (cases) means adding visual elements original content: words, adding visual components might distract user focusing content information.sum , good rule live add feature sake adding feature.Less .Ludwig Mies van der Rohe (http://www.masterofdetails.fr/mies-van-der-rohe-less--/)","code":""},{"path":"ux-matters.html","id":"web-accessibility","chapter":"6 UX Matters","heading":"6.3 Web accessibility","text":"","code":""},{"path":"ux-matters.html","id":"about-accessibility","chapter":"6 UX Matters","heading":"6.3.1 About accessibility","text":"building professional shiny applications, keep mind , potentially, app consumed large audience.\nlarge audience means chance app used people visual, mobility, maybe cognitive disabilities.31\nWeb accessibility deals process making web available people disabilities.Web fundamentally designed work people, whatever hardware, software, language, location, ability.\nWeb meets goal, accessible people diverse range hearing, movement, sight, cognitive ability.Accessibility Context - Web Accessibility Initiative (https://www.w3.org/WAI/fundamentals/accessibility-intro/)learning code web app “canonical” courses, introduced web accessibility early.\nexample, can learn straight first chapter learn.freecodecamp.org.\nfirst course, “Responsive Web Design Certification”, chapter web accessibility just one HTML CSS.","code":""},{"path":"ux-matters.html","id":"making-your-app-accessible","chapter":"6 UX Matters","heading":"6.3.2 Making your app accessible","text":"","code":""},{"path":"ux-matters.html","id":"a.-hierarchy","chapter":"6 UX Matters","heading":"A. Hierarchy","text":"Headers just make application stylish.\n<h1> <h6> can create hierarchy inside web page: <h1> important (hierarchically speaking) <h2>.\nperfectly designed website, one header level 1, small number level 2 headers, headers level 3, etc.\nelements used screen readers (devices used blind people) understand page organized.Hence, rely header level styling: use <h1> need larger title somewhere app.\nwant increase size header, use CSS, see upcoming chapter.","code":""},{"path":"ux-matters.html","id":"b.-html-element-semantic-tags-and-tag-metadata","chapter":"6 UX Matters","heading":"B. HTML element: Semantic tags, and tag metadata","text":"HTML, two kinds elements: ones without “meanings” like <div> <span>, ones considered meaningful, like <title> <article>.\nsecond ones called “semantic tags”, specific meaning sense define contain.\nthing headers; elements crucial screen readers understand page contains.One HTML method can use tag attributes metadata.\nTag attributes complementary elements can add tag add information: time, using add CSS class, identifier, maybe events like onclick.32\ncan also used add, example, alternate text image: alt one read image available, either page reach resource, person navigating app using screen--speech technology.\n, can use tagAppendAttributes() function shiny, allows us add attributes HTML element.makes two things similar (semantic tags tag metadata) unseen users without impairment: image correctly rendered user capable reading images, chances user see image.\nelements made people disabilities, especially users might using screen--speech technologies: visitors use software scans textual content page reads , helps navigate page.navigation also crucial comes screen--speech technology: software able read <title> tag, jump <nav>, straight <article> page.\nHence importance structuring page: technologies need app built structured way, possible jump one section another, common tasks fully capable user commonly .tags exist can used semantic purpose: example, <address>, <video>, <label>.","code":"\nlibrary(htmltools)\n# Using the `article` tag for a better semantic\ntags$article(\n  tags$h2(\"Title\"),\n  tags$div(\"Content\")\n)\nlibrary(shiny)\nlibrary(magrittr)\nui <- function(){\n  # Generating a UI with one plot\n  tagList(\n    plotOutput(\"plot\") %>% \n      # Adding the `alt` attribute to our plot\n      tagAppendAttributes(alt = \"Plot of iris\")\n  )\n}\n\nserver <- function(\n  input, \n  output, \n  session\n){\n  # Generating the plot from the server side,\n  # no modification here \n  output$plot <- renderPlot({\n    plot(iris)\n  })\n}\n\nshinyApp(ui, server)"},{"path":"ux-matters.html","id":"c.-navigation","chapter":"6 UX Matters","heading":"C. Navigation","text":"app user might also mobility impairment.\nexample, Parkinson’s disease might using app, someone handicap making harder move hand click.\nusers, moving arm grab mouse might challenging, might navigating web using keyboard .building app, thinking users able use crucial: maybe many buttons need move mouse eventually click able use .\nmuch possible, make everything doable keyboard: example, textInput() validation button , allow user validate pressing ENTER keyboard.\ncan, example, done {nter} package, available GitHub33 time writing lines.","code":"\n# Adapted from https://github.com/JohnCoene/nter\nlibrary(nter)\nlibrary(shiny)\n\nui <- fluidPage(\n  # Setting a text input and a button\n  textInput(\"text\", \"\"),\n  # This button will be clicked when 'Enter' is pressed in \n  # the textInput text\n  actionButton(\"send\", \"Do not click hit enter\"),\n  verbatimTextOutput(\"typed\"),\n  # define the rule\n  nter(\"send\", \"text\") \n)\n\nserver <- function(input, output) {\n  \n  r <- reactiveValues()\n  \n  # Define the behavior on click\n  observeEvent( input$send , {\n    r$printed <- input$text\n  })\n  \n  # Render the text\n  output$typed <- renderPrint({\n    r$printed\n  })\n}\n\nshinyApp(ui, server)"},{"path":"ux-matters.html","id":"d.-color-choices","chapter":"6 UX Matters","heading":"D. Color choices","text":"Color blindness also common impairment comes web accessibility.\nrather common deficiency: according colourblindawareness.org, “color (color) blindness (color vision deficiency, CVD) affects approximately 1 12 men (8%) 1 200 women world”.Keeping mind prevalence color blindness even important context shiny, developing data science products, often include data visualization.\ndesigned wrong, dataviz can unreadable specific type color blindness.\nrecommend using viridis (Garnier 2021) palette, created readable common types color blindness., example, visualization lens various typed color blindness:jet.colors palette matlab (Roebuck 2022)\nFIGURE 6.7: Original view jet.colors palette matlab.\nSee Figure 6.7.\nFIGURE 6.8: Original view viridis palette viridis.\nSee Figure 6.8.Even without color blindness, ’s already way readable.\nlet’s now use {dichromat} (Lumley 2022) package simulate color blindness.Simulation deuteranopia jet.colors viridis\nFIGURE 6.9: View jet.colors palette deuteranopian.\nSee Figure 6.9.\nFIGURE 6.10: View viridis palette deuteranopian.\nSee Figure 6.10.Simulation protanopia jet.colors viridis\nFIGURE 6.11: View jet.colors palette protanopian.\nSee Figure 6.11.\nFIGURE 6.12: View viridis palette protanopian.\nSee Figure 6.12.Simulation tritanopia jet.colors viridis\nFIGURE 6.13: View jet.colors palette tritanopian.\nSee Figure 6.13.\nFIGURE 6.14: View viridis palette tritanopian.\nSee Figure 6.14.can see, viridis palette always gives readable graph jet.colors one.\n, plus side, looks fantastic.\nhesitate try use !","code":"\n# This function generates a plot for an \n# internal matrix, and takes a palette as\n# parameter so that we can display the \n# plot using various palettes, as the\n# palette should be a function\nwith_palette <- function(palette) {\n  x <- y <- seq(-8 * pi, 8 * pi, len = 40)\n  r <- sqrt(outer(x^2, y^2, \"+\"))\n  z <- cos(r^2) * exp(-r / (2 * pi))\n  filled.contour(\n    z,\n    axes = FALSE,\n    color.palette = palette,\n    asp = 1\n  )\n}\nwith_palette(matlab::jet.colors)\nwith_palette(viridis::viridis)\nlibrary(dichromat)\ndeutan_jet_color <- function(n){\n  cols <- matlab::jet.colors(n)\n  dichromat(cols, type = \"deutan\")\n}\nwith_palette( deutan_jet_color )\ndeutan_viridis <- function(n){\n  cols <- viridis::viridis(n)\n  dichromat(cols, type = \"deutan\")\n}\nwith_palette( deutan_viridis )\nprotan_jet_color <- function(n){\n  cols <- matlab::jet.colors(n)\n  dichromat(cols, type = \"protan\")\n}\nwith_palette( protan_jet_color )\nprotan_viridis <- function(n){\n  cols <- viridis::viridis(n)\n  dichromat(cols, type = \"protan\")\n}\nwith_palette( protan_viridis )\ntritan_jet_color <- function(n){\n  cols <- matlab::jet.colors(n)\n  dichromat(cols, type = \"tritan\")\n}\nwith_palette( tritan_jet_color )\ntritan_viridis <- function(n){\n  cols <- viridis::viridis(n)\n  dichromat(cols, type = \"tritan\")\n}\nwith_palette( tritan_viridis )"},{"path":"ux-matters.html","id":"evaluating-your-app-accessibility-and-further-reading","chapter":"6 UX Matters","heading":"6.3.3 Evaluating your app accessibility and further reading","text":"","code":""},{"path":"ux-matters.html","id":"a.-emulate-vision-deficiency-using-google-chrome","chapter":"6 UX Matters","heading":"A. Emulate vision deficiency using Google Chrome","text":"Google Chrome built-feature allows simulate vision deficiency.\naccess feature, open developer console, open “Tools” > “Rendering” menu.\n, find bottom input called “Emulate vision deficiencies”, allow simulate Blurred vision, four types color blindness.example, Figure 6.15 Figure 6.16 emulate blurred vision deuteranopia hexmake app.\nFIGURE 6.15: Emulating blurred vision Google Chrome.\n\nFIGURE 6.16: Emulating deuteranopia Google Chrome.\n","code":""},{"path":"ux-matters.html","id":"b.-external-tools","chapter":"6 UX Matters","heading":"B. External tools","text":"several tools web can evaluate accessibility web page.\ncan also use Google Chrome built-tool called Lighthouse (come back Testing chapter).IBM Equal Access Toolkit open source tool monitor accessibility web application comes Google Chrome Firefox Extensions.IBM Equal Access Toolkit open source tool monitor accessibility web application comes Google Chrome Firefox Extensions.Evaluating Web Accessibility comes lengthy reports advice checking accessibility website.Evaluating Web Accessibility comes lengthy reports advice checking accessibility website.https://www.webaccessibility.com/ online checker web page accessibility, allows freely test 5 pages.\nresult test hexmake application can seen Figure 6.17.https://www.webaccessibility.com/ online checker web page accessibility, allows freely test 5 pages.\nresult test hexmake application can seen Figure 6.17.\nFIGURE 6.17: Web accessibility results hexmake application.\nNote can also add Chrome Firefox extension https://www.webaccessibility.com, making straightforward run accessibility tests.\nalso comes tools Java JavaScript, notably NodeJS module, can used programmatically, example, Continuous Integration suite.","code":""},{"path":"dont-rush-into-coding.html","id":"dont-rush-into-coding","chapter":"7 Don’t Rush into Coding","heading":"7 Don’t Rush into Coding","text":"","code":""},{"path":"dont-rush-into-coding.html","id":"designing-before-coding","chapter":"7 Don’t Rush into Coding","heading":"7.1 Designing before coding","text":"believe software design craft worth intelligence, creativity, passion can muster.\nOtherwise look past easy, stereotyped ways approaching design implementation; rush coding thinking.\n’ll carelessly complicate relentlessly simplifying—’ll wonder code bloats debugging hard.Art UNIX Programming (Raymond 2003) (bold.)","code":""},{"path":"dont-rush-into-coding.html","id":"the-urge-to-code","chapter":"7 Don’t Rush into Coding","heading":"7.1.1 The urge to code","text":"moment receive specifications app, tempting rush coding.\nperfectly normal: ’re R developers love building software, soon problem emerges, brain starts thinking technical implementation, packages, pieces code, things love building application.rushing coding beginning safest way go.\nFocusing technical details beginning can make miss big picture, whole app charge project, piece whole app assigned.\never faced situation coding project tell “Oh, wish realized sooner, now need refactor lot code specific thing”?\nYes, situation: realizing late thing implemented work another feature discover along road.\n“Oh wish realized sooner package existed trying implement functions !”34\nthing: ’re jumping straight solving programming problem someone else open-sourced solution problem.course, implementing solution might good thing specific cases: avoiding heavy dependencies, incompatible licensing, joy intellectual challenge, building production software, safer go existing solution one fits project: existing packages/software widely used community industry benefit wider testing, wider documentation, larger audience need ask questions.\ncourse, saves time, immediately long run: re-using existing solution allows save time re-implementing , save time today, also prevents detect correct bugs, saving time tomorrow.35Note also assessing dependency/technology good choice application easy task: difference thinking something good choice knowing choice correct one.\ntime, faced new technology, makes sense take time write small prototype tests features want use.\nprocess prototyping small applications test features made easier notably using shinipsum package, see Chapter 9.rushing coding, take time conceptualize application/modules piece paper.\nhelp get big picture piece code writing: inputs, outputs, packages/services can use inside application, fit rest project, forth.","code":""},{"path":"dont-rush-into-coding.html","id":"knowing-where-to-search","chapter":"7 Don’t Rush into Coding","heading":"7.1.2 Knowing where to search","text":"good developer knowing search, search .\nnon-exhaustive list places can look stuck/looking existing packages.","code":""},{"path":"dont-rush-into-coding.html","id":"r-and-shiny","chapter":"7 Don’t Rush into Coding","heading":"R and {shiny}","text":"CRAN Task View: Web Technologies Services CRAN Task View: Databases R, useful interacting web technologies databases.cloudyr project, focuses cloud services R.METACRAN, search engine R packages.GitHub search using language:R: search GitHub, forget add language-specific tag.RStudio Community series posts shiny: questions, announcements, best practices, etc.","code":""},{"path":"dont-rush-into-coding.html","id":"web","chapter":"7 Don’t Rush into Coding","heading":"Web","text":"Mozilla developer center one comprehensive resource platforms comes web technologies (HTML, CSS, JavaScript)Google Developer Center also series resources can helpful comes web technologies.FreeCodeCamp contains 2000 hours free courses web technologies, plus blog forum.","code":""},{"path":"dont-rush-into-coding.html","id":"about-concept-map","chapter":"7 Don’t Rush into Coding","heading":"7.1.3 About concept map","text":"Using concept map think app can valuable method help grasp big picture application.Concept maps widely used tool, software engineering world many fields.\nidea concept maps take piece paper (digital tool) draw concepts come mind specific topic, relationships link concepts together.\nDrawing concept map way organize knowledge specific topic.piece software, trying add technical details way things implemented: listing various “actors” (concepts) around app, relationships .\nexample, Figure 7.1 simple concept map hexmake (Fay 2023g) app.\nFIGURE 7.1: hexmake concept map, built XMind (https://www.xmind.net).\ncan see, detailing technical implementations: writing external database specification, connection process, different modules interact , etc.\ngoal concept map think big picture, see “” application.\n, creating concept map helps us list flow app: user wants configure hex, built default image uploaded one, hex finished, user can either download register database.\ndatabase can browsed restore hex.\nuser can also export .hex file, can restore app configuration.general flow written , can get back several times process building app, also perfect tool end see everything place: application finished, can question :Can point concept confirm ’s ?Can look every relationship see work expected?Deciding level detail want put concept map depends; “simple” applications probably need complex maps.\nalso depends precise specifications , many people working project: concept map valuable tool comes communication, allows people involved project visual clues conceptual architecture application.beware: complex maps also unreadable!\ncase, might make sense divide several concept maps: one “big picture”, smaller ones focus specific components application.","code":""},{"path":"dont-rush-into-coding.html","id":"ask-questions","chapter":"7 Don’t Rush into Coding","heading":"7.2 Ask questions","text":"starting code, safe call ask team/client (depending project) series questions just get good grasp whole project.(non-exhaustive) list information might need along way.Side note: course, questions cover core features application.\n’re pretty sure thought covering already.\ncontextual questions directly linked application , yet can useful line.","code":""},{"path":"dont-rush-into-coding.html","id":"about-the-end-users","chapter":"7 Don’t Rush into Coding","heading":"7.2.1 About the end users","text":"questions might ask:end users app?tech-literate?context using app?machines (computer, tablet, smartphone, device)?restrictions comes browser using? (example, still using old version Internet Explorer?)using app office, phone driving tractor, plant, wearing lab coat?might seem like weird questions just focusing technical side app implementation, think app used: application used driving agricultural machines might need fewer interactive things, bigger fonts, simpler interface, fewer details, direct information.\nbuilding shiny app team sellers always road, chances need app can browse mobile.\ndeveloping mobiles requires different kind mindset.36Another good reason talking users important step, time, people writing specifications end users either request many features enough.\nusers really need many interactive plots?\nactually need much granularity information?\nreally see datatable 15k lines?\nreally care able zoom dygraph can see point minute scale?\nextent app fast?Asking questions important, building interactive widgets makes app little bit slower, shoving series unnecessary widgets make user experience worse, adding cognitive load necessary.\nspeed execution app also important parameter application: getting sense need speed application allow judge whether focus optimizing code execution.top , remember things saw last chapter accessibility: end users might specific accessibility requirements.","code":""},{"path":"dont-rush-into-coding.html","id":"building-personas","chapter":"7 Don’t Rush into Coding","heading":"7.2.2 Building personas","text":"persona concept borrowed design marketing refers fictional characters serve user type.\nwords, persona character represents “typical” behavior traits group users interact product.persona consists description fictional person represents important customer user group product, typically presents information demographics, behavior, product usage, product-related goals, tasks, attitudes, etc.Quantitative Evaluation Personas Information (Chapman et al. 2008)Using personas design process helps center focus end user, know creating application .\n, building application, can think persona interact given feature: use ?\nunderstand ?\nneed add extra information?\nfind useful?Asking kinds questions helps take step back feature implementation re-focus matters: building application someone else, eventually use .benefits personas enable designers envision end user’s needs wants, remind designers needs necessarily end users’ needs, provide effective communication tool, facilitates better design decisions.Creating Using Personas Software Development: Experiences Practice (Billestrup et al. 2014)building personas made easier interacted end users, suggested previous section.\nGiven answers questions, able draw common characteristics future users application.don’t hesitate detail fictional characters “[p]ersonas considered useful developed whole characters, described enough detail designers developers get feeling personality”.\n(Billestrup et al. 2014)","code":""},{"path":"dont-rush-into-coding.html","id":"pre-existing-code-base","chapter":"7 Don’t Rush into Coding","heading":"7.2.3 Pre-existing code-base","text":"time time, building shiny app top existing code-base: either scripts business logic, package lucky, PoC shiny app.kinds projects often referred “brownfield projects”, opposition “greenfield projects”, borrowing terminology urban planning: greenfield project one building “evergreen” lands, brownfield project building lands , example, industrial lands, need sanitized, potentially contain waste pollution, constructions need destroyed, roads needs deviated, things can make urban planning process complex.\n, can extend software engineering, greenfield project one start scratch, brownfield project one need build top existing code-base, implying need extra work actually working project.transforming brownfield projects, may face significant impediments problems, especially automated testing exists, tightly-coupled architecture prevents small teams developing, testing, deploying code independently.DevOps Handbook (Kim 2016)Depending chose handle , starting codebase already written can either much helping, can shooting foot.\ntime, shiny projects built reproducible infrastructures: find series library() calls, functions structure per se, documentation, tests.\ncase, advise “hard way”, least seems hard way: throw app away start scratch.Well, really scratch: extract core business logic app make package.\nTake time developer(s) built current app, can make extract core business logic, .e. pieces code need reactive context run.\nWrite documentation package, work testing, done, call day: now solid ground building back-end, built outside reactivity, linked application, time can used outside app.\nmight actually useful think: can serve analysts data scientists benefit functions outside application, can use business logic functions now packaged, reusable.Existing shiny projects, cases, built software engineers web developers—built data analysts/scientists wanted create interactive PoC work.\ngood news, , can expect core algorithms pretty solid innovative.\nweb development strength: perfectly normal, core job.\nimplies shiny PoCs take shortcuts rely hacks, especially comes managing reactivity, beautiful concept small projects can complex scale software engineer training; even , given R nature sequential.’s better split business app logic beginning (explained chapter 3): simplifies process refactoring shiny PoC production-grade shiny application.","code":""},{"path":"dont-rush-into-coding.html","id":"deployment","chapter":"7 Don’t Rush into Coding","heading":"7.2.4 Deployment","text":"many considerations deployment hard list , keep mind ask questions application deployed beginning, sending production might become painful experience.\ncourse, less solved deploying Docker: works container machine, work production, simple : example, building shiny application used 10 people building application needs scale 50.000 users.\nLearning end project “now need scale large user base” might prevent deployment successful, kind scale implies specific consideration building.just tip iceberg things can happen.\nLet’s stop little story: upon time, team developers missioned build app, one feature app API requests.\nfar good, nothing complicated, discovered server app going deployed access internet, making impossible issue API requests server.\n, containers worked dev machines, access internet.\ndeployed, app stopped working, team lost couple days exchanges client, trying debug API calls, realized issue app, production server : nobody team, developers client, thought asking internet access server.’s even important think side application, people writing specs interacting might come Data Science team, might might discussed team deploying app.\nchance mind needed deploy shiny app company server.example, maybe application database back-end.\n, need access database, correct port set, permission given process executes shiny app read, maybe write, database.\n, good reason, database managers issue read write permissions database without examined app wants read, write.\nsum , want weeks delay app deployment, start discussion beginning project.\nway, even process getting permission write company database takes time, might end coding marathon.","code":""},{"path":"setting-up-for-success.html","id":"setting-up-for-success","chapter":"8 Setting up for Success with {golem}","heading":"8 Setting up for Success with {golem}","text":"starting prototype build anything, initialize golem (Fay, Guyader, Rochette, et al. 2023) project!\nhelp start application solid ground, project ready filled, can start prototyping right inside .general workflow “prototype build” following: project manager sets golem project, first steps filled, general structure (potentially shiny module) set, project registered version control system.\nstructure, package modules combined, can start prototyping UI inside module, work CSS JavaScript elements might needed, back-end functionalities inside Rmarkdown files.\n, two prototyping sides finished, work integration everything inside reactive context.chapter chapter 11, presenting golem package depth.\ngolem framework standardizes process building production-ready shiny applications.","code":""},{"path":"setting-up-for-success.html","id":"create-a-golem","chapter":"8 Setting up for Success with {golem}","heading":"8.1 Create a {golem}","text":"golem installed available computer, can go File > New Project… RStudio, choose “Package shiny app Using golem” input.want command line, can use:, new project launched.\nstructure project:already experience R packages, files appear familiar .\n’s golem app package, uses standard R package structure (yes, good news everything know R packages work golem-based application).","code":"\n# Creating a golem project from the command line\ngolem::create_golem(path = \"path/to/package\")\n# This is what a default {golem} project looks like\n# Listing the files from the `golex` project using {fs}\nfs::dir_tree(\"golex\")golex\n├── DESCRIPTION\n├── NAMESPACE\n├── R\n│   ├── app_config.R\n│   ├── app_server.R\n│   ├── app_ui.R\n│   └── run_app.R\n├── dev\n│   ├── 01_start.R\n│   ├── 02_dev.R\n│   ├── 03_deploy.R\n│   └── run_dev.R\n├── inst\n│   ├── app\n│   │   └── www\n│   │       └── favicon.ico\n│   └── golem-config.yml\n└── man\n    └── run_app.Rd"},{"path":"setting-up-for-success.html","id":"setting-things-up-with-dev01_start.r","chapter":"8 Setting up for Success with {golem}","heading":"8.2 Setting things up with dev/01_start.R","text":"created project, first file opens dev/01_start.R.\nfile contains series commands run , start project.","code":""},{"path":"setting-up-for-success.html","id":"fill-the-description-and-set-options","chapter":"8 Setting up for Success with {golem}","heading":"8.2.1 Fill the DESCRIPTION and set options","text":"First, fill DESCRIPTION file adding information package contain app:, call golem::set_golem_options() function, add information golem-config.yml file, set (Müller 2020) package root sentinel.\nR package designed handle directory management R.\nused combination golem, helps ensure everything console performed relatively root directory project: one containing DESCRIPTION application.\nway, even change working directory R session subfolder, still able create modules CSS files correct folder.","code":"\ngolem::fill_desc(\n  # The Name of the package containing the App\n  pkg_name = \"ipsumapp\",\n  # The Title of the package containing the App\n  pkg_title = \"PKG_TITLE\",\n  # The Description of the package containing the App\n  pkg_description = \"PKG_DESC.\",\n  # Your First Name\n  author_first_name = \"AUTHOR_FIRST\",\n  # Your Last Name\n  author_last_name = \"AUTHOR_LAST\",\n  # Your Email\n  author_email = \"AUTHOR@MAIL.COM\",\n  # The URL of the GitHub Repo (optional)\n  repo_url = NULL\n)"},{"path":"setting-up-for-success.html","id":"set-common-files","chapter":"8 Setting up for Success with {golem}","heading":"8.2.2 Set common files","text":"want use MIT license, add README, code conduct, lifecycle badge, NEWS.’s also invited use Git:","code":"\n# You can set another license here\nusethis::use_mit_license( name = \"Golem User\" )\n# Add a README, Code of Conduct, lifecycle badge and NEWS.md\n# file to your application\nusethis::use_readme_rmd( open = FALSE )\nusethis::use_code_of_conduct()\nusethis::use_lifecycle_badge( \"Experimental\" )\nusethis::use_news_md( open = FALSE )\nusethis::use_git()"},{"path":"setting-up-for-success.html","id":"use-recommended-elements","chapter":"8 Setting up for Success with {golem}","heading":"8.2.3 Use recommended elements","text":"golem::use_recommended_tests() golem::use_recommended_deps() sets default testing infrastructure adds dependencies application.","code":""},{"path":"setting-up-for-success.html","id":"add-utility-functions","chapter":"8 Setting up for Success with {golem}","heading":"8.2.4 Add utility functions","text":"two functions add file various functions can used along process building app.See file detail description functions.file, , example, find list_to_li(), function turn R list HTML list with_red_star(), function add small red star UI input, useful communicating input mandatory.","code":"\n# These files will create R/golem_utils_ui.R\n# and R/golem_utils_server.R\ngolem::use_utils_ui()\ngolem::use_utils_server()"},{"path":"setting-up-for-success.html","id":"changing-the-favicon","chapter":"8 Setting up for Success with {golem}","heading":"8.2.5 Changing the favicon","text":"Favicons small icons located tab browser: default application, favicon golem hex.want change default favicon:’re now set!\n’ve successfully initiated project can go dev/02_dev.R.","code":"\ngolem::use_favicon( path = \"path/to/favicon\")"},{"path":"setting-up-for-success.html","id":"setting-infrastructure-for-prototyping","chapter":"8 Setting up for Success with {golem}","heading":"8.3 Setting infrastructure for prototyping","text":"","code":""},{"path":"setting-up-for-success.html","id":"add-modules-in-dev02_dev.r","chapter":"8 Setting up for Success with {golem}","heading":"8.3.1 Add modules in dev/02_dev.R","text":"golem::add_module() function creates module R folder.\nfile modules named name parameter, adding mod_ R file, mod_*_ui mod_*_server UI server functions.new file contain:Note avoid making errors putting app, end file contain code copied pasted inside UI server functions.adding core app.\nfirst time, modules contain prototyped UI application, application ready integrated, add core logic .","code":"\n# Creating a module skeleton\ngolem::add_module(name = \"my_first_module\")✔ File already exists.\n• Go to R/mod_my_first_module.R#' my_first_module UI Function\n#'\n#' @description A shiny Module.\n#'\n#' @param id,input,output,session Internal parameters for {shiny}.\n#'\n#' @noRd \n#'\n#' @importFrom shiny NS tagList \nmod_my_first_module_ui <- function(id){\n  ns <- NS(id)\n  tagList(\n \n  )\n}\n    \n#' my_first_module Server Functions\n#'\n#' @noRd \nmod_my_first_module_server <- function(id){\n  moduleServer( id, function(input, output, session){\n    ns <- session$ns\n \n  })\n}\n    \n## To be copied in the UI\n# mod_my_first_module_ui(\"my_first_module_1\")\n    \n## To be copied in the server\n# mod_my_first_module_server(\"my_first_module_1\")"},{"path":"setting-up-for-success.html","id":"add-css-and-js-files","chapter":"8 Setting up for Success with {golem}","heading":"8.3.2 Add CSS and JS files","text":"Adding infrastructure JavaScript CSS files beginning can also formalize set-: giving rest team specific file can write JavaScript CSS code.generate following file:, infrastructure launching JavaScript code application ready (code standard jQuery format: back JavaScript end book).generate following file:can see, already skeleton building shiny JavaScript handlers.create blank CSS file inside inst/app/www folder.Note building application golem, files linked automatically application.","code":"\ngolem::add_js_file( \"script\" )$( document ).ready(function() {\n \n});\ngolem::add_js_handler( \"handlers\" )$( document ).ready(function() {\n  Shiny.addCustomMessageHandler('fun', function(arg) {\n \n  })\n});\ngolem::add_css_file( \"custom\" )"},{"path":"building-ispum-app.html","id":"building-ispum-app","chapter":"9 Building an “ipsum-app”","heading":"9 Building an “ipsum-app”","text":"","code":""},{"path":"building-ispum-app.html","id":"prototyping-is-crucial","chapter":"9 Building an “ipsum-app”","heading":"9.1 Prototyping is crucial","text":"","code":""},{"path":"building-ispum-app.html","id":"prototype-then-polish","chapter":"9 Building an “ipsum-app”","heading":"9.1.1 Prototype, then polish","text":"Prototyping first may help keep investing far much time marginal gains.Art UNIX Programming (Raymond 2003)yet another rule Art Unix Programming: “Rule Optimization: Prototype polishing. Get working optimize .”\nGetting things work trying optimize app always good approach:Making things work working low-level optimization makes whole engineering process easier: “minimal viable product” works, even slowly perfectly, gives stronger sense success project. example building vehicle, feels success start skateboard wheel: quickly product can used move, waiting end project finally something useful. Building skateboard helps developer maintain sense accomplishment throughout life project: quicker can running program, MVP (Minimum Viable Product, seen Figure 9.1), better.One really nice things running program frequently get see running, fun, ’s programming .Unicorn Project (Kim 2019)\nFIGURE 9.1: Building minimum viable product (MVP).\nAbstraction hard, makes codebase harder work . heard lot copying pasting something twice, write function. shiny, writing piece app twice, write modules. kinds abstractions elegant optimized, can make software harder work building . focusing turning something function, make work first. said R Data Science (Wickham Grolemund 2017) abstraction purrr (Wickham Henry 2023):master functions, ’ll find takes much less time solve iteration problems.\nnever feel bad using loop instead map function.\nmap functions step tower abstraction, can take long time get head around work.\nimportant thing solve problem ’re working , write concise elegant code (although ’s definitely something want strive towards!).R Data Science - 21.5 map functions (Wickham Grolemund 2017)small example, can refer binding module hexmake (Fay 2023g): module manipulates namespaces, inputs, session automatically bind inputs R6 object containing image (see implementation , ).\n’s elegant solution: instead duplicating content, use functions automatically bind events.\nhigher level abstraction: manipulate different levels namespacing inputs, making harder reason change codebase.’s hard identify upfront real bottlenecks app.\nlong app working state, hard identify real pieces code need optimized.\nChances ask upfront app bottlenecks , aim right.\nInstead losing time focusing specific pieces code think need optimized, start something works, optimize code.\nwords, “Make Work. Make Right. Make Fast”, (KentBeck).’s hard identify upfront real bottlenecks app.\nlong app working state, hard identify real pieces code need optimized.\nChances ask upfront app bottlenecks , aim right.\nInstead losing time focusing specific pieces code think need optimized, start something works, optimize code.\nwords, “Make Work. Make Right. Make Fast”, (KentBeck).’s easier spot mistakes something can run.\npiece software runs, straightforward check change codebase breaks software : either still runs .’s easier spot mistakes something can run.\npiece software runs, straightforward check change codebase breaks software : either still runs .","code":""},{"path":"building-ispum-app.html","id":"the-ui-first-approach","chapter":"9 Building an “ipsum-app”","heading":"9.1.2 The “UI first” approach","text":"Using can called “UI first” approach building app cases safest way go.\ntwo main reasons.","code":""},{"path":"building-ispum-app.html","id":"a.-agreeing-on-specifications","chapter":"9 Building an “ipsum-app”","heading":"A. Agreeing on specifications","text":"First , helps everybody involved application agree app supposed , UI set, “surprise implementation”.\nWell, least, best way reduce number changes app, sooner global idea app, better.\nhard implement core new feature app 90% finished, way easier implement detected start.\nIndeed, implementing core features app advanced can critical, application might thought work way now needs work, adding certain elements might lead need change core architecture app.\nagree elements compose app, sudden “oh, app needs thing now, sorry hadn’t realized ”.blame person ordering app realizing everything needed build app: really hard mental model whole software writing specifications, mention reading .\nhand, mock application UI really helps us realize app works, agree developer actually want application (realize something actually need).Prototyping UI first require least possible computation server side application.\nfocus appearance app: buttons, figures, tables, graphs, interact .\nstage design process, focusing correctness results graphs: placing elements front-end can sure everything , even buttons trigger anything.\npoint, idea get people ordering app think actually need, might question like “oh, button download results pdf?”.\nprecise moment perfect time change specification.","code":""},{"path":"building-ispum-app.html","id":"b.-organizing-work","chapter":"9 Building an “ipsum-app”","heading":"B. Organizing work","text":"pre-defined UI allows every person involved coding process know part app working , sure forget anything.\nmight working app team, need find strategy efficiently splitting work among coders.\n’s much easier work piece app can visually identify integrate complete app scenario.\nwords, easier told “working ‘Summary’ panel mock UI” “working bullet points 45 78 specifications”.","code":""},{"path":"building-ispum-app.html","id":"prototyping-shiny","chapter":"9 Building an “ipsum-app”","heading":"9.2 Prototyping {shiny}","text":"next section, introduced two packages can used prototyping user interface: shinipsum (Fay Rochette 2023b) fakir (Fay Rochette 2023a).","code":""},{"path":"building-ispum-app.html","id":"fast-ui-prototyping-with-shinipsum","chapter":"9 Building an “ipsum-app”","heading":"9.2.1 Fast UI prototyping with {shinipsum}","text":"prototyping UI application, focusing building actual computation: need create draft visual components, can visual clues end result.\n, can use shinipsum package, designed generate random shiny (Chang et al. 2022) elements.\nfamiliar “lorem ipsum”, fake text generator used software design placeholder text, idea : generating placeholders shiny outputs.\nexample application built shinipsum, please visit engineering-shiny.org/shinipsum/, engineering-shiny.org/golemhtmltemplate/: applications look little bit different every time open !shinipsum can installed CRAN :can install package GitHub :package includes series functions generates random placeholders.\nexample, random_ggplot() generates random ggplot2 (Wickham, Chang, et al. 2023) elements.\nrun code two times, get different results, seen Figure 9.2 Figure 9.3.37\nFIGURE 9.2: random plot.\n\nFIGURE 9.3: Another random plot.\ncourse, idea combine shiny interface, example, random_ggplot() used renderPlot() plotOutput().\nwant prototype still close app might look like, functions take arguments can shape output: example, random_ggplot() type parameter can help select specific ggplot2 geom.Figure 9.4 screenshot application.\nFIGURE 9.4: app built shinipsum.\nshinipsum functions include:tables:print outputs:text, image, ggplotly, dygraph, DT.shinipsum also good tool want demonstrate given UI framework look like used shiny.\n, example, find {golemhtmltemplate}, available engineering-shiny.org/golemhtmltemplate/, uses W3 web page template.38","code":"\ninstall.packages(\"shinipsum\")\nremotes::install_github(\"Thinkr-open/shinipsum\")\nlibrary(shinipsum)\nlibrary(ggplot2)\nrandom_ggplot() + \n  labs(title = \"Random plot\") \nrandom_ggplot() + \n  labs(title = \"Random plot\") Bin width defaults to 1/30 of the range of the data.\nPick better value with `binwidth`.\nlibrary(shiny)\nlibrary(shinipsum)\nlibrary(DT)\nui <- fluidPage(\n  h2(\"A Random DT\"),\n  DTOutput(\"data_table\"),\n  h2(\"A Random Plot\"),\n  plotOutput(\"plot\"),\n  h2(\"A Random Text\"),\n  tableOutput(\"text\")\n)\n\nserver <- function(input, output, session) {\n  output$data_table <- DT::renderDT({\n    random_DT(5, 5)\n  })\n  output$plot <- renderPlot({\n    random_ggplot()\n  })\n  output$text <- renderText({\n    random_text(nwords = 50)\n  })\n}\nshinyApp(ui, server)\nrandom_table(nrow = 3, ncol = 3)  day time  temp\n1 346  840 36.33\n2 346  850 36.34\n3 346  900 36.35\nrandom_print(type = \"model\")\n    Shapiro-Wilk normality test\n\ndata:  datasets::airquality$Ozone\nW = 0.88, p-value = 3e-08"},{"path":"building-ispum-app.html","id":"using-fakir-for-fake-data-generation","chapter":"9 Building an “ipsum-app”","heading":"9.2.2 Using {fakir} for fake data generation","text":"Generating random placeholders shiny might enough: maybe also need example datasets.can accomplished using fakir package, primarily created provide fake datasets R tutorials exercises, can easily used inside shiny application.time writing lines, package available GitHub, can installed :package contains three datasets randomly generated call corresponding functions:fake_base_clients() generates fake dataset ticketing service.fake_base_clients() generates fake dataset ticketing service.fake_sondage_answers() fake survey transportation.fake_sondage_answers() fake survey transportation.fake_visits() fake dataset visits website.fake_visits() fake dataset visits website.idea datasets combine various formats can reflect “real-life” datasets: contain dates, numeric character variables, missing values.\ncan also manipulated included sf (R-sf?) geographical dataset fra_sf allowing map creation.Fake datasets created fakir can used build light examples use inputs, filters interactive maps, examples internal functions corresponding documentation.","code":"\nremotes::install_github(\"Thinkr-open/fakir\")\nlibrary(fakir)\nfake_visits(from = \"2017-01-01\", to = \"2017-01-31\")# A tibble: 31 × 8\n   timestamp   year month   day  home about  blog\n * <date>     <dbl> <dbl> <int> <int> <int> <int>\n 1 2017-01-01  2017     1     1   369   220   404\n 2 2017-01-02  2017     1     2   159   250   414\n 3 2017-01-03  2017     1     3   436   170   498\n 4 2017-01-04  2017     1     4    NA   258   526\n 5 2017-01-05  2017     1     5   362    NA   407\n 6 2017-01-06  2017     1     6   245   145   576\n 7 2017-01-07  2017     1     7    NA    NA   484\n 8 2017-01-08  2017     1     8   461   103   441\n 9 2017-01-09  2017     1     9   337   113   673\n10 2017-01-10  2017     1    10    NA   169   308\n# ℹ 21 more rows\n# ℹ 1 more variable: contact <int>"},{"path":"building-ispum-app.html","id":"proto-rmdfirst","chapter":"9 Building an “ipsum-app”","heading":"9.3 Building with RMarkdown","text":"one side building user interface, (someone team) can start working back-end implementation.\nimplementation done reactive logic: back-end depend reactive context.\ndocumentation gold, start writing back-end documentation directly package documentation:Inside Vignettes folder: call usethis::use_vignette() create skeleton Vignette, used package documentation.Inside Vignettes folder: call usethis::use_vignette() create skeleton Vignette, used package documentation.inst/ folder, prefer including RMarkdown files documentation end package.inst/ folder, prefer including RMarkdown files documentation end package.call “Rmd-first”.","code":""},{"path":"building-ispum-app.html","id":"define-the-content-of-the-application","chapter":"9 Building an “ipsum-app”","heading":"9.3.1 Define the content of the application","text":"Rmarkdown files perfect spot sandbox back-end application: inside file, don’t think reactive behavior, just working plain old R code: data wrangling operations, multi-parameter-based models, summary tables outputs, graphical outputs, etc.nice thing can share output rendered file HTML PDF either client boss, anyone involved project.\nway, can focus core algorithm, UI implementation like “want button blue” need know output model correct.\nwords, applying rule separation concerns, .e. help focus one part application without adding cognitive load person “reading” outputs.\n, last least, implement changes back-end functions, way easier check share static file application., best way separate things: afraid writing multiple RMarkdown files, one part end application.\n, help everybody focus matters: , team, person ordering application.Building back-end Rmd files also good way make back-end “application independent”, sense helps documenting algorithms building can used outside application.\nmany cases, building application, creating functions contain business logic/domain expertise, can, fact, used outside application.\nWriting functions work together forces think functions, also gives good starting point anybody familiar R want start using back-end toolkit.\ncourse, building application package, way easier now: can share package application inside , along function launch app, also functions can used outside.need data use example, feel free pick one fakir!","code":""},{"path":"building-ispum-app.html","id":"using-the-rmd-files-as-a-laboratory-notebook","chapter":"9 Building an “ipsum-app”","heading":"9.3.2 Using the Rmd files as a laboratory notebook","text":"Rmd can also used place keep track mind creating application: time, create functions inside R/ folder, might perfect place document thought process.\nhand, using Markdown kind “software laboratory notebook” keep track idea good way document choices made data wrangling, models, visualization, can use common knowledge-base throughout application life: can share client, rest team, anybody involved project.also, developing multiple Rmd files helps separation work multiple developers, reduce code conflicts development.","code":""},{"path":"building-ispum-app.html","id":"rmd-vignettes-and-documentation-first","chapter":"9 Building an “ipsum-app”","heading":"9.3.3 Rmd, Vignettes, and documentation first","text":"Working golem (Fay, Guyader, Rochette, et al. 2023) framework implies build application R package.\ncourse, R package implies writing documentation: one main goals Vignettes, R package, document use package.\ngood news checking package, .e. running check() devtools (Wickham, Hester, et al. 2022) R CMD check, Vignettes going built, process fail least one Vignettes fails render.\nway, can use documentation back-end extra tool unit testing!One radical approach “Rmd first” philosophy write everything Rmd beginning project: write function code, roxygen tags, tests, etc., move everything correct spot package infrastructure happy everything.\ncourse, need add another feature app, open new markdown start process development documentation .","code":""},{"path":"build-app-golem.html","id":"build-app-golem","chapter":"10 Building the App with {golem}","heading":"10 Building the App with {golem}","text":"Now application prototyped inside golem (Fay, Guyader, Rochette, et al. 2023) skeleton, can work integration.\nstep workflow, linking back-end front-end together, working global engineering application:add organize dependenciescreate include sub-modules necessaryorganize utility functions link module usedadd testing infrastructurelink CI/CD servicesNote concepts introduced extensively explored following chapters: present chapter walkthrough find inside 02_dev scripts.","code":""},{"path":"build-app-golem.html","id":"add-dependencies","chapter":"10 Building the App with {golem}","heading":"10.1 Add dependencies","text":"","code":""},{"path":"build-app-golem.html","id":"package-dependencies","chapter":"10 Building the App with {golem}","heading":"10.1.1 Package dependencies","text":"building shiny (Chang et al. 2022) application, deal dependencies.\nWell, least one dependency, shiny.\nchances using shiny inside application: probably call functions packages, example, ggplot2 (Wickham, Chang, et al. 2023) plotting, package necessary application work.building application using golem, 3 default dependencies: golem , shiny, config.\ncall golem::use_recommended_deps() first workflow script, also shiny, DT, attempt, glue, htmltools, golem dependencies package.39\ndependencies like ggplot2? ones need added hand.process new dependency:Open dev/02_dev.R script.Call use_package() function usethis: usethis::use_package(\"pkg..want..add\").Detail import mechanism related R files.","code":""},{"path":"build-app-golem.html","id":"importing-packages-and-functions","chapter":"10 Building the App with {golem}","heading":"10.1.2 Importing packages and functions","text":"two places dependencies application need managed:40 DESCRIPTION file NAMESPACE file.DESCRIPTION file dictates packages installed application installed.\nexample, install golem machine, also need packages internally used golem.\napplication also dependencies: least shiny, golem, config.\nbuilding application, list requirements somewhere, standard way using DESCRIPTION file.41The DESCRIPTION file dictates packages installed application installed.\nexample, install golem machine, also need packages internally used golem.\napplication also dependencies: least shiny, golem, config.\nbuilding application, list requirements somewhere, standard way using DESCRIPTION file.41The NAMESPACE file describes app interacts R session run time, .e. application launched.\nNAMESPACE file, can specify subset functions import packages: example, can choose import renderDT() DTOutput() DT, instead importing functions.\nselective import mechanism allows avoid namespace conflicts: example, jsonlite::flatten() purrr::flatten().42\n, need go every script defines one several function/s, add roxygen2 (Wickham, Danenberg, et al. 2022) tag, following form : #' @importFrom jsonlite fromJSON #' @importFrom purrr flatten: way, importing fromJSON() jsonlite.NAMESPACE file describes app interacts R session run time, .e. application launched.\nNAMESPACE file, can specify subset functions import packages: example, can choose import renderDT() DTOutput() DT, instead importing functions.\nselective import mechanism allows avoid namespace conflicts: example, jsonlite::flatten() purrr::flatten().42\n, need go every script defines one several function/s, add roxygen2 (Wickham, Danenberg, et al. 2022) tag, following form : #' @importFrom jsonlite fromJSON #' @importFrom purrr flatten: way, importing fromJSON() jsonlite.Note can also use explicit namespacing, .e. pkg::function() notation inside code.\nneed little help identify dependencies, explicitly namespaced calls (pkg::function()) can scraped using attachment (Rochette Guyader 2023) package:using development package (example, one installed GitHub), can add DESCRIPTION using use_dev_package() function usethis.\nadd another field DESCRIPTION file, Remotes, location package available.can seem little bit daunting first, best:high quality namespace helps encapsulate package makes self-contained.\nensures packages won’t interfere code, code won’t interfere packages, package works regardless environment ’s run.R Packages (Wickham Bryan 2020)learn details manage dependencies, DESCRIPTION NAMESPACE files, resources:Writing R Extensions, official manual R-Core teamR Packages, especially Package metadata Namespace chapters","code":"\n# This function will read all the scripts in the R/ folder and \n# try to guess required dependencies\nattachment::att_from_rscripts()"},{"path":"build-app-golem.html","id":"submodules-and-utility-functions","chapter":"10 Building the App with {golem}","heading":"10.2 Submodules and utility functions","text":"building large application, splitting codebase smaller pieces.\nChapter 3, “Structuring Project”, utilitarian functions defined files prefixed specific term.\ngolem world, utils_* fct_* files:utils_* files contain small functions might used several times application.fct_* files contain larger functions central application.Two functions can called create files:first create R/fct_helpers.R file.second create R/utils_helpers.R file.idea, explained , soon open golem-based project, able identify files contain, without open .43For example, hexmake app two files, R/utils_ui.R R/utils_server.R, find small functions reused throughout app.fct_* files used larger functions, central application, might fit specific module.\nexample, hexmake, find R/fct_mongo.R, used handle things related connecting interacting Mongodb database.can see, difference fct_* file “topic centered”, sense gather functions relate specific feature application (, database), utils_* files used place put miscellaneous functions.Note building module golem::add_module(), can add module-specific fct_* utils_* file:create:R/mod_rendering.RR/mod_rendering_fct_connect.RR/mod_rendering_utils_wrapper.RAnd can also done way around, specifying module want link file :","code":"\n# Adding fct_ and utils_ files to the project\ngolem::add_fct( \"helpers\" ) \ngolem::add_utils( \"helpers\" )\n# Creating the fct_ and utils_ file along the module creation\ngolem::add_module(\n    name = \"rendering\", \n    fct = \"connect\", \n    utils = \"wrapper\"\n)\n# Linking the utils_wrapper file to the rendering module\ngolem::add_utils(\"wrapper\", module = \"rendering\")"},{"path":"build-app-golem.html","id":"add-tests","chapter":"10 Building the App with {golem}","heading":"10.3 Add tests","text":"piece software go production sufficiently tested.\npart building process, setting tests application building.\nget back , testing upcoming chapter, currently going 02_dev.R script, mention line allows add test skeleton app.followed every step 01_start.R file, already full testing infrastructure ready, set recommended tests inserted golem.\nhard find tests relevant applications (every application unique), add manually fill tests check app.\nright now, add new testing file, can call:testing Chapter 11.","code":"\n# Generate the testing infrastructure\nusethis::use_test(\"app\")"},{"path":"build-app-golem.html","id":"documentation-and-code-coverage","chapter":"10 Building the App with {golem}","heading":"10.4 Documentation and code coverage","text":"","code":""},{"path":"build-app-golem.html","id":"vignette","chapter":"10 Building the App with {golem}","heading":"10.4.1 Vignette","text":"Vignettes long-format documentation application: users see documentation running browseVignettes(), look documentation Help pane RStudio, browsing web page CRAN, also files used pkgdown websites built.\ngood news using “Rmd first” method, already Vignettes built: Markdown files describing back-end application works.\nDepending applied principle, Rmd files might live inside inst/ folder, already package Vignettes.\nneed add new Vignette, adding Rmd describing back-end global documentation application, can call use_vignette() function usethis., can build Vignettes :","code":"\n# Adding a new Vignette named \"shinyexample\"\nusethis::use_vignette(\"shinyexample\")\n# Compiling the Vignettes\ndevtools::build_vignettes()"},{"path":"build-app-golem.html","id":"code-coverage-and-continuous-integration","chapter":"10 Building the App with {golem}","heading":"10.4.2 Code coverage and continuous integration","text":"","code":""},{"path":"build-app-golem.html","id":"a.-code-coverage","chapter":"10 Building the App with {golem}","heading":"A. Code coverage","text":"Code coverage way detect volume code covered unit testing.\ncan locally, can use online services like Appveyor, online platform computes tracks code coverage repository.add application, call use_coverage() function usethis package:time writing lines, function supports two services: CodeCov coveralls.Note can also perform code coverage locally, using covr (Hester 2023) package, package_coverage() function.example, Figure 10.1 output running package_coverage() function golem package 2020-04-29 dev branch:\nFIGURE 10.1: {golem} code coverage results.\ncan see, reach code coverage almost 70%.\nDeciding perfect percentage coverage easy task, setting arbitrary coverage smart move either, much depends type project working .\nexample, golem, addins.R file tested (0% code coverage), good reason: addins linked RStudio meant tested/used non-interactive environment, (least time writing lines) automated way test RStudio addins.\nAnother thing keep mind computing code coverage counts number lines run tests run, means write whole function one single line, 100% code coverage.\nAnother example writing /else statement one line () else : code coverage count line covered, even test suite runs () else; words, even code coverage good , still testing algorithm extensively.Note can also identify files zero code coverage using covr::zero_coverage(covr::package_coverage()) function, , instead printing back metric coverage file, point lines covered tests inside package, shown Figure 10.2.\nFIGURE 10.2: {golem} files zero code coverage.\nsum : set arbitrary code coverage percentage goal, rather use general metric throughout project.\nCodeCov, can get timeline evolution code coverage: good tool judging need write tests.\nexample, Figure 10.3 general tendency code coverage tibble package last 6 months (November 2019 April 2020):\nFIGURE 10.3: CodeCov.io results {tibble} package.\nPerfect getting general feeling code coverage life project!Note also want add code coverage application inside Vignette, can use covrpage (Sidi 2023) package, bundles results covr coverage report interactive, human-readable Vignette can use later package documentation, article inside package website.\ncovrpage can installed GitHub remotes::install_github('yonicd/covrpage').","code":"\n# Adding the correct code coverage \n# infrastructure in your application\nusethis::use_coverage()\n# Compute the code coverage of your application\ncode_coverage <- covr::package_coverage()"},{"path":"build-app-golem.html","id":"b.-continuous-integration","chapter":"10 Building the App with {golem}","heading":"B. Continuous Integration","text":"Continuous integration, hand, ensuring software still working whenever change made one developers.\nidea add centralized version control system (example, Git)44 service like Travis CI, GitHub Action (GitHub), GitLab CI (GitLab) runs series commands whenever something integrated repository, .e. every time change codebase made.\nwords, every time new piece code sent central repository, service runs regression tests check software still valid, working state.can set various continuous integration services automatically using functions usethis package:Travis CI set usethis::use_travis().AppVeyor usethis::use_appveyor().GitLab CI use_gitlab_ci().Circle CI use_circleci().GitHub Actions use_github_actions().Jenkins use_jenkins().ever want add badges README files services, usethis also comes series functions just : use_travis_badge(), use_appveyor_badge(), use_circleci_badge() use_github_actions_badge().CI services can lot , like example, deploy application, build container send container registry, compile RMarkdown files, etc.45\npossibilities almost limitless!","code":""},{"path":"build-app-golem.html","id":"using-golem-dev-functions","chapter":"10 Building the App with {golem}","heading":"10.5 Using {golem} dev functions","text":"building application, want behave differently depending run, notably, run development production.\nseen previous chapters can use golem-config.yml file, pass arguments run_app().\nthird option use dev functions golem.series tools make app behave differently whether “dev” “prod” mode.\nNotably, app_prod() app_dev() functions look value options( \"golem.app.prod\" ), return TRUE option exist.\nwords, setting options( \"golem.app.prod\" ) TRUE, make functions depend option behave specific way.functions pre-exist golem, example need print message console dev, can cat_dev().course, chances need print things, might want use functions.\nGood news!\ncan make function “dev-dependent” make_dev() function:way, can use functions back-end development purposes, ignored production.","code":"\n# Setting the option to FALSE\noptions( \"golem.app.prod\" = FALSE)\n# Function runs as expected\ngolem::cat_dev(\"In dev\\n\")In dev\n# Switching the option to TRUE\noptions( \"golem.app.prod\" = TRUE)\n# Nothing is printing\ngolem::cat_dev(\"In dev\\n\")\n# Same mechanism as cat_dev, but with other functions \nlog_dev <- golem::make_dev(log)\noptions( \"golem.app.prod\" = FALSE)\nlog_dev(10)[1] 2.303\noptions( \"golem.app.prod\" = TRUE)\nlog_dev(10)"},{"path":"build-yourself-safety-net.html","id":"build-yourself-safety-net","chapter":"11 Build Yourself a Safety Net","heading":"11 Build Yourself a Safety Net","text":"Don’t fuck Future YouJD (https://twitter.com/CMastication)Strengthening app means two things: testing locking application environment.","code":""},{"path":"build-yourself-safety-net.html","id":"testing-your-app","chapter":"11 Build Yourself a Safety Net","heading":"11.1 Testing your app","text":"process getting application production-ready implies application tested.\nrobust testing suite, develop, maintain, improve safe environment ensure project sustainability.\ntesting?\nsides application: business logic user interface.\nalso, application load, .e. much time memory required application starts used significant number users, user perspective (long take complete full scenario) server perspective (much memory needed app run).","code":""},{"path":"build-yourself-safety-net.html","id":"testing-the-business-logic","chapter":"11 Build Yourself a Safety Net","heading":"11.1.1 Testing the business logic","text":"following good practices listed previous chapters, current application least two properties:business-logic functions separated interactive-logic functions.application inside package.top sane organization approach, using separation inside package structure allows leverage tooling built testing “standard” packages.R developers developing packages long time, time writing lines (April 2020), 15,000 packages available CRAN.\nsustain developments, lot tools created secure development process, especially tools creating unit tests package.Unit tests general concept software engineering describes process writing form assessment check validity code.\nsimplified explanation write function called meaning_of_life returns 42, expect function always return 42, alerted ever value changes.\nUsing unit tests way secure work future, future , collaborator, anybody wanting collaborate project: anyone comes change code behind meaning_of_life() function, result longer 42, developer working piece code able catch .\ngeneral idea detect bugs breaking changes moment happening, late.several packages R can used implement unit testing, can even implement tests.\nOne popular right now 46 testthat (Wickham 2023a).\ntesting framework lets write series tests expectations, launched calling test() devtools (Wickham, Hester, et al. 2022), either locally CI system.example testing meaning_of_life always 42.test skeleton set, able detect change function.want learn use testthat, can refer following resources:{testthat} online documentation{testthat} online documentationR Packages - Chapter 10 TestingR Packages - Chapter 10 TestingBuilding package lasts, eRum 2018 workshop - Part 5: Test Code CoverageBuilding package lasts, eRum 2018 workshop - Part 5: Test Code Coverage","code":"\n# Creating a testing context, with one expectation\ntest_that(\"The meaning of life is 42\", {\n  expect_equal(\n    meaning_of_life(), \n    42\n  )\n})"},{"path":"build-yourself-safety-net.html","id":"shinytestserver","chapter":"11 Build Yourself a Safety Net","heading":"11.1.2 shiny::testServer()","text":"time writing lines, shiny team actively working new way test shiny server functions.\nfeatures still work progress, available stable version shiny used book (1.7.4).\nGiven features still subject change, go detail new features, preview look like:methodology still development, won’t go deeper subject, want follow update topic, please refer Server function testing Shiny article shiny website.","code":"\n# Given the following module\ncomputation_module_server <- function(input, output, session){\n  ns <- session$ns\n  r <- reactiveValues(\n    value = NULL\n  )\n  observeEvent( input$selector , {\n    r$value <- input$selector * 10\n  })\n  \n}\n\n# We can test it that way\nlibrary(shiny)\nlibrary(testthat)\ntestServer(computation_module_server, {\n\n  # Give input$selector a value\n  session$setInputs(selector = 1)\n  # Call {testthat} functions\n  expect_equal(r$value, 10)\n\n  # Give input$selector a value\n  session$setInputs(selector = 2)\n  # Call {testthat} functions\n  expect_equal(r$value, 20)\n\n\n})"},{"path":"build-yourself-safety-net.html","id":"testing-the-interactive-logic","chapter":"11 Build Yourself a Safety Net","heading":"11.1.3 Testing the interactive logic","text":"built solid test suite business logic, another side app might want check interactive logic, .e. user interface.several tools web development world can used exactly : mimicking interactive session instead deliberately clicking application interface, let program .","code":""},{"path":"build-yourself-safety-net.html","id":"a.-puppeteer","chapter":"11 Build Yourself a Safety Net","heading":"A. puppeteer","text":"puppeteer NodeJS module drives Google Chrome headless session mimics session app.good news, Google Chrome extension, called Puppeteer Recorder, allows create, visiting web page, pupepeteer script reproduce visit.\n, example, small JavaScript script testing hexmake (Fay 2023g), generated extension.aware, though, extension record everything, least version used writing book (0.7.1).\nexample, typing inside text input recorded: completely doable inside puppeteer, yet recorded extension.47Once piece code, put NodeJS script, replay session many time need.\never one steps replayed recorded, script fail, notifying regression.Several packages R mimic puppeteer (Google Chrome headless orchestration), notably crrri (Lesur Dervieux 2023) chromote (Chang Schloerke 2023).\npackages can used launch manipulate Google Chrome headless session, meaning can programmatically navigate interact web page R.\ntests puppeteer spirit, can refer crrry package (Fay 2023c), contains series wrapper functions around crrri, specifically designed shiny.example:can call one test object methods:call_js(), allows run JavaScript codeshiny_set_input() changes value shiny Inputwait_for() waits JavaScript condition TRUEclick_on_id clicks given idOf course, interesting part “bulk testing” application, example, setting series values input:test done, forget close connection!","code":"// Require the node module\nconst puppeteer = require('puppeteer');\n(async () => {\n// launch puppeteer and connect to the page\nconst browser = await puppeteer.launch()\nconst page = await browser.newPage()\nawait page.goto('http://localhost:2811/')\n\n// We're waiting for a DOM element to be ready\nawait page.waitForSelector('.row > .col > \\\n    .rounded > details:nth-child(3) > summary')\n    // Now it's ready, we can click on it\n    await page.click('.row > .col > .rounded > \\\n    details:nth-child(3) > summary')\n    \n    // Now our test is over, we can close the connection\n    await browser.close()\n})()\n# Creating a new test instance\ntest <- crrry::CrrryOnPage$new(\n  # Using the `find_chrome()` function to guess where the \n  # Chrome bin is on our machine\n  chrome_bin = pagedown::find_chrome(),\n  # Launching Chrome on a random available port on our machine\n  # Note that you will need httpuv >= 1.5.2 if you want to use \n  # this function\n  chrome_port = httpuv::randomPort(), \n  # Specifying the page we want to connect to\n  url = \"https://connect.thinkr.fr/hexmake/\",\n  # Do everything on the terminal, with no window open\n  headless = TRUE\n)Running \\\n  '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'\n  --no-first-run --headless \n  '--user-data-dir=/Users/colin/Library/Application Support/\n    r-crrri/chrome-data-dir-dhutmfux' \n  '--remote-debugging-port=40698'\n# We'll wait for the application to be ready to accept inputs\ntest$wait_for_shiny_ready()Shiny is computing\n✓ Shiny is still running\nfor (i in letters[1:5]){\n  # We'll be setting a series of letters, one by one\n  # for the package name input\n  test$shiny_set_input(\n    \"main_ui_1-left_ui_1-pkg_name_ui_1-package\", \n    i\n  )\n}-- Setting id main_ui_1-left_ui_1-pkg_name_ui_1-package--\nShiny is computing\n✓ Shiny is still running\n-- Setting id main_ui_1-left_ui_1-pkg_name_ui_1-package --\nShiny is computing\n✓ Shiny is still running\n-- Setting id main_ui_1-left_ui_1-pkg_name_ui_1-package --\nShiny is computing\n✓ Shiny is still running\n-- Setting id main_ui_1-left_ui_1-pkg_name_ui_1-package --\nShiny is computing\n✓ Shiny is still running\n-- Setting id main_ui_1-left_ui_1-pkg_name_ui_1-package --\nShiny is computing\n✓ Shiny is still running\n# Closing the connection\ntest$stop()"},{"path":"build-yourself-safety-net.html","id":"b.-monkey-test","chapter":"11 Build Yourself a Safety Net","heading":"B. Monkey test","text":"working user-facing software (.e. software used external users), one rule live : every unexpected behavior can happen, happen.\nwords, develop think “user never ”, just expect user eventually “”.can get prepared unexpected?\ncan test “crazy behavior” user adopt?\nweb development, exists methodology called “Monkey testing”, consists launching series random event web page: random text input, scrolling, clicking, zooming… see application crashes .\nsoftware testing method allows test robustness application, seeing well can handle unexpected behaviors.Several JavaScript libraries exist comes monkey testing, one popular (easy use) libraries called gremlin.js.\nlibrary particularly interesting comes shiny need external installation: can add library bookmark browser, navigate application, launch testing (click “Generate Bookmarklet” link top README).\nFigure 11.1 show example running gremlins prenoms application.\nFIGURE 11.1: Example using gremlins.js “prenoms” shiny application.\nwant scale , can also combine shinyloadtest (Schloerke, Dipert, Borges 2021): launch session recording, run gremlins one several time inside recording, replay multiple sessions.crrry, gremlins test comes free:","code":"\n# Creating a new test instance\ntest <- crrry::CrrryOnPage$new(\n  # Using the `find_chrome()` function to guess where the \n  # Chrome bin is on our machine\n  chrome_bin = pagedown::find_chrome(),\n  # Launching Chrome on a random available port on our machine\n  # Note that you will need httpuv >= 1.5.2 if you want to use \n  # this function\n  chrome_port = httpuv::randomPort(), \n  # Specifying the page we want to connect to\n  url = \"https://connect.thinkr.fr/hexmake/\",\n  # Do everything on the terminal, with no window open\n  headless = TRUE\n)\n# We'll wait for the application to be ready to accept inputs\ntest$wait_for_shiny_ready()\n# We launch the horde of gremlins\ntest$gremlins_horde()\n# Sleep, let the gremlins do their job\nSys.sleep(10)\n# Check that the app is still working\ntest$wait_for_shiny_ready()\n# Stop the connection\ntest$stop()"},{"path":"build-yourself-safety-net.html","id":"c.-shinytest","chapter":"11 Build Yourself a Safety Net","heading":"C. {shinytest}","text":"Finally, prefer shiny specific package, can go shinytest (R-shinytest?).\npackage, created maintained RStudio, allows series screenshots application, replays app compares previously taken screenshots current state application, allowing detect changes interface.building application golem (Fay, Guyader, Rochette, et al. 2023), need add app.R file root package, run shinytest::recordTest():function run, new window opens: contains app, “Screenshot” button right.\nUsing button, can take various recordings shiny application different states, shown Figure 11.2.\nFIGURE 11.2: General view shinytest window.\n, can changes app, run:shinytest package detects visual change application, immediately alerted, report difference snapshots took current state application.","code":"\n# Create an app.R file at the root of the package\ngolem::add_rstudioconnect_file()\n# Launch a test, and record a series of \n# snapshots of your application\nshinytest::recordTest()\nshinytest::testApp()"},{"path":"build-yourself-safety-net.html","id":"testing-the-app-load","chapter":"11 Build Yourself a Safety Net","heading":"11.1.4 Testing the app load","text":"","code":""},{"path":"build-yourself-safety-net.html","id":"a.-shinyloadtest","chapter":"11 Build Yourself a Safety Net","heading":"A. {shinyloadtest}","text":"shinyloadtest (Schloerke, Dipert, Borges 2021) tests application behaves one, two, three, twenty, one hundred users connect app use , gives visual report connection response time session.\nidea shinyloadtest first record session mimic user behavior, shinycannon, command line tool comes shinyloadtest, replays recording several times.\nsession replayed several times mimicking session recorded, access report behavior app.Record tests, potentially new dir:now series one recording/s inside shinylogs/ folder:, let’s switch command line, rerun session shinycannon.\nshinycannon command line tools take several arguments: path .log file, URL app, --workers specify number concurrent connections run, --output-dir argument specifies report written., go terminal run:now, new files inside folder, corresponding session recordings.Good news: manually analyze files—shinyloadtest offers series wrapper functions .now data.frame looks like :, shinyloadtest comes series plotting functions can used analyze recording.\nexample:slt_session_duration() plots session duration, various types events take computation time: JS CSS load, R computation, etc.\noutput available Figure 11.3.\nFIGURE 11.3: Session duration.\nneed bundle everything HTML reports, shinyloadtest_report() looking .function generate HTML report things computed shinyloadtest, shown Figure 11.4.\nFIGURE 11.4: Webpage generated shinyloadtest_report().\nsum step--step guide:shiny app available locally, machine, launch process processx (Csárdi Chang 2022), another R session, launches application.\ncan either set port options('shiny.port'= 2811), let shiny decide .\nsure process running.\napp online, use online URL (make sure access app).shiny app available locally, machine, launch process processx (Csárdi Chang 2022), another R session, launches application.\ncan either set port options('shiny.port'= 2811), let shiny decide .\nsure process running.\napp online, use online URL (make sure access app).Run shinyloadtest::record_session(url).\nprobably set different port shinyloadtest, try connect port 80.Run shinyloadtest::record_session(url).\nprobably set different port shinyloadtest, try connect port 80.Play around app; record scenario usage.Play around app; record scenario usage.Close tab app running.Close tab app running.Return terminal, run shinycannon command line tool.Return terminal, run shinycannon command line tool.Wait process finished.Wait process finished.Go back R, can analyze data recordings, either manually generating HTML report.Go back R, can analyze data recordings, either manually generating HTML report.","code":"\nlibrary(shinyloadtest)\n# Starting your app in another process\np <- processx::process$new(\n  \"Rscript\", \n  c( \"-e\",  \"options('shiny.port'= 2811);hexmake::run_app()\" )\n)\n# We wait for the app to be ready\nSys.sleep(5) \n# Check that the process is alive\np$is_alive()\n# Open the app in our browser just to be sure\nbrowseURL(\"http:://localhost:2811\")\n# Creating a directory to receive the logs\nfs::dir_create(\"shinylogs\")\n# Performing the session recording inside this new folder\nwithr::with_dir(\n  \"shinylogs\", {\n    # Launch the recording of an app session, using port 1234\n    shinyloadtest::record_session(\n      \"http://localhost:2811\", \n      port = 1234\n    ) \n  }\n)shinycannon shinylogs/recording.log \\\n  http://localhost:2811 --workers 10 \\\n  --output-dir shinylogs/run1\n# printing the structure of shinylogs\nfs::dir_tree(\"shinylogs\", recurse = FALSE)shinylogs\n├── recording.log\n├── run1\n├── run2\n└── run3\n# Bringing the runs in the R session\nshinyload_runs <- shinyloadtest::load_runs(\n  \"5 workers\" = \"shinylogs/run1\"\n)\ndplyr::glimpse(head(shinyload_runs))Rows: 6\nColumns: 13\n$ run               <ord> 5 workers, 5 workers, 5 wor…\n$ user_id           <int> 0, 0, 0, 0, 0, 0\n$ session_id        <int> 0, 0, 0, 0, 0, 0\n$ iteration         <int> 0, 0, 0, 0, 0, 0\n$ input_line_number <int> 4, 5, 6, 7, 8, 9\n$ event             <chr> \"REQ_HOME\", \"WS_OPEN\", \"WS_…\n$ start             <dbl> 0.000, 0.462, 0.539, 1.024,…\n$ end               <dbl> 0.461, 0.539, 0.542, 1.024,…\n$ time              <dbl> 0.461, 0.077, 0.003, 0.000,…\n$ concurrency       <dbl> 0, 1, 1, 1, 1, 1\n$ maintenance       <lgl> TRUE, TRUE, TRUE, TRUE, TRU…\n$ label             <ord> \"Event 1) Get: Homepage\", \"…\n$ json              <list> [\"REQ_HOME\", 2020-04-10 12:…\nslt_session_duration(shinyload_runs)\n# Generating the report\nshinyloadtest_report(shinyload_runs)"},{"path":"build-yourself-safety-net.html","id":"b.-shinyloadtest-crrry-and-dockerstats","chapter":"11 Build Yourself a Safety Net","heading":"B. {shinyloadtest}, {crrry}, and {dockerstats}","text":"Another thing might want monitor memory/CPU usage application, shinyloadtest natively provide: package records load browser point view, server one.\n’s dockerstats (Fay 2023d) can come play: package wrapper around command line docker stats, returns R data.frame stats.can get dockerstats package GitHub :NPM via:stats, can monitor load app run Docker container.start launching container using system() call: , running hexmake application, bundled colinfay/hexmake Docker image, port 2811.\nalso make sure give name --name, can call dockerstats() call later .Let’s say now want stats hexmake container:course, right now nobody using app, usage can pretty small.\nlet’s push little bit mimicking lot connections., can replay shinycannon call, time use dockerstats_recurse() function, recursively call dockerstats() regular interval.Let’s launch time dockerstats_recurse().\nexample, , print, loop, MemUsage container, save data inside dockerstats.csv file.Figure 11.5 shows processes side side.\nFIGURE 11.5: dockerstats shinycannon running side--side time.\ncan see, number connections grow, memory usage grows.\nnow csv evolution docker stats records time!need deeper look connection application actions Docker stats, can also combine dockerstats crrry, idea can record CPU usage exact moment application performs specific computation.Let’s record computation hexmake container containing app .First, launch container:, crrry job:draw small graph evolution, shown Figure 11.6:\nFIGURE 11.6: Plot dockerstats evolution.\n","code":"\nremotes::install_github(\"ColinFay/dockerstats\")npm install -g r-dockerstats\nlibrary(dockerstats)\n# We are launching the docker container \n# using R system() command. Here, we are \n# running the container image called \n# colinfay/hexmake. We are naming the \n# container hexmake using the --name flag, \n# --rm means the container will be removed \n# when stopped, and finally the -p flag defines \n# how to bind the ports of the container\n# with the ports of the host (left is the host,\n#  right is the container): in other word, here, \n#  we bind port 80 of our container to the port 2811\n# of our machine.\nsystem(\n  \"docker run --name hexmake --rm -p 2811:80 colinfay/hexmake\", \n  wait = FALSE\n)\n# Waiting for the container to be ready \nSys.sleep(30)\n# Showing the docker stats for hexmake\ntibble::as_tibble(\n  dockerstats(\"hexmake\")\n)# A tibble: 1 × 14\n  Container Name    ID        CPUPerc MemUsage MemLimit\n  <chr>     <chr>   <chr>       <dbl> <chr>    <chr>   \n1 hexmake   hexmake 34cc1544…    0.37 108.5MiB 5.807GiB\n# ℹ 8 more variables: MemPerc <dbl>, NetI <chr>,\n#   NetO <chr>, BlockI <chr>, BlockO <chr>,\n#   PIDs <int>, record_time <chr>, extra <chr># Replaying the recording\nshinycannon shinylogs/recording.log \\ \n# Specificying the host url and the number of \"visitors\"\n  http://localhost:2811 --workers 10 \\\n# Define where the recording will be outputed\n  --output-dir shinylogs/run3\n# Calling recursive the dockerstats function. \n# The callback function takes a function, and define\n# what to do with the data.frame each time the \n# dockerstats results are computed.\ndockerstats_recurse(\n  \"hexmake\",\n  # append_csv is a {dockerstats} function that will \n  # apped the output to a given csv\n  callback = append_csv(\n    file = \"shinylogs/dockerstats.csv\", \n    print = TRUE\n  )\n)\n# read_appended_csv() allows to read a csv that has been \n# constructed with the append_csv() function\ndocker_stats <- read_appended_csv(\n  \"shinylogs/dockerstats.csv\"\n)\ndplyr::glimpse(head(docker_stats))Rows: 6\nColumns: 14\n$ Container   <chr> \"hexmake\", \"hexmake\", \"hexmake\", …\n$ Name        <chr> \"hexmake\", \"hexmake\", \"hexmake\", …\n$ ID          <chr> \"b5d337941e310cbf4708b95a9cc75560…\n$ CPUPerc     <dbl> 0.09, 15.07, 38.58, 54.94, 20.28,…\n$ MemUsage    <chr> \"110.9MiB\", \"117.2MiB\", \"168.3MiB…\n$ MemLimit    <chr> \"1.943GiB\", \"1.943GiB\", \"1.943GiB…\n$ MemPerc     <dbl> 5.57, 5.89, 8.46, 8.73, 8.74, 8.89\n$ NetI        <chr> \"586B\", \"8.37kB\", \"31.6kB\", \"62.1…\n$ NetO        <chr> \"0B\", \"433kB\", \"1.18MB\", \"2.48MB\"…\n$ BlockI      <chr> \"0B\", \"0B\", \"0B\", \"0B\", \"0B\", \"0B\"\n$ BlockO      <chr> \"0B\", \"0B\", \"0B\", \"0B\", \"0B\", \"0B\"\n$ PIDs        <int> 3, 4, 4, 4, 4, 4\n$ record_time <dttm> 2020-04-10 10:39:20, 2020-04-10 1…\n$ extra       <lgl> NA, NA, NA, NA, NA, NA\n# Launching the container a second time, \n# but name it xmk2 and serve it on port 2708\nsystem(\n  \"docker run -p 2708:80 --rm --name xmk2 -d colinfay/hexmake\", \n  wait = FALSE\n)\nSys.sleep(60) # Let the container launch\n# See previous version of this code for a commented explanation \ntest <- crrry::CrrryOnPage$new(\n  chrome_bin = pagedown::find_chrome(),\n  chrome_port = httpuv::randomPort(),\n  url =\"http://localhost:2708\",\n  headless = TRUE\n)Running '/Applications/Google \n  Chrome.app/Contents/MacOS/Google Chrome' \n  --no-first-run --headless \\\n  '--user-data-dir=/Users/colin/Library/Application     \n  Support/r-crrri/chrome-data-dir-thyhpptv' \\\n  '--remote-debugging-port=48938'\ntest$wait_for_shiny_ready()Shiny is computing\n✓ Shiny is still running\n# We are creating a first data.frame that records the launch \n# of the container.\nresults <- dockerstats::dockerstats(\"xmk2\", extra = \"launch\")\n\nfor (i in letters[1:10]){\n  # We will be setting a letter for the package name input\n  test$shiny_set_input(\n    \"main_ui_1-left_ui_1-pkg_name_ui_1-package\", \n    i\n  )\n  # Once the input is set, we call dockerstats() \n  # for this container and bind the results to \n  # the previously created data.frame\n  results <- rbind(\n    results, \n    dockerstats::dockerstats(\"xmk2\", extra = i)\n  )\n}-- Setting id main_ui_1-left_ui_1-pkg_name_ui_1-package --\nShiny is computing\n✓ Shiny is still running\n-- Setting id main_ui_1-left_ui_1-pkg_name_ui_1-package --\nShiny is computing\n✓ Shiny is still running\n-- Setting id main_ui_1-left_ui_1-pkg_name_ui_1-package --\nShiny is computing\n✓ Shiny is still running\n-- Setting id main_ui_1-left_ui_1-pkg_name_ui_1-package --\nShiny is computing\n✓ Shiny is still running\n-- Setting id main_ui_1-left_ui_1-pkg_name_ui_1-package --\nShiny is computing\n✓ Shiny is still running\n-- Setting id main_ui_1-left_ui_1-pkg_name_ui_1-package --\nShiny is computing\n✓ Shiny is still running\n-- Setting id main_ui_1-left_ui_1-pkg_name_ui_1-package --\nShiny is computing\n✓ Shiny is still running\n-- Setting id main_ui_1-left_ui_1-pkg_name_ui_1-package --\nShiny is computing\n✓ Shiny is still running\n-- Setting id main_ui_1-left_ui_1-pkg_name_ui_1-package --\nShiny is computing\n✓ Shiny is still running\n-- Setting id main_ui_1-left_ui_1-pkg_name_ui_1-package --\nShiny is computing\n✓ Shiny is still running\nlibrary(dplyr, warn.conflicts = FALSE)\n# We are converting the MemUsage and record_time columns \n# to a format that can be used in {ggplot2}\nresults <- results %>% \n  mutate(\n    MemUsage = to_mib(MemUsage), \n    record_time = as.POSIXct(record_time)\n  )\nlibrary(ggplot2)\n# Using the record time as an x axis, \n# then adding the MemUsage as a line (to watch the \n# evolution over time), then we add the 'extra' column, \n# that contains the letters, as vertical lines + as \n# label\nggplot(\n  data = results, \n  aes(x = record_time)\n) + \n  geom_line(\n    aes(y = MemUsage)\n  ) + \n  geom_vline(\n    aes(xintercept = record_time)\n  ) + \n  geom_label(\n    aes(\n      y = max(MemUsage), \n      label = extra\n    )\n  ) + \n  labs(\n    title = \"MemUsage of 10 inputs for package name\"\n  )"},{"path":"build-yourself-safety-net.html","id":"a-reproducible-environment","chapter":"11 Build Yourself a Safety Net","heading":"11.2 A reproducible environment","text":"One challenges building app needs sent production need work reproducible environment.\nmean?\nbuilding production application, building piece software launched another computer, server cloud someone else’s computer.\napp built, chances launch computer external users connect computer.\neither give users package (simplest way share : bundle packaged app tar.gz, let people install either manually package repository), URL can connect use app.follow golem workflow good practices solid package, application built deployable another computer R.\nsecond case, think can create app reproducible environment: words, sure app deployed configuration local application—R version, package versions, system requirements, environment variables, etc.help achieve , introduce two tools next section: renv (Ushey 2020) Docker.","code":""},{"path":"build-yourself-safety-net.html","id":"renv","chapter":"11 Build Yourself a Safety Net","heading":"11.2.1 {renv}","text":"","code":""},{"path":"build-yourself-safety-net.html","id":"a.-about-renv","chapter":"11 Build Yourself a Safety Net","heading":"A. About {renv}","text":"make sure package versions installed machine stay production environment?\nalso, can sure , working team, able work together using package versions?one package version another, functions behaviors change.\ntime, new version means new functions new features.\ntime time, new version means breaking changes. Monitoring changes potentially break code hard task: checking versions packages various machines can take time, debugging bugs application logs straightforward.\ncourse, moment discover error might perfect time us, might enough free time calendar debug application stopped running.Let’s take, example, traceback logs application sent one day Shiny Server:Pretty hard debug, isn’t ?\nactually happened?\nspecific case, turned package version geojsonsf (Cooley 2022) 1.2.1 development machine, one shiny server updated 1.3.0, breaking change package, shown Figure 11.7.\nbug hard detect geojsonsf direct dependency app, dependency one dependencies, making slightly complex identify.\nFIGURE 11.7: Breaking changes geojsonsf, dependency dependency shiny application.\nthing happened working team: one computers old version, another one updated recent one.\nprevent ?\nrenv package comes play: package allows project-based library, instead global one.\nwords, instead library global machine, renv allows specify packages fixed versions project.\nmeans can geojsonsf version 1.2.1 one projects, version 1.3.0 another, two conflicting .","code":"root@westeros-vm:/var/log/shiny-server# cat thewall(...).log\n*** caught segfault ***\n[...]\naddress 0x5100004d, cause 'memory not mapped'\n\nTraceback:\n1: rcpp_sf_to_geojson(sf, digits, factors_as_string)\n2: sf_geojson.sf(data)\n3: geojsonsf::sf_geojson(data)\n4: addGlifyPolygons(., data = pol_V1, color = les_couleurs, \npopup = \"val\", opacity = 1)\n5: function_list[[i]](value)\n6: freduce(value, `_function_list`)\n7: `_fseq`(`_lhs`)\n8: eval(quote(`_fseq`(`_lhs`)), env, env)\n[...]\n105: captureStackTraces({\nwhile (!.globals$stopped) {\n..stacktracefloor..(serviceApp())\nSys.sleep(0.001)    }})\n106: ..stacktraceoff..(captureStackTraces({\nwhile (!.globals$stopped) {                \n..stacktracefloor..(serviceApp())\nSys.sleep(0.001)    }}))\n107: runApp(Sys.getenv(\"SHINY_APP\"), \nport = port, \nlaunch.browser = FALSE)\nAn irrecoverable exception occurred. R is aborting now ..."},{"path":"build-yourself-safety-net.html","id":"b.-using-renv","chapter":"11 Build Yourself a Safety Net","heading":"B. Using {renv}","text":"Underlying philosophy renv existing workflows just work .Introduction renv (https://rstudio.github.io/renv/articles/renv.html)first thing renv initiate init() function.function several things:Create/modify .Rprofile file root project. example file may look like inside empty project:example, just one call script, one located renv/activate.R.creates renv.lock file, list package dependenciesAs initiated empty project, dependencies .\nrun command project already scripts dependencies, renv try locate , add file.\nNote packages may come CRAN, Bioconductor, GitHub, GitLab, Bitbucket, even local repositories.renv/ folder contains series files store settings necessary packages, using structure mimics local repository.go details folder, rather complex structure chances never update hand.renv, can choose link “local repository” local cache, .e. folder common projects stores packages different versions already installed (default behavior) store complete packages inside project, making portable.need new package, install local library.\nfastest way install new packages renv-powered project using install.packages function, shimmed renv.\nshim search local cache see package already cached, , install link .Now, need install new package, example attempt (Fay 2020):now add little call library:want update renv Lockfile, call snapshot().Note building application package, use renv::snapshot(type = \"explicit\") (need version > 0.9.3-99): capture dependencies listed DESCRIPTION file.\ndon’t specify type = \"explicit\", renv go look packages can find file, notably .Rhistory, meaning one day used function dplyr current package doesn’t use anymore, renv include .now reproducible renv library, next?\ncourse, either working team deploying server, restore state project, now living somewhere else, inside current project/deployment.\n, function call renv::restore(), update local project dependencies listed inside Lockfile.sum , steps follow:Initiate project renv::init().Install/remove packages.Take snapshot() state project.renv::restore() state project using renv.lock.Share .Rprofile, renv.lock, renv/activate.R renv/settings.dcf files reproducibility.course, renv::restore() comes another superpower: time traveling!\ndecide update package project, realize package makes application crash (e.g., update geojsonsf), can go back time previous version library calling restore() function.things can renv.\nwant know , invite refer official documentation.","code":"\n# Loading and initiating {renv}\nlibrary(renv)\ninit()source(\"renv/activate.R\")\n# Displaying the structure of the folder\nfs::dir_tree(\"data-raw/renvinit/\", recurse = 5)data-raw/renvinit/\n├── renv\n│   ├── activate.R\n│   └── settings.dcf\n├── renv.lock\n└── renvinit.Rproj\n# Installing attempt\ninstall.packages(\"attempt\")\n# Create a fake script that launches {attempt}\nwrite(\"library(attempt)\", \"script.R\")\n# Snapshoting the current status of the environment\nrenv::snapshot(confirm = FALSE){\n  \"R\": {\n    \"Version\": \"3.6.1\",\n    \"Repositories\": [\n      {\n        \"Name\": \"CRAN\",\n        \"URL\": \"https://cran.rstudio.com\"\n      }\n    ]\n  },\n  \"Packages\": {\n    \"attempt\": {\n      \"Package\": \"attempt\",\n      \"Version\": \"0.3.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Hash\": \"9aaae25e273927dba4e279caac478baa\"\n    },\n    \"renv\": {\n      \"Package\": \"renv\",\n      \"Version\": \"0.9.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Hash\": \"c1a367437d8a8a44bec4b9d4974cb20c\"\n    },\n    \"rlang\": {\n      \"Package\": \"rlang\",\n      \"Version\": \"0.4.5\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Hash\": \"1cc1b38e4db40ea6eb19ab8080bbed3b\"\n    }\n  }\n}"},{"path":"build-yourself-safety-net.html","id":"docker","chapter":"11 Build Yourself a Safety Net","heading":"11.2.2 Docker","text":"","code":""},{"path":"build-yourself-safety-net.html","id":"a.-r-docker-shiny","chapter":"11 Build Yourself a Safety Net","heading":"A. R, Docker, {shiny}","text":"Docker program allows download, install, create, launch stop multiple operating systems, called containers, machine, called host.\nhost can local computer, server deploy application/s.Docker designed enclosing software environments inside image can later launched.\ngeneral idea Docker, defining Dockerfile “rules” used create given environment, can use file (linked files, example R package containing app) deploy application given server can run Docker.\nway, Dockerfile can compile machine can run , work everywhere (course, little bit complex , get idea).Docker context shiny apps?\nDocker allows abstract away complexity managing multiple versions R multiple versions package, even different versions system requirement.\nexample, let’s take example breaking change geojsonsf used previous section.\nDocker, can safely specify 1.2.1 version image, changing versions server broken code.using Docker deployment, can build deploy application version packages R one computer.\ncourse, can change without breaking rest machine: everything happens container stays container.\nway, building application older version shiny, sure sending production break everything: version inside Docker image one machine.\nlater, update shiny start new project, can deploy app another version package.\ngoes version R.","code":""},{"path":"build-yourself-safety-net.html","id":"b.-building-a-dockerfile-for-your-app","chapter":"11 Build Yourself a Safety Net","heading":"B. Building a Dockerfile for your app","text":"Good news!\nbuilding app golem, creation Dockerfile just one function away!\nlook 03_deploy.R file dev folder, find series functions can create Dockerfile project: either generic Docker image, shinyProxy Heroku.example, create Dockerfile golem project, can run following, root package:Let’s take time understand file, detail building scratch.FROMThis line defines version R use deploying application.\nline one sets image start : rarely (ever) build Docker image nothing, instead use existing image top build image.\n, choose one r-ver Docker images, based output :RUNThe RUN call file refers bash calls used build image.\nexample, second line Dockerfile installs system requirements needed application.subsequent RUN calls, golem chooses call remotes::install_version() sure install version package matches one computer.can see, matches local version:ADDThis Docker entry takes folder file, copies inside image.\ngolem, adding current project, containing app, folder called /build_zone.EXPOSEThis command defines port container available outside container.CMDThis final command one launched run container.\nshiny app, command one launches application.","code":"\ngolem::add_dockerfile()FROM rocker/r-ver:4.1.0\nR.Version()$version.string[1] \"R version 4.1.0 (2021-05-18)\"RUN apt-get update && \\\n  apt-get install -y  git-core \\\n  libcurl4-openssl-dev libssh2-1-dev \\\n  libssl-dev libxml2-dev make \\\n  zlib1g-dev && rm -rf /var/lib/apt/lists/*RUN Rscript -e \\\n'remotes::install_version(\"xfun\",upgrade=\"never\",version=\"0.19\")'\npackageVersion(\"xfun\")[1] ‘0.19’ADD . /build_zoneEXPOSE 80CMD R -e \\\n \"options('shiny.port'=80,shiny.host='0.0.0.0');golex::run_app()\""},{"path":"build-yourself-safety-net.html","id":"c.-dockerfiler","chapter":"11 Build Yourself a Safety Net","heading":"C. {dockerfiler}","text":"want everything R command line, dockerfiler (Fay, Guyader, Parry, et al. 2023) package !\npackage allows generate Dockerfile straight R:","code":"\nlibrary(dockerfiler)\nAttaching package: 'dockerfiler'The following object is masked from 'package:golem':\n\n    get_sysreqs\n# Creating a new Dockerfile object\nmy_dock <- Dockerfile$new()\n# Adding RUN, ADD, WORKDIR and EXPOSE commands\nmy_dock$RUN(\"apt-get update && apt-get install -y git-core\")\nmy_dock$ADD(\".\", \"/\")\nmy_dock$RUN(\"mkdir /build_zone\")\nmy_dock$ADD(\".\", \"/build_zone\")\nmy_dock$WORKDIR(\"/build_zone\")\nmy_dock$RUN(r(remotes::install_local(upgrade=\"never\")))\nmy_dock$EXPOSE(80)\n# Viewing the Dockerfile\nmy_dockFROM rocker/r-base\nRUN apt-get update && apt-get install -y git-core\nADD . /\nRUN mkdir /build_zone\nADD . /build_zone\nWORKDIR /build_zone\nRUN R -e 'remotes::install_local(upgrade = \"never\")'\nEXPOSE 80"},{"path":"build-yourself-safety-net.html","id":"d.-docker-and-renv","chapter":"11 Build Yourself a Safety Net","heading":"D. Docker and {renv}","text":"use renv build shiny application, can also used inside Docker container.\nmake two tools work together, copy files produced renv inside container: .Rprofile, renv.lock, renv/activate.R renv/settings.dcf files.run renv::restore() inside application, instead using calls remotes::install_version() currently implemented golem.time writing lines, native support renv (without Docker) golem, something can expect happen future versions golem.","code":""},{"path":"build-yourself-safety-net.html","id":"e.-develop-inside-a-docker-container","chapter":"11 Build Yourself a Safety Net","heading":"E. Develop inside a Docker container","text":"Developers R versions operating systems, generally differ one used production server, leading issues comes deploying application.plan using Docker deployment mechanism, can also use Docker local developer environment.\nThanks containers maintained Rocker Project, ’s possible local environment comes close find production server.\n’s even interesting project offers images can contain RStudio server: means application deploy production can configuration one developers using local machine: thanks containers, developers can work version R matches one production server, using packages exactly match one used production.Even interesting using RStudio inside Docker combination renv: developers work machines, inside IDE know, system requirements (R versions, packages, etc.) can reproduced production server!","code":""},{"path":"build-yourself-safety-net.html","id":"f.-read-more-about-docker","chapter":"11 Build Yourself a Safety Net","heading":"F. Read more about Docker","text":"Introduction Docker R UsersAn Introduction Docker R UsersAn Introduction Rocker: Docker Containers R (Boettiger Eddelbuettel 2017)Introduction Rocker: Docker Containers R (Boettiger Eddelbuettel 2017)Rockerverse: Packages Applications Containerization R (Nüst et al. 2020)Rockerverse: Packages Applications Containerization R (Nüst et al. 2020)","code":""},{"path":"version-control.html","id":"version-control","chapter":"12 Version Control","heading":"12 Version Control","text":"","code":""},{"path":"version-control.html","id":"version-control-git","chapter":"12 Version Control","heading":"12.1 Using version control with Git","text":"“Friends let friends work coding project without version control.” might heard , without really considering means.\nmaybe convinced saying, opportunity use Git, GitHub GitLab versioning applications.\n, now time update workflow!","code":""},{"path":"version-control.html","id":"why-version-control","chapter":"12 Version Control","heading":"12.1.1 Why version control?","text":"ever experienced piece code disappearing?\nunsolvable problem integrating changes several people working piece code?\ninability find something written back?, might missing version control (also shortened VC).\nchapter, ’ll focusing Git, aware VC systems exist.\nless popular Git, cover .\nGit designed handle collaboration code projects 48 potentially lot people interact make changes codebase.\nGit might feel little bit daunting first, even seasoned developers still misuse , understand completely, getting ease basics significantly improve way build software, give : benefits learning really outweigh (apparent) complexity.many advantages VC, including:can go back time.\nVC system like Git, every change recorded (well, every committed change), meaning can potentially go back time previous version project, see complete history file.\nfeature important: accidentally made changes break application, deleted feature thought never need, can go back hours, days, months back.can go back time.\nVC system like Git, every change recorded (well, every committed change), meaning can potentially go back time previous version project, see complete history file.\nfeature important: accidentally made changes break application, deleted feature thought never need, can go back hours, days, months back.Several people can work file.\nGit relies system branches.\nWithin branch pattern, one main branch, called “main”, contains stable, main version code-base.\n“forking” branch (branch), developers copy base branch, can safely work changing (breaking) things, without impacting origin branch.\nallows try things safe environment, without touching works.\nNote simultaneously working file time might perfect practice, ’s better, possible, split code smaller files.Several people can work file.\nGit relies system branches.\nWithin branch pattern, one main branch, called “main”, contains stable, main version code-base.\n“forking” branch (branch), developers copy base branch, can safely work changing (breaking) things, without impacting origin branch.\nallows try things safe environment, without touching works.\nNote simultaneously working file time might perfect practice, ’s better, possible, split code smaller files.can safely track changes.\nEvery time developer records something Git, changes listed.\nwords, can see changes made specific file codebase.can safely track changes.\nEvery time developer records something Git, changes listed.\nwords, can see changes made specific file codebase.centralizes codebase.\ncan use Git locally, strength also relies ability synchronize local project distant server.\nalso means several people can synchronize server collaborate project.\nway, changes branch server can downloaded (called pull Git terminology) members team, synchronized locally, .e. someone makes changes branch sends main server, developers can retrieve changes machine.centralizes codebase.\ncan use Git locally, strength also relies ability synchronize local project distant server.\nalso means several people can synchronize server collaborate project.\nway, changes branch server can downloaded (called pull Git terminology) members team, synchronized locally, .e. someone makes changes branch sends main server, developers can retrieve changes machine.","code":""},{"path":"version-control.html","id":"git-basics-add---commit---push---pull","chapter":"12 Version Control","heading":"12.1.2 Git basics: add - commit - push - pull","text":"four main actions performing Git: just need learn minimum get started, four essential ones.","code":""},{"path":"version-control.html","id":"add","chapter":"12 Version Control","heading":"add","text":"using add, choosing elements project want track, new files modifications already versioned file.\naction save file Git repository, flags changes added next commit.","code":""},{"path":"version-control.html","id":"commit","chapter":"12 Version Control","heading":"commit","text":"commit snapshot codebase given moment time.\ncommit associated two things: sha1, unique reference history project, allowing identify precise state need get back time, message, piece text describes commit.49\nNote messages mandatory, commit without , sha1 references automatically generated Git. overlook messages: might seem like constraint first life saver need understand history project.strict rule commit.\nKeep mind commits allow go back time, commit complete state codebase make sense return.\ngood practice state commit message choices made (implemented changes), developers (future) able understand changes.\nCommit messages also might specify breaking changes, developers can immediately see merging code.","code":""},{"path":"version-control.html","id":"push","chapter":"12 Version Control","heading":"push","text":"set commits ready, ready push server.\nwords, permanently record commits (hence series changes) server.Making push implies three things:people team able retrieve changes made.people team able retrieve changes made.changes recorded permanently project history.changes recorded permanently project history.modify commits sent server.50You modify commits sent server.50","code":""},{"path":"version-control.html","id":"pull","chapter":"12 Version Control","heading":"pull","text":"changes recorded main server, everybody synchronized project can pull commits local project.","code":""},{"path":"version-control.html","id":"about-branches","chapter":"12 Version Control","heading":"12.1.3 About branches","text":"Branches Git way organize work ideas, notably several people collaborating project (might case building large web applications R).work?\nstart project, main branch, called “main”.\nperfect world, never work directly branch: always contain working, deployable version application.branches thought work areas, developers fix bugs add features.\nmodifications made development branches transferred (directly indirectly) main branch.\nprinciple shown Figure 12.1.\nFIGURE 12.1: Branches Git.\npractice, might want use workflow branch designed fix small issue implement feature, easier separate small part work.\nEven working alone.","code":""},{"path":"version-control.html","id":"issues","chapter":"12 Version Control","heading":"12.1.4 Issues","text":"working remote tool graphical interface like GitLab, GitHub Bitbucket, good chance using issues.\nIssues “notes” “tickets” can used track bug suggest feature.\ntool crucial comes project management: issues perfect spot organizing discussing ideas, also overview done, currently done, left done.\nIssue may also used discussion medium beta testers, clients sponsors.One valuable feature issues can referenced inside commits using hashtag number: #123.\nwords, send code centralized server, can link code one issues corresponding commits appear issue discussions.","code":""},{"path":"version-control.html","id":"git-integration","chapter":"12 Version Control","heading":"12.2 Git integration","text":"","code":""},{"path":"version-control.html","id":"with-rstudio","chapter":"12 Version Control","heading":"12.2.1 With RStudio","text":"Git well integrated RStudio IDE, using Git can simple clicking button time time.\nusing RStudio, find pull/push button, stage commit interface, tool visualizing differences files.\nEverything need get started .Note course, better long run get complete understanding Git works, things get complexe, able handle .","code":""},{"path":"version-control.html","id":"as-part-of-a-larger-world","chapter":"12 Version Control","heading":"12.2.2 As part of a larger world","text":"Git reserved team work: even working alone project, using Git definitely worth effort.\nUsing Git, particularly issues, helps organize train thought, especially upfront need plan .course, remember Git limited shiny applications: can used R-related projects, end day code related projects, making valuable skill toolbox, whatever language working 10 years!","code":""},{"path":"version-control.html","id":"about-git-flow","chapter":"12 Version Control","heading":"12.2.3 About git-flow","text":"lot different ways methodologies organize Git workflow.\nOne popular ones called git flow, give quick introduction can manage work using approach.\nPlease note quick introduction, complete guide: link reading just end section., key concepts git flow:main branch contains stable code: time matches tagged, fixed version (v0.0.1, 0.1.0, v1.0.0, etc.).\nsmall subset developers involved project writing access main branch, developer ever push code straight branch: new code main comes either dev branch, hotfix branch.\napp production, last commit branch version currently production.main branch contains stable code: time matches tagged, fixed version (v0.0.1, 0.1.0, v1.0.0, etc.).\nsmall subset developers involved project writing access main branch, developer ever push code straight branch: new code main comes either dev branch, hotfix branch.\napp production, last commit branch version currently production.dev branch, hand, “Work progress” branch: one contains latest changes merged main.\ncommon working branch every developer.\ntime, developers push code branches either: make merge/pull requests (MR/PR) dev feature branch.dev branch, hand, “Work progress” branch: one contains latest changes merged main.\ncommon working branch every developer.\ntime, developers push code branches either: make merge/pull requests (MR/PR) dev feature branch.feature branch one branch, forked dev, implements one features application.\nkeep clean track branch , good practice use issue-XXX, XXX corresponding issue plan solve branch.feature branch one branch, forked dev, implements one features application.\nkeep clean track branch , good practice use issue-XXX, XXX corresponding issue plan solve branch.hot fix branch branch correct critical issue main.\nforked main, merged straight main using MR.hot fix branch branch correct critical issue main.\nforked main, merged straight main using MR.summary process available Figure 12.2.\nFIGURE 12.2: Presentation git flow (Vincent Driessen, http://nvie.com).\nsoftware engineer point view, daily work goes:Identify issue work .Identify issue work .Fork dev issue-XXX.Fork dev issue-XXX.Develop feature inside branch.Develop feature inside branch.Regularly run git stash, git rebase dev, git stash apply include latest changes dev stay synchronized dev.51Regularly run git stash, git rebase dev, git stash apply include latest changes dev stay synchronized dev.51Make pull request dev feature included.Make pull request dev feature included.PR accepted project manager, notify rest team changes dev, can rebase branch working .PR accepted project manager, notify rest team changes dev, can rebase branch working .Start working new feature.Start working new feature.course, way subtleties flow work, gives good starting point.\nGenerally speaking, good communication developers essential successful collaborative development project.","code":""},{"path":"version-control.html","id":"further-readings-on-git","chapter":"12 Version Control","heading":"12.2.4 Further readings on Git","text":"want learn Git, resources helped us past:https://happygitwithr.com/https://git-scm.com/bookhttps://www.git-tower.com/blog/git-cheat-sheet/","code":""},{"path":"version-control.html","id":"automated-testing","chapter":"12 Version Control","heading":"12.3 Automated testing","text":"seen Chapter 11 build testing infrastructure app, notably using testthat (Wickham 2023a) package.\ndescribed way build locally, running test machine.\nbig flaw approach: remember run tests, regularly making pull request/pushing server.\nkind job, looking tool automated testing repository level: words, software can test application whenever piece code pushed/moved repository., various tools available, features.\nnon-exhaustive list ones can choose:Travis CI software can synced Git repositories (GitHub Bitbucket), whenever something happens repo, events described travis configuration file (.travis.yml) executed.\nexit code 0, test passes.\n, integrated tests failed.\nTravis CI integration may used internally externally: internally, sense merging pull request, project manager access series tests automatically launched.\nExternally, “health check” installing software: visit GitHub repository Travis badges included, can check current state package/software stable, .e. passes automated tests.Travis CI can lot just testing app: can used build documentation, deploy production, run scripts want run /tests passed.\nnice thing can test various versions R, sure supporting current, future previous versions R.defined .travis.yml file, put root source directory, file automatically generated calling usethis::use_travis().Note Travis CI can run tests GNU/Linux MacOS operating systems.Appveyor functionalities Travis CI. service can integrate GitHub, GitHub Enterprise, Bitbucket, GitLab, Azure Repos, Kiln, Gitea.\nsupports Windows, Linux macOS.GitHub actions serve related purpose: defining actions performed responses events GitHub repository.\nTesting, building documentation, push another repository, deploy server—actions can automatically performed.\nTravis CI, actions defined yaml file.\nExamples configurations can found r-lib/actions, can automatically linked project using functions usethis: use_github_action_check_release(), use_github_action_check_standard(), use_github_action_check_full() use_github_action_pr_commands().\nfirst three perform standard R CMD check, various conditions:release tests MacOS, latest version R, runs check via rcmdcheck (Csárdi 2021) package.standard check 3 operating systems (Windows, Mac Linux), R R-devel.full standard last 5 minor versions R.Finally, use_github_action_pr_commands() sets checks performed pull request made repository.working GitLab, can use integrated GitLab CI service: serves purpose, little difference completely Docker-based: define yaml series stages performed (concurrently sequentially), launched inside Docker container.\nhelp , colinfay/r-ci-tidyverse Docker image comes pre-installed packages testing: remotes (Csárdi et al. 2023), testthat (Wickham 2023a), config (Allaire 2020) available several R versions.\nDocker image can used source image GitLab CI yaml file.example one files:Automated testing, continuous integration, continuous deployment vast topics covered pages inside book, spending time learning methodologies definitely worth time spent: can automate processes, test, application resilient, easy maintain, easy enhance: check, quicker discover bugs.quicker detect bugs, easier correct !","code":"image: colinfay/r-ci-tidyverse:3.6.0\n\ncache:\n  paths:\n    - ci/\n\nstages:\n  - test\n  - document\n\nbuilding:\n  stage: test\n  script:\n    - R -e \"remotes::install_deps(dependencies = TRUE)\"\n    - R -e 'devtools::check()'\n\ndocumenting:\n    stage: document\n    allow_failure: true\n    when: on_success\n    only:\n        - main\n    script:\n        - Rscript -e 'install.packages(\"DT\")'\n        - Rscript -e 'covr::gitlab(quiet = FALSE)'\n    artifacts:\n        paths:\n            - public"},{"path":"deploy.html","id":"deploy","chapter":"13 Deploy Your Application","heading":"13 Deploy Your Application","text":"deploys boring, straightforward, stress-free possible.Deploy Software - Zach Holman (https://zachholman.com/posts/deploying-software)app built, ready deploy !\nwords, software now ready used users.\ntwo main ways share application make available others: creating package making installable, sending remote server.\nsee part can using golem (Fay, Guyader, Rochette, et al. 2023).","code":""},{"path":"deploy.html","id":"before-deployment-checklist","chapter":"13 Deploy Your Application","heading":"13.1 Before deployment checklist","text":"quick checklist things think application ready, sending production:devtools::check(), run command line, returns 0 errors, 0 warnings, 0 notes.devtools::check(), run command line, returns 0 errors, 0 warnings, 0 notes.current version number valid, .e. current app update, version number bumped.current version number valid, .e. current app update, version number bumped.Everything fully documented.Everything fully documented.Test coverage good, .e. cover sufficient amount codebase, tests cover core/strategic algorithmsTest coverage good, .e. cover sufficient amount codebase, tests cover core/strategic algorithmsEveryone project knows person call something goes wrong.Everyone project knows person call something goes wrong.following things clear everyone involved project: debugging process, communicate bugs developer team, long take get changes implemented.following things clear everyone involved project: debugging process, communicate bugs developer team, long take get changes implemented.(relevant) server deployed necessary software installed (Docker, Connect, Shiny Server, etc.) make application run.(relevant) server deployed necessary software installed (Docker, Connect, Shiny Server, etc.) make application run.server system requirements needed (.e. system libraries), , installed application (’s dockerized).server system requirements needed (.e. system libraries), , installed application (’s dockerized).application, deployed server, deployed port accessible users.application, deployed server, deployed port accessible users.(relevant) environment variables production server managed inside application.(relevant) environment variables production server managed inside application.(relevant) app launched correct port, least port can configured via environment variable.(relevant) app launched correct port, least port can configured via environment variable.(relevant) server app deployed access data sources (database, API, etc.).(relevant) server app deployed access data sources (database, API, etc.).app records data, backups data.app records data, backups data.","code":""},{"path":"deploy.html","id":"sharing-your-app-as-a-package","chapter":"13 Deploy Your Application","heading":"13.2 Sharing your app as a package","text":"","code":""},{"path":"deploy.html","id":"install-on-your-machine","chapter":"13 Deploy Your Application","heading":"13.2.1 Install on your machine","text":"shiny application built golem (Fay, Guyader, Rochette, et al. 2023) definition R package.\nshiny app package also helpful comes deploying application: packages designed shareable pieces R code.sending remote server sharing world, first step testing package can installed computer.\n, project corresponding golem built, can call remotes::install_local() install application computer.\ncourse, somewhere else machine, can call remotes::install_local(\"path//app\").\nusing RStudio IDE, can also click Build tab, click Install Restart button.restart R session, call library(yourpackagename).\n, try run_app() function check app can launched.","code":""},{"path":"deploy.html","id":"share-as-a-built-package","chapter":"13 Deploy Your Application","heading":"13.2.2 Share as a built package","text":"","code":""},{"path":"deploy.html","id":"a.-local-build","chapter":"13 Deploy Your Application","heading":"A. Local build","text":"Building app package also means app can bundled archive, shared, either using package repository like CRAN., first need bundled version app, can created using build() function pkgbuild (Wickham, Hester, Csárdi 2022) working directory application.\nCalling function create .tar.gz file called mygolem_0.0.1.tar.gz (course name package).\ntar.gz, can send favorite package repository.can also share file others.\n, install app remotes::install_local(\"path//tar.gz\"), take care full installation app, including installing required dependencies.\n, can library(yourpackagename) run_app() machine.","code":""},{"path":"deploy.html","id":"b.-send-to-a-package-repository","chapter":"13 Deploy Your Application","heading":"B. Send to a package repository","text":"upside building application golem, .e. package, can share application remote package manager, widely used, example, CRAN like {dccvalidator} (R-dccvalidator?), BioConductor like {spatialLIBD} (Collado-Torres, Maynard, Jaffe 2020).\npackage manager work: example, company uses RStudio Package Manager, application can installed way package.\napplication open source, package structure also allows install GitHub, using remotes::install_github() function.52\nexample, can hexmake {tidytuesday}: open-source packages, can installed GitHub.\n, application installed package users’ machines, can library(yourpackagename) run_app().advantage solution R users familiar package installation, makes using application easier .\nAlso, see next section, making application available standard R package makes easier deploy : example, RStudio Connect coupled RStudio Package Manager, deployment file just contain one line launching application.Note releasing CRAN BioConductor requires extra effort: comply series rules.\ngood news: following best practices book, put much extra effort!Know releasing CRAN:Checklist CRAN submissionsCRAN Repository PolicyR packages - Chapter 18, Releasing packageGetting R package CRANprepare--cran - collaborative list things know submitting CRAN","code":""},{"path":"deploy.html","id":"deploying-apps-with-golem","chapter":"13 Deploy Your Application","heading":"13.3 Deploying apps with {golem}","text":"way make application available others sending remote server can serve shiny applications.\nwords, instead install application machines, can crack open web browser navigate URL application deployed.\nDeploying server solution choice want make application available wide public: server, visitors R installed computer, install package launch ; can just browse application like web application.\nsolution also common choice companies strict security requirements: team might willing let everyone install software machine, sharing application server allows control can access application.\nexample, deploying server allows use proxy, filter IP: , subset people can access application.using golem, can open dev/03_deploy.R find functions server deployment.\ntime writing book, two main ways deploy shiny app server:RStudio’s solutionsA Docker-based solution","code":""},{"path":"deploy.html","id":"rstudio-environments","chapter":"13 Deploy Your Application","heading":"13.3.1 RStudio environments","text":"RStudio proposes three services deploy shiny application:shinyapps.io, -premises solution, can serve shiny application (freemium).shinyapps.io, -premises solution, can serve shiny application (freemium).Shiny Server software install server, can used deploy multiple applications (can find either open source professional edition).Shiny Server software install server, can used deploy multiple applications (can find either open source professional edition).RStudio Connect server-based solution can deploy shiny applications Markdown documents (kinds content), serves ordinary websites.RStudio Connect server-based solution can deploy shiny applications Markdown documents (kinds content), serves ordinary websites.platforms function create app.R file used launch script platform.golem::add_rstudioconnect_file()golem::add_rstudioconnect_file()golem::add_shinyappsio_file()golem::add_shinyappsio_file()golem::add_shinyserver_file()golem::add_shinyserver_file()app.R files call pkgload::load_all() function, mimic launch package, call run_app() function packaged app.\nNote need configure way app launched platforms (example, need pass arguments run_app() function), edit file.Note using functions, able use “One click deploy” platforms: top right app.R, use Blue Button deploy server.Another way deploy golem-based app shiny server Connect link two software local repository (example, RStudio Package Manager), use mypackage::run_app() app.R.","code":""},{"path":"deploy.html","id":"docker-1","chapter":"13 Deploy Your Application","heading":"13.3.2 Docker","text":"Docker open source software used build deploy applications containers.\nDocker become core solution DevOps world lot server solutions based .\nSee Part 5, “Strengthen”, complete introduction Docker.find function creating Dockerfile golem app inside 03_deploy.R file, contains series 3 functions:golem::add_dockerfile()golem::add_dockerfile_shinyproxy()golem::add_dockerfile_heroku()first function creates “generic” Dockerfile, sense specific platform, work box local machine.\nsecond one meant {shiny}Proxy, open source solution deploying containerized shiny applications, third Heroku, online service can serve containerized applications (specific shiny).platforms can run Docker containers, notably AWS Google Cloud Engine.\ntime writing lines, golem provide support environments, -list!Note Dockerfile creation golem tries replicate local environment precisely possible, notably matching R version, version packages installed machine.\nSystem requirements also added found sysreqs service r-hub.\nOtherwise might add manually.","code":""},{"path":"need-for-optimization.html","id":"need-for-optimization","chapter":"14 The Need for Optimization","heading":"14 The Need for Optimization","text":"solid characterization surface area want improve can begin identify best way improve .Refactoring Scale (Lemaire 2020)","code":""},{"path":"need-for-optimization.html","id":"build-first-then-optimize","chapter":"14 The Need for Optimization","heading":"14.1 Build first, then optimize","text":"","code":""},{"path":"need-for-optimization.html","id":"identifying-bottlenecks","chapter":"14 The Need for Optimization","heading":"14.1.1 Identifying bottlenecks","text":"Refactoring existing code speed sounds like appealing activity lot us: always satisfying watch functions get faster, finding elegant way solve problem also results making code little bit faster.\nMaude Lemaire writes Refactoring Scale (Lemaire 2020), “Refactoring can little bit like eating brownies: first bites delicious, making easy get carried away accidentally eat entire dozen. ’ve taken last bite, bit regret perhaps twinge nausea kick .”beware!\nDonald Knuth puts “Premature optimization root evil”.\nmean?\nfocusing optimizing small portions app making work fully best way lose time along way, even context production application, deadlines limited amount time build application.\n?\ngeneral idea: let’s say schema Figure 14.1 represents software, goal make things travel X1 X2, bottleneck U.\nbuilding elements piece piece: first, portion X1.1 “road”, X1.2, etc.\napplication ready can really appreciate bottleneck , can focus making things go fast X1.1 X.1.2, performance gains won’t make application go faster: make elements move faster bottleneck.?\napplication ready: example, can detect bottleneck full road actually built, building circle.\nFIGURE 14.1: Road bottleneck, WikiMedia https://commons.wikimedia.org/wiki/File:Roadway_section_with_bottleneck.png.\nbottleneck thing optimizing: faster code anywhere else except bottleneck make app faster: just make app reach bottleneck faster, still part app slows everything .\nsomething might realize app fully built: pieces might fast individually, slow put together.\nalso possible test dataset using start works just fine, try app bigger, realistic dataset, application actually way slower .\n, maybe using example dataset query database every time implement new feature, SQL query database actually slow.\nsomething discover application fully functional, building parts, realizing 5% allocated time project left calendar good surprise.sum :Get design right un-optimized, slow, memory-intensive implementation try tune.\n, tune systematically, looking places can buy big performance wins smallest possible increases local complexity.Art UNIX Programming (Raymond 2003)","code":""},{"path":"need-for-optimization.html","id":"do-you-need-faster-functions","chapter":"14 The Need for Optimization","heading":"14.1.2 Do you need faster functions?","text":"Optimizing app matter trade-offs: course, perfect world, every piece app tailored fast, easy maintain, elegant.\nreal world, deadlines, limited time resources, humans.\nmeans end day, app completely perfect: software can always made better.\npiece code ever reached complete perfection.Given , want spend 5 days 30 planned optimizing function runs quarter second instead half second, realize critical bottleneck app actually SQL query data manipulation?\ncourse function running twice fast good thing, think context: example, many times function called?\ncan safely bet function called , working making twice fast might one function want focus (well, unless unlimited time work project, case lucky ; can spend massive amount time building perfect software).\nhand, function called thousands times application might benefit optimized.basic maths.\nLet’s assume following:current scenario takes 300 seconds accomplished application.One function () takes 30 seconds, ’s called .One function B() takes 1 second, ’s called 50 times.divide execution time () two, performing local optimization 15 seconds, global optimization 15 seconds.\nhand, divide execution time B() two, performing local optimization 0.5 seconds, global optimization 25 seconds., kind optimization hard detect app functional.\noptimization 15 seconds way greater optimization 0.5 seconds.\nYet realize application running!","code":""},{"path":"need-for-optimization.html","id":"dont-sacrifice-readability","chapter":"14 The Need for Optimization","heading":"14.1.3 Don’t sacrifice readability","text":"said last section, every piece code can rewritten faster, either R R using lower-level language: example C C++.\ncan also rebuild data manipulation code switching one package another, use complex data structures optimize memory usage, etc.comes price: keeping things simple sake local optimization makes maintenance harder, even using lesser-known language/package.\nRefactoring piece code better done keep mind “primary goal produce human-friendly code, even cost original design. laser focus solution rather process, ’s greater chance application end contrived complicated first place” (Lemaire 2020).example, switching portions code C++ implies might person can maintain specific portion code, colleague taking project spend hours learning tools building, language chosen write functions ., optimization always matter trade-: half-second local optimization worth extra hours spend correcting bugs app crash one able correct ?\nAlso, extra hours/days spent rewriting working code-base worth speed gain 0.5 seconds one function?example, let’s compare implementations function, one R, one C++ via Rcpp (Eddelbuettel et al. 2023).\ncourse, C++ function faster R one—reason using C++ R.(Note: come back bench::mark() later.)However, much time gain worth sure can get someone team take maintenance needed?\nwords, given (example) gaining around -5.4654^{-4} execution time function, worth switching C++?\nUsing external languages complex data structures implies start, need think codebase maintained years.Chances plan using shiny application span several years, various R developers working project, including C++ code inside application means future developers either required know C++, able maintain piece code., sum , three ways optimize application R code, bad news optimize :Optimizing speedOptimizing memoryOptimizing readability/maintainabilityLeading successful project means , much possible, find perfect balance three.","code":"\nlibrary(\"Rcpp\")\n# A C++ function to compute the mean\ncppFunction(\"\ndouble mean_cpp(NumericVector x) {\n  int j;\n  int size = x.size();\n  double res = 0;\n  for (j = 0; j < size; j++){\n    res = res + x[j];\n  }\n  return res / size;\n}\")\n\n# Computing the mean using base R and C++, \n# and comparing the time spent on each\nbenched <- bench::mark(\n  cpp = mean_cpp(1:100000),\n  native = mean(1:100000), \n  iterations = 1000\n)\nbenched# A tibble: 2 × 6\n  expression    min median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <bch:> <bch:>     <dbl> <bch:byt>    <dbl>\n1 cpp         152µs  154µs     5316.     784KB     21.3\n2 native      692µs  701µs     1422.        0B      0  "},{"path":"need-for-optimization.html","id":"tools-for-profiling","chapter":"14 The Need for Optimization","heading":"14.2 Tools for profiling","text":"","code":""},{"path":"need-for-optimization.html","id":"profiling-r-code","chapter":"14 The Need for Optimization","heading":"14.2.1 Profiling R code","text":"","code":""},{"path":"need-for-optimization.html","id":"a.-identifying-bottlenecks","chapter":"14 The Need for Optimization","heading":"A. Identifying bottlenecks","text":"best way profile R code using profvis (Chang, Luraschi, Mastny 2020) package,53 package designed evaluate much time part function call takes.\nprofvis, can spot bottleneck function.\nWithout automated tool profiling, developers profile guessing, , time, come bad results:One lessons original Unix programmers learned early intuition poor guide bottlenecks , even one knows code question intimately.Art UNIX Programming (Raymond 2003)Instead guessing, safe bet go tool like profvis, allows detailed view takes long time run R code.Using package quite straightforward: put code want benchmark inside profvis() function,54 wait code run, ; now analysis code running time.example 3 nested functions, top(), middle() bottom(), top() calls middle() calls bottom():see now called flame graph: detailed timing function run, clear decomposition call stack.\nsee top window expression evaluated, bottom details call stack, looks little bit like Gantt diagram.\nresult reads follow: wider function call, time taken R compute piece code.\nbottom, “top” function (.e. function directly called console), higher go, enter nested function calls.read graph 14.2:x axis time spent computing whole function.\ntop() function one executed, takes whole record time.x axis time spent computing whole function.\ntop() function one executed, takes whole record time., second line shows functions called inside top().\nFirst, R pauses, series calls FUN (internal anonymous function lapply()), calls middle() function., second line shows functions called inside top().\nFirst, R pauses, series calls FUN (internal anonymous function lapply()), calls middle() function., third line details calls made middle(), pauses, calls bottom_a() bottom_b(), pause() given amount time., third line details calls made middle(), pauses, calls bottom_a() bottom_b(), pause() given amount time.\nFIGURE 14.2: profvis flame graph.\nclick “Data” tab, also find another view flame graph, shown 14.3, can read hierarchy calls time memory spent function call:\nFIGURE 14.3: profvis data tab.\nworking profiling memory usage, can also use profmem (Bengtsson 2020) package , instead focusing execution time, record memory usage calls.can also get total allocated memory :extract specific values based memory allocation:(Example extracted profmem help page).; now tool identify bottlenecks!","code":"\nlibrary(profvis)\ntop <- function(){\n  # We use profvis::pause() because Sys.sleep() doesn't \n  # show in the flame graph\n  pause(0.1)\n  # Running a series of function with lapply()\n  lapply(1:10, function(x){\n    x * 10\n  })\n  # Calling a lower level function\n  middle()\n}\n\nmiddle <- function(){\n  # Pausing before computing, and calling other functions\n  pause(0.2)\n  1e4 * 9\n  bottom_a()\n  bottom_b()\n}\n\n# Both will pause and print, _a for 0.5 seconds, \n# _b for 2 seconds\nbottom_a <- function(){\n  pause(0.5)\n  print(\"hey\")\n}\nbottom_b <- function(){\n  pause(2)\n  print(\"hey\")\n}\nprofvis({\n  top()\n})\nlibrary(profmem)\n# Computing the memory used by each c\np <- profmem({\n  x <- raw(1000)\n  A <- matrix(rnorm(100), ncol = 10)\n})\npRprofmem memory profiling of:\n{\n    x <- raw(1000)\n    A <- matrix(rnorm(100), ncol = 10)\n}\n\nMemory allocations:\n       what bytes               calls\n1     alloc  1048               raw()\n2     alloc   280            matrix()\n3     alloc   560            matrix()\n4     alloc   560            matrix()\n5     alloc  1072            matrix()\n6     alloc   848 matrix() -> rnorm()\n7     alloc  2552 matrix() -> rnorm()\n8     alloc   848            matrix()\n9     alloc   528          <internal>\n10    alloc  1648          <internal>\n11    alloc  1648          <internal>\n12    alloc  1072          <internal>\n13    alloc   256          <internal>\n14    alloc   456          <internal>\n15    alloc   216          <internal>\n16    alloc   256          <internal>\ntotal       13848                    \ntotal(p)[1] 13848\np2 <- subset(p, bytes > 1000)\nprint(p2)Rprofmem memory profiling of:\n{\n    x <- raw(1000)\n    A <- matrix(rnorm(100), ncol = 10)\n}\n\nMemory allocations:\n       what bytes               calls\n1     alloc  1048               raw()\n5     alloc  1072            matrix()\n7     alloc  2552 matrix() -> rnorm()\n10    alloc  1648          <internal>\n11    alloc  1648          <internal>\n12    alloc  1072          <internal>\ntotal        9040                    "},{"path":"need-for-optimization.html","id":"b.-benchmarking-r-code","chapter":"14 The Need for Optimization","heading":"B. Benchmarking R code","text":"Identifying bottlenecks start, now?\nnext chapter optimization, dive deeper common strategies optimizing R shiny code.\n, remember rule: never start optimizing benchmark optimization.\n?\ndevelopers perfect identifying bottlenecks estimating something faster , optimization methods might lead slower code.\ncourse, time , cases adopting optimization methods leads writing slower code, missed bottleneck new code.\ncourse, without clear documentation , missing , relying intuition rough guess speed gain.words, want sure actually optimizing, sure basis comparison.?\nOne thing can done keep RMarkdown file starting point: use notebook keep track , noting starting (.e, ’s original function want optimize), compare new one.\nusing Rmd, can document strategies using optimize code, e.ga: “switched loop vectorize function”, “changed x y”, etc.\nalso helpful future: either projects (can get back document), developers, explain specific decisions made.timing computation, can use bench (Hester Vaughan 2021) package, compares execution time (metrics) two functions.\nfunction takes series named elements, containing R expression timed.\nNote default, mark() function compares output function,timing done, get data.frame various metrics benchmark., empirical evidence one code faster : benchmarking speed code, able determine function fastest.want graphical analysis, bench comes autoplot method ggplot2 (Wickham, Chang, et al. 2023), shown Figure 14.4:\nFIGURE 14.4: bench autoplot.\n, bonus point, bench takes time check two outputs , sure comparing thing, another crucial aspect benchmarking: sure comparing apples oranges!","code":"\n# Multiplying each element of a vector going from 1 to size\n# with a for loop \nfor_loop <- function(size){\n  res <- numeric(size)\n  for (i in 1:size){\n    res[i] <- i * 10\n  }\n  return(res)\n}\n# Doing the same thing using a vectorized function\nvectorized <- function(size){\n  (1:size) * 10\n}\nres <- bench::mark(\n  for_loop = for_loop(1000), \n  vectorized = vectorized(1000), \n  iterations = 1000\n)\nres# A tibble: 2 × 6\n  expression      min   median `itr/sec` mem_alloc\n  <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>\n1 for_loop    42.87µs  43.58µs    22819.    32.4KB\n2 vectorized   2.09µs   2.41µs   230412.    11.8KB\n# ℹ 1 more variable: `gc/sec` <dbl>\nggplot2::autoplot(res)"},{"path":"need-for-optimization.html","id":"profiling-shiny","chapter":"14 The Need for Optimization","heading":"14.2.2 Profiling {shiny}","text":"","code":""},{"path":"need-for-optimization.html","id":"a.-shiny-back-end","chapter":"14 The Need for Optimization","heading":"A. {shiny} back-end","text":"can profile shiny applications using profvis package, just piece R code.\nthing note want use function app built golem (Fay, Guyader, Rochette, et al. 2023), wrap run_app() function print() function.\nLong story short, makes app run function , printing function, object returned run_app() profiled.\nSee discussion issue {golem} repository learn .","code":""},{"path":"need-for-optimization.html","id":"b.-shiny-front-end","chapter":"14 The Need for Optimization","heading":"B. {shiny} front-end","text":"","code":""},{"path":"need-for-optimization.html","id":"google-lighthouse","chapter":"14 The Need for Optimization","heading":"Google Lighthouse","text":"One thing can optimized comes user interface web page rendering performance.\n, can use standard web development tools: said several times, shiny application web application, tools language agnostic work shiny.\nthousands tools available exactly , going probably make lot sense.Let’s focus getting started basic powerful tool, comes free inside browser: Google Lighthouse, one famous tools profiling web pages, bundled recent versions Google Chrome.\nnice thing tool covers see (.e. actually rendering personal computer), can also audit app various configurations, notably mobile, low bandwidth /mimicking 3G connection.\nable perform audit application seen mobile device real strength: developing application computer, might regularly checking application performing mobile. Yet large portion web navigation performed mobile tablet.Already 2016, Google wrote “half web traffic now comes smartphones tablets”.\nKnowing exact number visitors browse mobile hard: web vast, websites record traffic receive.\nYet many, , studies web browsed report results: traffic created via mobile via computer.55And, advantages running browser can perform analysis locally deployed applications: words, can launch shiny application R console, open app Google Chrome, run audit.\nlot online services need URL audit!result audit comes advice changes can make application make better, links know specific issue.course, last least, also get results metrics “passed”.\nalways good mood booster see app passing audited points!quick introduction tool:Open Chrome incognito mode (File > New Icognito Window),56 page performance influenced installed extensions Google Chrome.Open developer console, either going View > Developer > Developer tools, right-clicking > Inspect, keyboard shortcut ctrl/cmd + alt + , shown Figure 14.5.Go “Audit” tab.Configure report (leave default).Click “Generate Report”.Note can also install command-line tool npm install -g lighthouse,57 run lighthouse http://urlto.audit: produce either JSON (asked) HTML report (default).\nFIGURE 14.5: Launching Lighthouse audit Google Chrome.\nSee Figure 14.6 screenshot results computed Google Lighthouse.\nFIGURE 14.6: Lighthouse audit results.\naudit finished, basic useful indications application:Performance.\nmetric mostly analyzes rendering time page: example, much time take load app full, say much time takes first byte received app fully ready used, time first call server first response, etc.\nshiny (Chang et al. 2022), get low performance , notably due fact serving external dependencies might able control.\nexample, report hexmake (Fay 2023g) suggests “Eliminate render-blocking resources”, controlled shiny developer: come bundled shiny::fluidPage() .Performance.\nmetric mostly analyzes rendering time page: example, much time take load app full, say much time takes first byte received app fully ready used, time first call server first response, etc.\nshiny (Chang et al. 2022), get low performance , notably due fact serving external dependencies might able control.\nexample, report hexmake (Fay 2023g) suggests “Eliminate render-blocking resources”, controlled shiny developer: come bundled shiny::fluidPage() .Accessibility.\nGoogle Lighthouse performs series accessibility tests (see chapter accessibility information).Accessibility.\nGoogle Lighthouse performs series accessibility tests (see chapter accessibility information).Best practices bundles list “misc” best practices around web applications.Best practices bundles list “misc” best practices around web applications.SEO, search engine optimization, app perform comes search engine indexation.58SEO, search engine optimization, app perform comes search engine indexation.58Progressive Web App (PWA): PWA app can run device, “reaching anyone, anywhere, device single codebase”.\nGoogle audit application see application fits idea.Progressive Web App (PWA): PWA app can run device, “reaching anyone, anywhere, device single codebase”.\nGoogle audit application see application fits idea.Profiling web page wide topic lot things can done enhance global page performance.\nsaid, limited time invest optimizing front-end performance application, Google Lighthouse perfect tool, can go-audit tool application.want R, npm lighthouse module allows output audit JSON, can brought back R!, JSON file, can call R:results contained audits sections object, sub-elements contains description field, detailing metric means., example, results, focused performance, respective descriptions:","code":"lighthouse --output json \\\n  --output-path data-raw/output.json \\\n  http://localhost:2811\n# Reading the JSON output of your lighthouse audit, \n# and displaying the Speed Index value\nlighthouse_report <- jsonlite::read_json(\"data-raw/output.json\")\nlighthouse_report$audits$`speed-index`$displayValue[1] \"5.4 s\""},{"path":"need-for-optimization.html","id":"first-meaningful-paint","chapter":"14 The Need for Optimization","heading":"“First Meaningful Paint”","text":"","code":"\n# Each audit point contains a description, \n# that explains what this value stands for\nlighthouse_report$audits$`first-meaningful-paint`$description[1] \"First Meaningful Paint measures when the primary\"\n[2] \"content of a page is visible. [Learn\"            \n[3] \"more](https://web.dev/first-meaningful-paint).\"  \n# We can turn the results into a data frame\nlighthouse_report$audits$`first-meaningful-paint` %>%\n  tibble::as_tibble()  %>%\n  dplyr::select(title, score, displayValue)# A tibble: 1 × 3\n  title                  score displayValue\n  <chr>                  <dbl> <chr>       \n1 First Meaningful Paint  0.23 5.4 s       "},{"path":"need-for-optimization.html","id":"speed-index","chapter":"14 The Need for Optimization","heading":"“Speed Index”","text":"","code":"\nlighthouse_report$audits$`speed-index`$description[1] \"Speed Index shows how quickly the contents of a page\"\n[2] \"are visibly populated. [Learn\"                       \n[3] \"more](https://web.dev/speed-index).\"                 \nlighthouse_report$audits$`speed-index` %>%\n  tibble::as_tibble()  %>%\n  dplyr::select(title, score, displayValue) # A tibble: 1 × 3\n  title       score displayValue\n  <chr>       <dbl> <chr>       \n1 Speed Index  0.56 5.4 s       "},{"path":"need-for-optimization.html","id":"estimated-input-latency","chapter":"14 The Need for Optimization","heading":"“Estimated Input Latency”","text":"","code":"\nlighthouse_report$audits$`estimated-input-latency`$description [1] \"Estimated Input Latency is an estimate of how long\"   \n[2] \"your app takes to respond to user input, in\"          \n[3] \"milliseconds, during the busiest 5s window of page\"   \n[4] \"load. If your latency is higher than 50 ms, users may\"\n[5] \"perceive your app as laggy. [Learn\"                   \n[6] \"more](https://web.dev/estimated-input-latency).\"      \nlighthouse_report$audits$`estimated-input-latency` %>%\n  tibble::as_tibble()  %>%\n  dplyr::select(title, score, displayValue) # A tibble: 1 × 3\n  title                   score displayValue\n  <chr>                   <int> <chr>       \n1 Estimated Input Latency     1 10 ms       "},{"path":"need-for-optimization.html","id":"total-blocking-time","chapter":"14 The Need for Optimization","heading":"“Total Blocking Time”","text":"","code":"\nlighthouse_report$audits$`total-blocking-time`$description [1] \"Sum of all time periods between FCP and Time to\"       \n[2] \"Interactive, when task length exceeded 50ms, expressed\"\n[3] \"in milliseconds.\"                                      \nlighthouse_report$audits$`total-blocking-time` %>%\n  tibble::as_tibble()  %>%\n  dplyr::select(title, score, displayValue)# A tibble: 1 × 3\n  title               score displayValue\n  <chr>               <int> <chr>       \n1 Total Blocking Time     1 30 ms       "},{"path":"need-for-optimization.html","id":"time-to-first-byte","chapter":"14 The Need for Optimization","heading":"“Time to first Byte”","text":"Google Lighthouse also comes continuous integration tool, can use regression testing tool application.\nknow , feel free read documentation!","code":"\nlighthouse_report$audits$`time-to-first-byte`$description [1] \"Time To First Byte identifies the time at which your\"\n[2] \"server sends a response. [Learn\"                     \n[3] \"more](https://web.dev/time-to-first-byte).\"          \nlighthouse_report$audits$`time-to-first-byte` %>%\n  .[c(\"title\", \"score\", \"displayValue\")] %>%\n  tibble::as_tibble() # A tibble: 1 × 3\n  title                              score displayValue\n  <chr>                              <int> <chr>       \n1 Server response times are low (TT…     1 Root docume…"},{"path":"need-for-optimization.html","id":"side-note-on-minification","chapter":"14 The Need for Optimization","heading":"Side note on minification","text":"Chances right now using minification shiny application.\nMinification process removing unnecessary characters files, without changing way code works, make file size smaller.\ngeneral idea line breaks, spaces, specific set characters used inside scripts human readability, useful comes way computer reads piece code.\nremove served larger software?\nminification .example minification works, taken Empirical Study Effects Script Minification HTTP Compression Traffic Reduction (Sakamoto et al. 2015):minified :code blocks behave way, second one smaller saved file: core principle minification files.\nsomething pretty common building web applications: web, every byte counts, smaller external resources better.\nMinification important larger resources, longer application take launch, :Page launch time crucial comes ranking pages web.Page launch time crucial comes ranking pages web.larger resources, longer take launch application mobile, notably users visiting application 3G/4G network.larger resources, longer take launch application mobile, notably users visiting application 3G/4G network.forget following:Extremely high-speed network infrastructures becoming popular developed countries.\nHowever, still face crowded low-speed Wi-Fi environments airport, cafe, international conference, etc.\nEspecially, network environment mobile devices requires efficient usage network bandwidth.Empirical study effects script minification HTTP compression traffic reduction (Sakamoto et al. 2015)minify JavaScript, HTML CSS files R, can use {minifyr} (Fay 2023h) package, wraps node-minify NodeJS library.\nexample, compare size file shiny:minified version:might seem like much (couple KB) small scale, can done automatically, leverage small performance gains building larger applications?\ncourse, minification suddenly make application blazing fast, ’s something consider deploying application production, notably use lot packages interactive widgets: might contain CSS JavaScript files minified.Minification can important notably expect audience connecting app low bandwidth: whenever application starts, browser download source files server, meaning larger files, longer take render.Note shiny files minified default, re-minify .\npackages extend shiny , minifying CSS JavaScript files packages might help win points Google Lighthouse report!automatically, can add {minifyr} commands deployment, CD/CI platform, Dockerfile step.\n{minifyr} comes series functions :minify_folder_css(), minify_folder_js(), minify_folder_html() minify_folder_json() bulk minification files found folder matches extension.minify_package_js(), minify_package_css(), minify_package_html() minify_package_json() minify CSS JavaScript files contained inside package installed machine.can look like inside Dockerfile (Note need install NodeJS inside container):","code":"var sum = 0;\nfor ( var i = 0; i <=10; i ++ ) {\n  sum += i ;\n}\nalert( sum ) ;var sum=0;for(var i=0;i<=10;i++){sum+=i};alert(sum);\n# Displaying the file size of a CSS file from {shiny}\nfs::file_size(\n  system.file(\"www/shared/shiny.js\", package = \"shiny\")\n) 239K\n# Using the {minifyr} package to minify the CSS file\nminified <- minifyr::minifyr_js_gcc(\n  system.file(\"www/shared/shiny.js\", package = \"shiny\"), \n  \"shinymini.js\"\n) \n# Minifying can help you gain kilobytes\nfs::file_size(minified)87.5KFROM rocker/shiny-verse:3.6.3\n\nRUN apt-get -y install curl \nRUN curl -sL \\\n  <https://deb.nodesource.com/setup_14.x> \\\n  | bash - \nRUN apt-get install -y nodejs\n\nRUN Rscript -e 'remotes::install_github(\"colinfay/minifyr\")' \nRUN Rscript -e 'remotes::install_cran(\"cicerone\")' \nRUN Rscript -e 'library(minifyr);\\\n    minifyr_npm_install(TRUE);\\\n    minify_package_js(\"cicerone\", minifyr_js_uglify)'"},{"path":"need-for-optimization.html","id":"more-resources-about-web-page-performance","chapter":"14 The Need for Optimization","heading":"14.2.3 More resources about web-page performance","text":"Performance Matters - Google Web FundamentalsWhy Performance Matters - Google Web FundamentalsWeb Performance - Mozilla Web DocsWeb Performance - Mozilla Web Docs","code":""},{"path":"common-app-caveats.html","id":"common-app-caveats","chapter":"15 Common Application Caveats","heading":"15 Common Application Caveats","text":"","code":""},{"path":"common-app-caveats.html","id":"reactivity-anti-patterns","chapter":"15 Common Application Caveats","heading":"15.1 Reactivity anti-patterns","text":"","code":""},{"path":"common-app-caveats.html","id":"reactivity-is-awesome-until-it-is-not","chapter":"15 Common Application Caveats","heading":"15.1.1 Reactivity is awesome… until it is not","text":"Let’s face , reactivity awesome… .\nReactivity common source confusion beginners, common source bugs bottlenecks, even seasoned shiny developers.\ntime, issues come fact much reactivity, .e. build apps many things happen, things updated way often , computations performed , end hard time understanding really happening inside application.course, nice feature make everything react instantly changes, building larger apps easy create monsters, .e. complicated, messy, reactive graphs everything updated much often.\nworse, generate endless reactive loops, aka “reactive inferno” invalidates B invalidates C invalidates invalidates B invalidates C, .Let’s take small example reactive inferno:, want handle something pretty common:user can pick date year input updated.way round: year input changes, date updated .try run console, end reactive inferno: date updates year updates date updates year, .work app, complex gets, likely end reactive inferno.\nsection, deal reactivity, control , share data across modules without relying passing along reactive objects.application state infinite loop starts mutually inconsistent state: dateInput() year value current year, selectInput() value 2010.\nOne way solve add extra logic app selecting current year selectInput(), adding statement observeEvent(input$year, {}), shown .59","code":"\nlibrary(shiny)\nlibrary(lubridate)\nui <- function(){\n  tagList(\n    # Adding a first input which allow \n    # to select a specific date\n    dateInput(\n      \"date\", \n      \"choose a date\"\n    ), \n    # Adding a second input allowing \n    # to specify a year\n    selectInput(\n      \"year\", \n      \"Choose a year\", \n      choices = 2010:2030\n    )\n  )\n}\n\nserver <- function(\n  input, \n  output, \n  session\n){\n  # We want the year to be update whenever \n  # the dateInput is updated\n  observeEvent( input$date , {\n    updateSelectInput(\n      session, \n      \"year\", \n      selected = year(input$date)\n    )\n  })\n  \n  # We want the date to be update whenever \n  # the selectInput is updated\n  observeEvent( input$year , {\n    updateDateInput(\n      session, \n      \"date\", \n      value = lubridate::as_date(\n        sprintf(\"%s-01-01\", input$year)\n      )\n    )\n  })\n  \n}\n\nshinyApp(ui, server)\nlibrary(shiny)\nui <- fluidPage(\n  dateInput(\n    \"date\", \n    \"choose a date\"\n    ), \n  selectInput(\n    \"year\", \n    \"Choose a year\", \n    choices = 2010:2030, \n    # Setting a state for the year\n    selected = format(\n      Sys.Date(), \n      \"%Y\"\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$date, {\n    year <- format(input$date, \"%Y\")\n    message(\"Changing year to \", year)\n    updateSelectInput(inputId = \"year\", selected = year)\n  })\n  \n  observeEvent(input$year, {\n    # Preventing this update to be sent at application launch\n    if (input$year != format(input$date, \"%Y\")) {\n      date <- as.Date(ISOdate(input$year, 1, 1))\n      message(\"Changing date to \", date)\n      updateDateInput(inputId = \"date\", value = date)\n    }\n  })\n}\n\nshinyApp(ui, server)"},{"path":"common-app-caveats.html","id":"observe-vs-observeevent","chapter":"15 Common Application Caveats","heading":"15.1.2 observe vs observeEvent","text":"One common features reactive inferno use observe() cases use observeEvent.\nSpoiler: try use observeEvent() much possible, avoid observe()much possible.first, observe() seems easier implement, feels like shortcut think react : everything gets updated without thinking .\ntruth , stairway lead heaven.Let’s stop think observe() minute.\nfunction updates every time reactive object contains invalidated.\nYes, works well small number reactive objects observer, gets tricky start adding long list things inside observe(), might launching computation 10 times reactive scope contains 10 reactive objects somehow invalidated chain.\nbelieve us, seen pieces code observe() contains hundreds lines code, reactive objects place, one observe() context invalidated dozens times one input changes application.example, let’s start :Oh, , let’s add small selectInput():, time goes , add another control flow observe():nice keep selected values reactive list, can reuse elsewhere.\nmaybe like add checkbox logs printed console checked.Ok, now can tell many potential invalidation points ?\nThree: whenever input$txt, input$rev input$casefolding change.\ncourse, three much, get idea.Let’s pause minute think use observe() .\nupdate values inside r$input_txt, yes.\nneed use observe() , say, updating r$input_txt dozens conditions, time user types letter?\nPossibly .generally want observer update content small, controlled number inputs, .e. controlled number invalidation points.\n, often forget users type/select correctly first try.\n, usually try miss, restart, change things, amplifying reactivity “-happening”.Moreover, long observe() statements hard debug, make collaboration harder trigger observe logic can potentially live anywhere line one line 257 observe().\n’s (well, 99% cases), safer go observeEvent, allows see glance condition content invalidated re-evaluated.\n, reactive context invalidated, know .\nexample, reactive invalidation can happen (lines *)60:Whereas refactored code using observeEvent(), easier identify invalidation can happen:","code":"\n## DO NOT DO GLOBAL VARIABLES, IT'S JUST TO SIMPLIFY THE EXAMPLE\n# We initiate a counter that will help to track how many times \n# some pieces of the code are called\ni <- 0\nlibrary(shiny)\nlibrary(cli)\nui <- function(){\n  tagList(\n    # We are adding a simple text input \n    # that will be printed to the console\n    textInput(\"txt\", \"Text\")\n  )\n}\n\nserver <- function(input, output, session){\n  observe({\n    # Every time this reactive context is invalidated, \n    # we add 1 to the i value\n    i <<- i + 1\n    # We print the i value to the console, \n    # and the value of input$txt\n    cat_rule(as.character(i))\n    print(input$txt)\n  })\n}\n\nshinyApp(ui, server)\ni <- 0\nlibrary(shiny)\nlibrary(cli)\nui <- function(){\n  tagList(\n    # We are adding a simple text input \n    # that will be printed to the console\n    textInput(\"txt\", \"Text\"),\n    # We add a selectInput() to allow text transformation\n    selectInput(\n      \"casefolding\", \n      \"Casefolding\", \n      c(\"lower\", \"upper\")\n    )\n  )\n}\n\nserver <- function(input, output, session){\n  observe({\n    # Every time this reactive context \n    # is invalidated, we add 1 to the i value\n    i <<- i + 1\n    # We print the i value to the console\n    cat_rule(as.character(i))\n    # If the user select lower, then the text is \n    # passed through tolower, otherwise it's passed \n    # through toupper\n    if (input$casefolding == \"lower\") {\n      print(tolower(input$txt))\n    } else  {\n      print(toupper(input$txt))\n    }\n  })\n}\n\nshinyApp(ui, server)\ni <- 0\nlibrary(shiny)\nlibrary(cli)\nlibrary(stringi)\nui <- function(){\n  tagList(\n    # We are adding a simple text input \n    # that will be printed to the console\n    textInput(\"txt\", \"Text\"),\n    # We add a selectInput() to allow text transformation\n    selectInput(\n      \"casefolding\", \n      \"Casefolding\", \n      c(\"lower\", \"upper\")\n    ),\n    # A new checkbox to reverse (or not) the input text\n    checkboxInput(\"rev\", \"reverse\")\n  )\n}\n\nserver <- function(input, output, session){\n  observe({\n    # Every time this reactive context \n    # is invalidated, we add 1 to the i value\n    i <<- i + 1\n    # We print the i value to the console\n    cat_rule(as.character(i))\n    # Use input_txt as a container for our input\n    input_txt <- input$txt\n    if (input$rev){\n      # If the input$rev is select, we reverse the text\n      input_txt <- stri_reverse(input_txt)\n    }\n    # If the user select lower, then the text is \n    # passed through tolower, otherwise it's passed \n    # through toupper\n    if (input$casefolding == \"lower\") {\n      print(tolower(input_txt))\n    } else  {\n      print(toupper(input_txt))\n    }\n  })\n}\n\nshinyApp(ui, server)\ni <- 0\nlibrary(shiny)\nlibrary(cli)\nlibrary(stringi)\nui <- function(){\n  tagList(\n    # We are adding a simple text input \n    # that will be printed to the console\n    textInput(\"txt\", \"Text\"),\n    # We add a selectInput() to allow text transformation\n    selectInput(\n      \"casefolding\", \n      \"Casefolding\", \n      c(\"lower\", \"upper\")\n    ),\n    # A new checkbox to reverse (or not) the input text\n    checkboxInput(\"rev\", \"reverse\")\n  )\n}\n\nserver <- function(input, output, session){\n  # We are using a reactiveValues to keep this input value\n  r <- reactiveValues()\n  observe({\n    # Every time this reactive context \n    # is invalidated, we add 1 to the i value\n    i <<- i + 1\n    # We print the i value to the console\n    cat_rule(as.character(i))\n    if (input$rev){\n      # If the input$rev is select, we reverse the text\n      r$input_txt <- stri_reverse(r$input_txt)\n    } else {\n      # Otherwise, we leave it as it is\n      r$input_txt <- input$txt\n    }\n    # If the user select lower, then the text is \n    # passed through tolower, otherwise it's passed \n    # through toupper\n    if (input$casefolding == \"lower\") {\n      print(tolower(r$input_txt))\n    } else  {\n      print(toupper(r$input_txt))\n    }\n  })\n}\n\nshinyApp(ui, server)observe({\n    i <<- i + 1\n    cat_rule(as.character(i))\n*   if (input$rev){\n*     r$input_txt <- stri_reverse(r$input_txt)\n    } else {\n*     r$input_txt <- input$txt\n    }\n*   if (input$casefolding == \"lower\") {\n*     print(tolower(r$input_txt))\n    } else  {\n*     print(toupper(r$input_txt))\n    }\n})observeEvent( c(\n*  input$rev, \n*  input$txt\n),{\n  i <<- i + 1\n  cat_rule(as.character(i))\n  if (input$rev){\n    r$input_txt <- stri_reverse(r$input_txt)\n  } else {\n    r$input_txt <- input$txt\n  }\n  if (input$casefolding == \"lower\") {\n    print(tolower(r$input_txt))\n  } else  {\n    print(toupper(r$input_txt))\n  }\n})"},{"path":"common-app-caveats.html","id":"building-triggers-and-watchers","chapter":"15 Common Application Caveats","heading":"15.1.3 Building triggers and watchers","text":"prevent , one way go create “flag” objects, can thought internal buttons control want invalidate: create button, set places want buttons invalidate context, finally press buttons.objects launched init function, flags triggered trigger(), wherever want flags invalidate reactive context, watch() flags.idea get full control reactive flow: invalidate contexts want, making general flow app predictable.\nflags available using gargoyle (Fay 2023e) package, can installed GitHub :gargoyle::init(\"\") initiates \"\" flag: time generating app_server() level.gargoyle::init(\"\") initiates \"\" flag: time generating app_server() level.gargoyle::watch(\"\") sets flag inside reactive context, invalidated every time trigger(\"\") flag.gargoyle::watch(\"\") sets flag inside reactive context, invalidated every time trigger(\"\") flag.gargoyle::trigger(\"\") triggers flags.gargoyle::trigger(\"\") triggers flags., bonus, functions use session object, available across modules.\nalso means can easily trigger event inside module another one.pattern , example, implemented hexmake (Fay 2023g) (though gargoyle), rendering image right fully controlled \"render\" flag.\nidea allow complete control image recomputed: trigger(\"render\") called app regenerate image, helping us lower reactivity application.\nmight seem like lot extra work, definitely worth considering long run, help optimizing rendering (fewer computations), lowering number errors can result much reactivity inside application.small example implementation, using environment store value.\nusing pattern, rely reactive value invalidating reactive context: second result displayed \"render2\" flag triggered, giving us full control reactivity propagated.","code":"\n# CRAN version \ninstall.packages(\"gargoyle\")\n# Dev version\nremotes::install_github(\"ColinFay/gargoyle\")\nlibrary(shiny)\nlibrary(gargoyle)\nui <- function(){\n  fluidPage(\n    tagList(\n      # Creating an action button to launch the computation\n      actionButton(\"compute\", \"Compute\"), \n      # Output for all runif()\n      verbatimTextOutput(\"result\"), \n      # This output will change only if runif() > 0.5\n      verbatimTextOutput(\"result2\"),\n      # This button will reset x$results to 0, we use it \n      # to show that it won't launch a series of reactivity \n      # invalidation\n      actionButton(\"reset\", \"Reset x\")\n    )\n  )\n}\n\nserver <- function(\n  input, \n  output, \n  session\n){\n  \n  # Mimic an R6 class, i.e. a non-reactive object\n  x <- environment()\n  \n  # Creating two watchers\n  init(\"render_result\", \"render_result2\")\n  \n  observeEvent( input$compute , {\n    # When the user presses compute, we launch runif()\n    x$results <- runif(1)\n    # Every time a new value is stored, we render result\n    trigger(\"render_result\")\n    # Only render the second result if x$results is over 0.5\n    if (x$results > 0.5){\n      trigger(\"render_result2\")\n    }\n  })\n  \n  output$result <- renderPrint({\n    # Will be rendered every time\n    watch(\"render_result\")\n    # require x$results before rendering the output\n    req(x$results)\n    x$results\n  })\n  \n  \n  output$result2 <- renderPrint({\n    # This will only be rendered if trigger(\"render_result2\")\n    # is called\n    watch(\"render_result2\")\n    req(x$results)\n    x$results\n  })\n  \n  observeEvent( input$reset , {\n    # This resets x$results. This code block is here\n    # to show that reactivity is not triggered in this app \n    # unless a trigger() is called\n    x$results <-  0\n    print(x$results)\n  })\n  \n}\n\nshinyApp(ui, server)"},{"path":"common-app-caveats.html","id":"using-r6-as-data-storage","chapter":"15 Common Application Caveats","heading":"15.1.4 Using R6 as data storage","text":"One pattern also playing storing app business logic inside one R6 objects.\nwant ?","code":""},{"path":"common-app-caveats.html","id":"a.-sharing-data-across-modules","chapter":"15 Common Application Caveats","heading":"A. Sharing data across modules","text":"Sharing R6 object makes simpler create data shared across modules, without complexity generated reactive objects, instability using global variables.Basically, idea hold whole logic data reading/cleaning/processing/outputting inside R6 class.\nobject class initiated top level application, can pass object sub-modules.\ncourse, makes even sense combining trigger/watch pattern !","code":"\nlibrary(shiny)\ndata_cleaning_ui <- function(id){\n  ns <- NS(id)\n  tagList(\n    # Defining the UI for your first module\n    # [...]\n  )\n}\n\nmod_data_cleaning_server <- function(id, r6){\n  moduleServer( id, function(input, output, session){\n    ns <- session$ns\n    observeEvent( input$launch_cleaning , {\n      # Once the launch_cleaning input is triggered, we \n      # use the internal method from our r6 object \n      r6$clean(arg1 = input$a, arg2 = input$b)\n      # Triggering the plot\n      trigger(\"plot\")\n    })\n  })\n}\n\nplotting_ui <- function(id){\n  ns <- NS(id)\n  tagList(\n    # Defining the UI for your second module\n    # [...]\n  )\n}\n\nmod_plotting_server <- function(id, r6){\n  moduleServer( id, function(input, output, session){\n    ns <- session$ns\n    # Rendering, inside this second module, the plot based on the \n    # cleaning done in the other module\n    output$plot <- renderPlot({\n      # We use the trigger/watch pattern from before\n      watch(\"plot\")\n      # Calling the plot() method from our R6 object\n      r6$plot()\n    })\n  })\n}\n\n\nui <- function(){\n  tagList(\n    # Putting our two module UIs here\n    data_cleaning_ui(\"data_cleaning_ui\"),\n    plotting_ui(\"plotting_ui\")\n  )\n}\n\nserver <- function(\n  input, \n  output, \n  session\n){\n  # We start by creating a new instance of th\n  r6 <- MyDataProcessing$new()\n  # Passing this object to the two server functions\n  mod_data_cleaning_server(\"data_cleaning_ui_1\", r6)\n  mod_plotting_server(\"plotting_ui_1\", r6)\n\n}\n\nshinyApp(ui, server)"},{"path":"common-app-caveats.html","id":"b.-be-sure-it-is-tested","chapter":"15 Common Application Caveats","heading":"B. Be sure it is tested","text":"process building robust shiny app, strongly suggest test many things can.\nusing R6 business logic app makes sense: allows build whole testing application data logic outside reactive context: simply build unit tests just function.example, let’s say following R6 generator:can build test class using testthat:Using R6 allows rely battle-tested tools comes testing functions, something made complex using patterns like reactiveValues().","code":"\nMyData <- R6::R6Class(\n  \"MyData\", \n  # Defining our public methods, that will be \n  # the dataset container, and a summary function\n  public = list(\n    data = NULL,\n    initialize = function(data){\n      self$data <- data\n    }, \n    summarize = function(){\n      summary(self$data)\n    }\n  )\n)\nlibrary(testthat, warn.conflicts = FALSE)\ntest_that(\"R6 Class works\", {\n  # We define a new instance of this class, that will contain \n  # the mtcars data.frame\n  my_data <- MyData$new(mtcars)\n  # We will expect my_data to have two classes: \n  # \"MyData\" and \"R6\"\n  expect_is(my_data, \"MyData\")\n  expect_is(my_data, \"R6\")\n  # And the summarize method to return a table\n  expect_is(my_data$summarize(), \"table\")\n  # We would expect the data contained in the object \n  # to match the one taken as input to new()\n  expect_equal(my_data$data, mtcars)\n  # And the summarize method to be equal to the summary()\n  #  on the input object\n  expect_equal(my_data$summarize(), summary(mtcars))\n})Test passed 🌈"},{"path":"common-app-caveats.html","id":"logging-reactivity-with-whereami","chapter":"15 Common Application Caveats","heading":"15.1.5 Logging reactivity with {whereami}","text":"Getting good sense reactivity actually working app easy task: reactivity logic graph, happens quickly run app, ’s hard follow everything.whereami::whereami()’s (Sidi Müller 2022) goal simple: informing called, .e. file line, many times.\nexample, add following piece code app_server(), location function call printed logs.Combining cat_where() implement reactive logging console developing: way, can instantaneously know reactive contexts invalidated using application.\ncourse, still implement hand, definitely worth effort: seeing real time, console, line run allows detect unexpected behavior.\nexample, able see observeEvent() mod_main.R#79 called 17 times launching app, might unexpected behavior.screenshot Figure 15.1 shows whereami log might look like, , hexmake application.\nFIGURE 15.1: whereami output hexmake.\nbonus, app closed, can get list “counters” whereami::counter_get(), many times called, plot(whereami::counter_get()) draw raw plot various counters, shown Figure 15.2.\nFIGURE 15.2: plot whereami counters.\n","code":"\nwhereami::cat_where( whereami::whereami() )── Running server(...) at app_server.R#9 (2) ───────────────"},{"path":"common-app-caveats.html","id":"r-does-too-much","chapter":"15 Common Application Caveats","heading":"15.2 R does too much","text":"","code":""},{"path":"common-app-caveats.html","id":"rendering-the-ui-from-the-server-side","chapter":"15 Common Application Caveats","heading":"15.2.1 Rendering the UI from the server side","text":"many reasons want change things UI based happens server: changing choices selectInput() based columns table uploaded user, showing hiding pieces app according environment variable, allowing user create indeterminate number inputs, etc.Chances , using uiOutput() renderUI() functions shiny (Chang et al. 2022).\nEven convenient, functions choice specific context, pair functions makes R little bit much: making R regenerate whole UI component instead changing need, can suboptimal, user point view, developer perspective.One instance pattern might optimal case visitors high-speed internet visiting using smartphone, contexts every byte counts.\nRendering large elements server side shiny app means elements transit socket, .e. need sent server, downloaded browser.\ncase, smaller message size better!developer perspective, create code harder reason , used UI parts UI functions (related performance).three strategies code without uiOutput() renderUI().","code":""},{"path":"common-app-caveats.html","id":"a.-implement-ui-events-in-javascript","chapter":"15 Common Application Caveats","heading":"A. Implement UI events in JavaScript","text":"Mixing languages better writing everything one, using one likely overcomplicate program.Art UNIX Programming (Raymond 2003)see last chapter book can integrate JS inside shiny app, even basic functions can useful making app server smaller.\nexample, compare:toThe result , first version shorter easier understand: one button, behavior button self-contained.\nsecond solution redraws plot every time reactiveValues updated, making R compute way , whereas JavaScript-solution, plot recomputed every time need show : plot drawn R .local level, improvements described section make application way faster: example, rendering UI elements (let’s say rendering simple title) computationally heavy.\nglobal level, less UI computation server side helps general rendering app: let’s say output takes 3 seconds run, whole UI + output rendered server side, whole UI stays blank everything computed.Compare:toIn first example, UI wait server rendered, second first see title, rendered text seconds.\napproach makes user experience better: know something happening, completely blank page confusing.Also, R single threaded, manipulating DOM elements server side causes R busy DOM manipulations computing something else.\nlet’s imagine takes quarter second render DOM element.\nfull second rendering four , R busy something else!","code":"\nlibrary(shiny)\nui <- function(){\n  tagList(\n    # Adding a button with an onclick event, \n    # that will show or hide the plot\n    actionButton(\n      \"change\", \n      \"show/hide graph\", \n      # The toggle() function hide or show the queried element\n      onclick = \"$('#plot').toggle()\"\n    ), \n    plotOutput(\"plot\")\n  )\n}\n\nserver <- function(\n  input, \n  output, \n  session\n){\n  output$plot <- renderPlot({\n    # This renderPlot will only be called once\n    cli::cat_rule(\"Rendering plot\")\n    plot(iris)\n  })\n}\n\nshinyApp(ui, server) \nlibrary(shiny)\nui <- function(){\n  tagList(\n    # We use a pattern without JavaScript\n    actionButton(\"change\", \"show/hide graph\"), \n    plotOutput(\"plot\")\n  )\n}\n\nserver <- function(\n  input, \n  output, \n  session\n){\n  \n  output$plot <- renderPlot({\n    # Here, every time the button is clicked, this reactive \n    # context will be invalidated, and the code re-evaluated\n    cli::cat_rule(\"Rendering plot\")\n    # Simulate a show and hide pattern\n    req(input$change %% 2 == 0)\n    plot(iris)\n  })\n  \n}\n\nshinyApp(ui, server)\nlibrary(shiny)\nui <- function(){\n  tagList(\n    # We make the whole UI be generated by R\n    uiOutput(\"caption\")\n  )\n}\n\nserver <- function(\n  input, \n  output, \n  session\n){\n  output$caption <- renderUI({\n    # Simulate something that takes 3 seconds to run\n    Sys.sleep(3)\n    # Returning the UI\n    tagList(\n      h3(\"test\"), \n      shinipsum::random_text(10)\n    )\n    \n  })\n}\n\nshinyApp(ui, server)\nlibrary(shiny)\nui <- function(){\n  tagList(\n    # Only the text input will be rendered by R\n    h3(\"test\"), \n    textOutput(\"caption\")\n  )\n}\n\nserver <- function(\n  input, \n  output, \n  session\n){\n  output$caption <- renderText({\n    # Here, we only render the text, not the whole UI\n    Sys.sleep(3)\n    shinipsum::random_text(10)\n  })\n}\n\nshinyApp(ui, server)"},{"path":"common-app-caveats.html","id":"b.-update-inputs","chapter":"15 Common Application Caveats","heading":"B. update* inputs","text":"Almost every shiny input, even custom ones packages, come update_ function allows us change input values server side, instead re-creating UI entirely.\nexample, way update content selectInput server side:switch updateSelectInput makes code easier reason selectInput : inside UI, instead another pattern use renderUI() uiOutput().\nPlus, update method, changing needed, re-generating whole input.","code":"\nlibrary(shiny)\nui <- function(){\n  tagList(\n    # We start the selectInput empty\n    selectInput(\"species\", \"Species\", choices = NULL), \n    # The selectInput will be populate \n    # when the update button is pressed\n    actionButton(\"update\", \"Update\")\n  )\n}\n\nserver <- function(\n  input, \n  output, \n  session\n){\n  observeEvent( input$update , {\n    # Update the selectInput with the species from iris\n    spc <- unique(iris$Species)\n    updateSelectInput(\n      session, \n      \"species\", \n      choices = spc, \n      selected = spc[1]\n    )\n  })\n  \n}\n\nshinyApp(ui, server)"},{"path":"common-app-caveats.html","id":"c.-insertui-and-removeui","chapter":"15 Common Application Caveats","heading":"C. insertUI and removeUI","text":"Another way dynamically change UI insertUI() removeUI().\nglobal solution seen setting reactiveValue NULL value, allows us target larger UI element: can insert remove whole input, instead DOM element inserted empty.\nmethod allows us smaller DOM: <div> rendered generated empty, simply .Two things note concerning method, though:Removing element app delete input input list. words, selectInput(\"x\", \"x\"), remove input using removeUI(), still input$x server.example, following example, input$val value removed called removeUI(selector = \"#val\").functions take jQuery selector select element UI. introduce selectors Chapter 17.","code":"\nlibrary(shiny)\nui <- function(){\n  tagList(\n    # Creating a text input that will be removed\n    #  from the UI whenever the remove button is pressed\n    textInput(\"value\", \"Value\", \"place\"),\n    actionButton(\"remove\", \"Remove UI\")\n  )\n}\n\nserver <- function(\n  input, \n  output, \n  session\n){\n  \n  observeEvent( input$remove , {\n    # When the button is pressed,\n    #  the textInput will be removed from the UI\n    removeUI(selector = \"#value\")\n  })\n  \n  observe({\n    # We observe input$value every second. \n    # You'll realize that even after the UI\n    # is removed, input$value is still available.\n    invalidateLater(1000)\n    print(input$value)\n  })\n  \n}\n\nshinyApp(ui, server)"},{"path":"common-app-caveats.html","id":"too-much-data-in-memory","chapter":"15 Common Application Caveats","heading":"15.2.2 Too much data in memory","text":"building shiny application, great chance building analyze data.\ndealing large datasets, consider deporting data handling computation external database system: example, SQL database.\n?\nsystems created handle manipulate data disk: words, allow perform operations data without clutter R memory large dataset.example, selectInput() used perform filter dataset, can filter straight inside SQL, instead bringing data R filter.\neven necessary building app large number users: example one shiny session takes 300MB, multiply number users need one session, rough estimate much RAM need.\ncontrary, reduce data manipulation done back-end, , let’s say, one database 300MB data, database size remain (less constant), RAM used shiny data manipulation, data storage.\n’s even true now almost operation can today dplyr (Wickham, François, et al. 2023) doable SQL back-end, purpose dbplyr (Wickham, Girlich, Ruiz 2023) package: translates dplyr code SQL.using database back-end seems little bit far-fetched right now, done programming languages: building web app NodeJS Python example, need interact data, nothing stored RAM: relying external database store data.\napplication used make queries database back-end.","code":""},{"path":"common-app-caveats.html","id":"reading-data","chapter":"15 Common Application Caveats","heading":"15.3 Reading data","text":"shiny applications tool choice comes analyzing data.\nalso means data imported/read point time, reading data can time consuming.\ncan optimize ?\nsection, take look three strategies: including datasets inside application, using R packages fast data reading, move external database system.","code":""},{"path":"common-app-caveats.html","id":"including-data-in-your-application","chapter":"15 Common Application Caveats","heading":"15.3.1 Including data in your application","text":"building application using golem (Fay, Guyader, Rochette, et al. 2023) framework, building application package.\nR packages provide way include internal datasets, can used objects inside app.\nsolution go data never rarely updated: datasets created package development, included inside build package.\nplus side approach makes data fast read, serialized R native objects.include data inside application, can use usethis::use_data_raw( name = \"my_dataset\", open = FALSE ) command, inside 02_dev.R script inside dev/ folder source application (building app golem).\ncreate folder called data-raw root application folder, script prepare dataset.\n, can read data, modify necessary, save usethis::use_data(my_dataset).\ndone, access my_dataset object inside application., example, done tidytuesday201942 (Fay 2023l) application, data-raw/big_epa_cars.R: CSV data read , used internal dataset inside application.","code":""},{"path":"common-app-caveats.html","id":"reading-external-datasets","chapter":"15 Common Application Caveats","heading":"15.3.2 Reading external datasets","text":"applications use data available build time: created analyze data uploaded users, maybe fetched external service using app (example, calling API).\nbuilding application “user data” use case, first thing need provide users way upload dataset: shiny::fileInput().One crucial thing keep mind comes using user-uploaded files () strict way handle files:Always specify type file want: shiny::fileInput() accept parameter allows set one MIME types extensions. using argument (example, text/csv, .csv, .xlsx), user able select subset files computer: ones match type.Always perform checks file uploaded, even tabular data: column type, naming, empty rows, etc. check file potential errors, less application likely fail analyze uploaded dataset.data reading takes , forget add visual progression cue: shiny::withProgress() tools {waiter} package.Whenever offer user possibility upload anything, can sure point, upload file make app crash.\nsetting specific MIME type series checks file uploaded, make application stable.\nFinally, visual cue “something happening” important user experience, “something happening” better knowing happening, may also prevent user clicking upload button, worse, stop using app.Now fileInput() set, read data fast possible?\nseveral options depending type data reading.\npackages can make file reading faster:tabular, flat dataset (typically csv, tsv, text), vroom (Hester, Wickham, Bryan 2023) can read data 1.40 GB/sec speed. fread() function data.table (Dowle Srinivasan 2023) also fast reading delimited files.JSON files, jsonlite (Ooms 2014). recently, {RcppSimdJSON} (Eddelbuettel, Knapp, Lemire 2023), binding simdjson C++ library.need read Excel files inside app, readxl (Wickham Bryan 2023) offers binding RapidXML C++ library, reads Excel files fast.files exported statistical software (SAS, SPSS, etc.) can read using either foreign (R Core Team 2022) haven (Wickham, Miller, Smith 2023) packages.","code":""},{"path":"common-app-caveats.html","id":"using-external-databases","chapter":"15 Common Application Caveats","heading":"15.3.3 Using external databases","text":"Another type data analyzed shiny application data contained inside external database.\nDatabases heavily used data science world software engineering whole.\nDatabases come APIs drivers help retrieve transfer data: SQL, NoSQL, even graph.Using database one solutions making app smaller efficient long run, especially need scale app thousands visitors.\nIndeed, plan app scale numerous people, mean lot R processes triggered. data contained app, mean R process take significant amount RAM dataset large.\nexample, dataset alone takes ~300 MB RAM, means want launch app 10 times, need ~3GB RAM.\nhand, decide switch data external database, lower global RAM need: DB take 300MB data, shiny application make request database.\ninstance, database needs 300MB, one shiny app 50MB, 10 apps 300MB (DB) + 50MB * 10 (10 apps).\npractice, things considered: making database requests can computationally expensive, might need network adjustments, get idea.one choose database back-end?\nWell, first need see available environment application deployed: maybe company building application already database servers deployed.\never free choose database back-end, choice driven kind operations want make databases.\nexample, SQL databases designed store tabular data, tend fast comes reading data: one large data.frames want use inside application, specific update data, SQL back-end can perfect choice.\nhand, NoSQL database like MongoDB faster comes write operations, can store kind object: example, hexmake can use MongoDB back-end store RDS files.\ncomes price: read calls little bit slower, might work little bit handling JSON results come MongoDB.\nAnother example app uses external database {databasedemo}, available engineering-shiny.org/databasedemo/.\nFeel free follow link information application!Covering available types databases packages associated , large topic: dozens database systems, many () packages interact .\nextensive coverage using databases R, please follow resources:Databases using R, official RStudio documentation around databases R.Databases using R, official RStudio documentation around databases R.colinfay/r-db, Docker image bundles toolchain lot database systems R.colinfay/r-db, Docker image bundles toolchain lot database systems R.CRAN Task View: Databases R: official task view CRAN series packages database manipulationCRAN Task View: Databases R: official task view CRAN series packages database manipulation","code":""},{"path":"common-app-caveats.html","id":"data-source-checklist","chapter":"15 Common Application Caveats","heading":"15.3.4 Data-source checklist","text":"choose three methodologies:","code":""},{"path":"optimizing-shiny-code.html","id":"optimizing-shiny-code","chapter":"16 Optimizing {shiny} Code","heading":"16 Optimizing {shiny} Code","text":"","code":""},{"path":"optimizing-shiny-code.html","id":"optimizing-r-code","chapter":"16 Optimizing {shiny} Code","heading":"16.1 Optimizing R code","text":"core, shiny runs R code server side.\nefficient, R code computing values returning results also optimized.Optimizing R code broad topic, possible write full book .\nfact, lot books blog posts already cover topic.\nInstead re-writing books, try point crucial resources can refer want get started optimizing R code.Efficient R programming (Gillespie Lovelace 2017), series methods can quickly put practice efficient R code.Efficient R programming (Gillespie Lovelace 2017), series methods can quickly put practice efficient R code.Advanced R (Wickham 2019) chapter optimizing R code (number 24).\nrest chapter, focusing optimize shiny specifically.Advanced R (Wickham 2019) chapter optimizing R code (number 24).\nrest chapter, focusing optimize shiny specifically.","code":""},{"path":"optimizing-shiny-code.html","id":"caching-elements","chapter":"16 Optimizing {shiny} Code","heading":"16.2 Caching elements","text":"","code":""},{"path":"optimizing-shiny-code.html","id":"what-is-caching","chapter":"16 Optimizing {shiny} Code","heading":"16.2.1 What is caching?","text":"Caching process storing resources-intensive results needed , program can reuse result another time without redo computation .\nparticularly useful computation always return result, never used expect result vary one function call .work?\nLet’s make brief parallel human brain, imagine know need use phone number many times day, purpose thought experiment, completely unable remember .61\ngoing ?\ntwo solutions : either look phone book phone contact list every time need , takes couple seconds every time, use post-put computer screen number , direct access need .\ntakes couple seconds first time look number, almost instantaneous next times need .caching : stores result expensive computation, next time need information , can read result instead redoing full computation.\ndownside limited space screen: screen covered sticky notes, store notes.62In context interactive application built shiny, makes sense cache data structures: users tend repeat , go back forth parameters.\nexample, graph taking 2 seconds render (quite common shiny, notably relying ggplot2 (Wickham, Chang, et al. 2023)), want 2 seconds repeated users switch one parameter another.\ncase, make sense cache result: call ploting_function(input$selection) twice value input$selection, sure plot every time, can cache .\nwords, instead recomputing graph input$selection change, can cache plot first time generated, application read cache instead re-computation.goes queries database: query done parameters, know return result, need ask database —ask cache retrieve data.Keep mind caching mechanism used data don’t change.\nexample, calling database updated regular basis, might want cache results function.\nspecific case, want query performed every time function called, get fresh data.","code":""},{"path":"optimizing-shiny-code.html","id":"native-caching-in-r","chapter":"16 Optimizing {shiny} Code","heading":"16.2.2 Native caching in R","text":"least two packages R implement caching functions (also called memoization): R.cache (Bengtsson 2022), memoise (Wickham et al. 2021).\nless work way: call memoization function another function, cache created function output, based arguments value.\nevery time call function parameters, cache returned instead computing function another time.\nexample, computing data takes 5 seconds parameter n = 50, next time calling function n = 50, instead recomputing, R go fetch value stored cache.simple example memoise:Let’s try another example might look like can find shiny app: connecting database, using DBI (R Special Interest Group Databases (R-SIG-DB), Wickham, Müller 2022) RSQLite (Müller et al. 2023) packages:Note can change cache stored memoise.\n, save random directory (production).can see, now two cache objects inside directory specified cache_filesystem.","code":"\nlibrary(memoise)\nlibrary(tictoc)\n# We define a function that sleeps for a given number of seconds, \n# then return the time \nsleep_and_return_time <- function(seconds = 1){\n  Sys.sleep(seconds)\n  return(Sys.time())\n}\n# \"Memoising\" this function\nmsleep_and_return_time <- memoise(sleep_and_return_time)\n# We use the {tictoc} package to count the time to run the code\ntic()\n# This will sleeep for 2 seconds and return the time\nmsleep_and_return_time(2)[1] \"2024-03-12 15:52:10 UTC\"\n# The code should have taken around 2 seconds to run\ntoc()2.005 sec elapsed\n# We launch a new recording\ntic()\n# This memoised function will return immediately, \n# without sleeping\nmsleep_and_return_time(2)[1] \"2024-03-12 15:52:10 UTC\"\ntoc()0.034 sec elapsed\n# We create an in-memory database using SQLite\ncon <- DBI::dbConnect(\n  RSQLite::SQLite(), \n  dbname = \":memory:\"\n)\n\n# Writing a large dataset to the db\nDBI::dbWriteTable(\n  con, \n  \"diams\", \n  # This table will have 539400 rows\n  dplyr::bind_rows(\n    purrr::rerun(10, ggplot2::diamonds)\n  )\n)\n\n# We memoise the dbGetQuery,\n#  so that every time this function is called with\n# the same parameters, \n# the SQL query is not actually run,\n#  but the results are fetched from the cache \nm_get_query <- memoise(DBI::dbGetQuery)\n# We call a function the first time, \n# with the connection object and an SQL query\ntic()\nres_a <- m_get_query(\n  con, \n  \"SELECT * FROM diams WHERE cut = 'Ideal'\"\n)\ntoc()1.251 sec elapsed\n# We call this function a second time, \n# with the same parameters\ntic()\nres_b <- m_get_query(\n  con, \n  \"SELECT * FROM diams WHERE cut = 'Ideal'\"\n)\ntoc()0.005 sec elapsed\n# Let's check that the two are equal\nsetequal(res_a, res_b)[1] TRUE\n# We now try with a new SQL code (cut = 'Good')\ntic()\nres_c <- m_get_query(\n  con, \n  \"SELECT * FROM diams WHERE cut = 'Good'\"\n)\ntoc()0.384 sec elapsed\n# The function has effectively returned a different result\nsetequal(res_a, res_c)[1] FALSE\nrandom_dir <- fs::path(\n  paste(\n    sample(\n      letters, \n      10\n    ), \n    collapse = \"\"\n  )\n)\nrandom_dirxawcubtjzp\n# We create a directory in the current working directory\nfs::dir_create(random_dir)\n# We use this directory as the cache_filesystem for {memoise}\nlocal_cache_folder <- cache_filesystem(random_dir)\n# The memoised function will use this directory for cache\nm_get_query <- memoise(\n  DBI::dbGetQuery, \n  cache = local_cache_folder\n)\n# Run the function twice\nres_a <- m_get_query(\n  con,\n  \"SELECT * FROM diams WHERE cut = 'Ideal'\"\n)\nres_b <- m_get_query(\n  con,\n  \"SELECT * FROM diams WHERE cut = 'Good'\"\n)\nres_c <- m_get_query(\n  con, \n  \"SELECT * FROM diams WHERE cut = 'Good'\"\n)\n# The random directory now contains two objects, \n# one for each memoized call\nfs::dir_tree(random_dir)xawcubtjzp\n├── 3764a0a4950cb30b\n└── c295e060ea7d77c1"},{"path":"optimizing-shiny-code.html","id":"caching-in-shiny","chapter":"16 Optimizing {shiny} Code","heading":"16.2.3 Caching in {shiny}","text":"can apply just seen memoise, example, render table:, can used app:see first time run piece code, take couple seconds render table new input$cut value.\nre-select input second time, output show instantaneously.Since version 1.6.0, shiny (Chang et al. 2022) two caching functions: renderCachedPlot() bindCache()\n(note renderCachedPlot() shiny since version 1.2.0).renderCachedPlot() behaves less like renderPlot() function, except tailored caching.\nextra arguments find cacheKeyExpr sizePolicy: former list inputs values allow cache plot—every time values inputs , produce graph, shiny fetching inside cache instead computing value another time.\nsizePolicy function returns width height, used round plot dimension pixels, every pixel combination generated cache.good news converting existing renderPlot() functions renderCachedPlot() pretty straightforward cases: take current renderPlot(), add cache keys.63Here example:try app, first rendering three plots take little bit time, every subsequent rendering plot almost instantaneous.bindCache(), new function version 1.6.0, offers general approach, can cache reactive expression.Caching nice way make app faster, even expect output stable time: plot created series inputs stays throughout app lifecycle, worth thinking implementing -disk caching.\nmemoise, can also use remote caching, form Amazon S3 storage Google Cloud Storage.\nSee also {bank} package database caching shiny expressions.application needs “fresh” data every time used, example data SQL database updated every hour, cache much help .\ncontrary, function inputs render different output depending called.One thing remember , just like computer screen phone number example , unlimited space comes cache storage: storing large amount cache take space disk.example, stored cache :Managing cache system level vast, fascinating topic cover , note commonly accepted rule deleting cache called LRU, Least Recently Used.\nunderlying principle approach users tend need needed recently: hence piece data used recently, likely needed soon.\ncan retrieved :Hence, using cache, might interesting periodically remove oldest used cache, can regain space server running application.","code":"\nlibrary(memoise)\n# We create an in-memory database using SQLite\ncon <- DBI::dbConnect(\n  RSQLite::SQLite(), \n  dbname = \":memory:\"\n)\n\n# Writing a large dataset to the db\nDBI::dbWriteTable(\n  con, \n  \"diams\", \n  # This table will have 539400 rows\n  dplyr::bind_rows(\n    purrr::rerun(10, ggplot2::diamonds)\n  )\n)Warning: `rerun()` was deprecated in purrr 1.0.0.\nℹ Please use `map()` instead.\n  # Previously\n  rerun(10, ggplot2::diamonds)\n\n  # Now\n  map(1:10, ~ ggplot2::diamonds)\nThis warning is displayed once every 8 hours.\nCall `lifecycle::last_lifecycle_warnings()` to see\nwhere this warning was generated.\nfct_sql <- function(cut, con){\n  # NEVER EVER SPRINTF AN SQL CODE LIKE THAT\n  # IT'S SENSITIVE TO SQL INJECTIONS, WE'RE\n  # DOING IT FOR THE EXAMPLE\n  cli::cat_rule(\"Calling the SQL db\")\n  results <- DBI::dbGetQuery(\n    con, sprintf(\n      \"SELECT * FROM diams WHERE cut = '%s'\", \n      cut\n    )\n  ) \n  head(results)\n}\n\n# Using a local cache\ncache_dir <- cache_filesystem(\"cache\")\nmemoised_fct_sql <- memoise(fct_sql, cache = cache_dir)\nlibrary(shiny)\nui <- function(){\n  tagList(\n    # The user can select one of the cut from ggplot2::diamonds,  \n    # {shiny} will then query the SQL database to retrieve the \n    # first rows of the result\n    selectInput(\"cut\", \"cut\", unique(ggplot2::diamonds$cut)),\n    tableOutput(\"tbl\")\n  )\n}\n\nserver <- function(\n  input, \n  output, \n  session\n){\n  \n  # Rendering the table of the SQL call\n  output$tbl <- renderTable({\n    # Using a memoised function allows to prevent from \n    # calling the SQL database every time the user inputs\n    # a change\n    memoised_fct_sql(input$cut, con)\n  })\n  \n}\n\nshinyApp(ui, server)\nlibrary(shiny)\nui <- function(){\n  tagList(\n    # We select a data.frame to plot\n    selectInput(\n      \"tbl\", \n      \"Table\", \n      c(\"iris\", \"mtcars\", \"airquality\")\n    ),\n    # This plotOutput will be cached\n    plotOutput(\"plot\")\n  )\n}\n\nserver <- function(\n  input, \n  output, \n  session\n){\n  \n  # The cache mechanism is made available by renderCachedPlot\n  output$plot <- renderCachedPlot({\n    # Plotting the selected data.frame\n    plot( get(input$tbl) )\n  }, cacheKeyExpr = {\n    # List here all the reactive expression that will \n    # be used as cache key when running the app, \n    # you will see that the first time you plot one \n    # graph, it takes a couple of seconds, \n    # but the second time, it's almost \n    # instantaneous\n    input$tbl\n  })\n  \n}\n\nshinyApp(ui, server)\nlibrary(shiny)\nui <- function(){\n  tagList(\n    # Select a number of row to sample from mtcars\n    sliderInput(\n      \"nrows\", \n      \"Number of rows\", \n      1, \n      nrow(mtcars), \n      10\n    ),\n    tableOutput(\"tbl\")\n  )\n}\n\nserver <- function(\n  input, \n  output, \n  session\n){\n  \n  # The random sample will always be the same\n  # Whenever input$nrows is the same\n  output$tbl <- renderTable({\n    dplyr::sample_n(mtcars, input$nrows)\n  }) %>%\n    bindCache({\n      input$nrows\n    })\n}\n\nshinyApp(ui, server)\ndir_i <- fs::dir_info(\"cache\")[, \"size\", drop  = FALSE] \nhead(dir_i)# A tibble: 6 × 1\n         size\n  <fs::bytes>\n1         954\n2         440\n3         406\n4         939\n5         407\n6         922\ndir_at <- fs::dir_info(\"cache\")[, \"access_time\", drop  = FALSE]\nhead(dir_at)# A tibble: 6 × 1\n  access_time        \n  <dttm>             \n1 2024-03-12 15:47:36\n2 2024-03-12 15:47:36\n3 2024-03-12 15:47:36\n4 2024-03-12 15:47:36\n5 2024-03-12 15:47:36\n6 2024-03-12 15:47:36"},{"path":"optimizing-shiny-code.html","id":"asynchronous-in-shiny","chapter":"16 Optimizing {shiny} Code","heading":"16.3 Asynchronous in {shiny}","text":"One drawbacks shiny running top R, single threaded, meaning computation run sequence, one .\nWell, least natively, methods emerged run pieces code parallel.","code":""},{"path":"optimizing-shiny-code.html","id":"how-to","chapter":"16 Optimizing {shiny} Code","heading":"16.3.1 How to","text":"launch code blocks parallel, use combination two packages, future (Bengtsson 2023) promises (Cheng 2021), reactiveValue().\nfuture R package whose main purpose allow users send code run elsewhere, .e. another session, thread, even another machine.\npromises, hand, package providing structure handling asynchronous programming R.64","code":""},{"path":"optimizing-shiny-code.html","id":"a.-asynchronous-for-cross-sessions-availability","chapter":"16 Optimizing {shiny} Code","heading":"A. Asynchronous for cross-sessions availability","text":"first type asynchronous programming shiny allows non-blocking programming cross-session context.\nwords, programming method useful context running one shiny session accessed multiple users.\nNatively, shiny, user1 launches 15-seconds computation, user2 wait computation finish launching 15-seconds computation, user3 wait 15 seconds user1 plus 15 seconds user, etc.future promises, long computation sent run somewhere else, user1 launches 15-seconds computation, blocking R process user2 user3.work?65\npromises comes two operators useful case, %...>% %...!%: first “happens future() solved?” (.e. computation future() completed), second “happens future() fails?” (.e. future() returns error).example using skeleton:run console, see access R console directly launching code.\ncouple seconds later (little bit 3), result rnorm(5) printed console.Note can also write one-line function . parameter, instead building full anonymous function (use notation rest chapter):Let’s port shiny:run , seem like revolution: trust us, Sys.sleep() blocking allows users launch computation moment.","code":"\nlibrary(future)\nlibrary(promises)\n# We're opening several R session (future specific)\nplan(multisession) \n# We send our code to be run in another session\nfuture({\n  Sys.sleep(3)\n  return(rnorm(5))\n}) %...>% (\n  # When the code is returned, we print the result\n  function(result){\n    print(result)\n  }\n) %...!% (\n  # If ever the code from the future() returns an error, \n  # we throw an error to the console\n  function(error){\n    stop(error)\n  }\n)\nlibrary(future)\nlibrary(promises)\nplan(multisession)\n# Same code as before, using the anonymous notation\nfuture({\n  Sys.sleep(15)\n  return(rnorm(5))\n}) %...>% \n  print(.) %...!% \n  stop(.)\nlibrary(shiny)\nlibrary(future)\nlibrary(promises)\nplan(multisession)\nui <- function(){\n  tagList(\n    # This will receive the output of the future\n    verbatimTextOutput(\"rnorm\")\n  )\n}\n\nserver <- function(\n  input, \n  output, \n  session\n){\n  output$rnorm <- renderPrint({\n    # Sending the rnorm to be run in another session\n    future({\n      Sys.sleep(3)\n      return(rnorm(5))\n    }) %...>% \n      print(.) %...!% \n      stop(.)\n  })\n}\n\nshinyApp(ui, server)"},{"path":"optimizing-shiny-code.html","id":"b.-inner-session-asynchronicity","chapter":"16 Optimizing {shiny} Code","heading":"B. Inner-session asynchronicity","text":"previous section, implemented cross-session asynchronicity, meaning code non-blocking, two users access app: code still blocking inner-session level.\nwords, code renderPrint() still block rest app single user.Let’s look code:, expect plot available rnorm(), : promises still blocking inner-session level, elements still rendered sequentially.\nbypass , need use reactiveValue() structure.Let’s detail code step--step:rv <- reactiveValues creates reactiveValue() contain NULL, serve content renderPrint() future() resolved.\ninitiated NULL renderPrint() silent launch.rv <- reactiveValues creates reactiveValue() contain NULL, serve content renderPrint() future() resolved.\ninitiated NULL renderPrint() silent launch.%...>% rv$output <- result %...!% promises structure seen .%...>% rv$output <- result %...!% promises structure seen .%...!% (function(error){ rv$output <- NULL ; warning(e) }) happens future({}) fails: setting rv$res value back NULL renderPrint() fail prints error case failure.%...!% (function(error){ rv$output <- NULL ; warning(e) }) happens future({}) fails: setting rv$res value back NULL renderPrint() fail prints error case failure.","code":"\nlibrary(shiny)\nui <- function(){\n  tagList(\n    # This will receive the output of the future\n    verbatimTextOutput(\"rnorm\"),\n    # This plot will only be drawn when the future \n    # is resolved\n    plotOutput(\"plot\")\n  )\n}\n\nserver <- function(\n  input, \n  output, \n  session\n){\n  output$rnorm <- renderPrint({\n    # Sending the rnorm to be run in another session\n    # At this point, {shiny} is waiting for the future\n    # to be solved before doing anything else\n    future({\n      Sys.sleep(3)\n      return(rnorm(5))\n    }) %...>% \n      print(.) %...!% \n      stop(.)\n  })\n  \n  # This plot will only be drawn once the future is resolved\n  output$plot <- renderPlot({\n    plot(iris)\n  })\n}\n\nshinyApp(ui, server)\nlibrary(shiny)\nlibrary(promises)\nlibrary(future)\nplan(multisession)\n\nui <- function(){\n  tagList(\n    # This will receive the output of the future\n    verbatimTextOutput(\"rnorm\"),\n    # This plot will be drawn before the future is resolved\n    plotOutput(\"plot\")\n  )\n}\nserver <- function(\n  input, \n  output, \n  session\n) {\n  \n  # Initiating a reactiveValues that will receive the \n  # results from the future\n  rv <- reactiveValues(\n    output = NULL\n  )\n  \n  future({\n    Sys.sleep(5)\n    rnorm(5)\n  }) %...>%\n    # When the future is resolved, we assign the\n    # output to rv$output\n    (function(result){\n      rv$output <- result\n    }) %...!%\n    # If ever the future outputs an error, we switch\n    # back to NULL for rv$output, and throw a warning\n    # with the error\n    (function(error){\n      rv$output <- NULL\n      warning(error)\n    })\n  \n  # output$rnorm will be printed whenever rv$output\n  # is available (i.e. after around 5 seconds)\n  output$rnorm <- renderPrint({\n    req(rv$output)\n  })\n  \n  # output$plot will be drawn immediately\n  output$plot <- renderPlot({\n    plot(iris)\n  })\n}\n\nshinyApp(ui, server)"},{"path":"optimizing-shiny-code.html","id":"c.-potential-pitfalls-of-asynchronous-shiny","chapter":"16 Optimizing {shiny} Code","heading":"C. Potential pitfalls of asynchronous {shiny}","text":"one thing aware plan using async methodology: sequential context anymore.\nHence, first future({}) send necessarily first get back.\nexample, send SQL requests run asynchronously call takes 1 10 seconds return, chance first request return last one sent.\nhandle , can adopt two different strategies, depending need:need last expression sent. words, send three expressions evaluated somewhere, need get back last one.\nhandle , best way id also sent future, future comes back, check id one expecting. , update reactiveValues(). , ignore .need treat outputs order received. case, instead waiting last input, need build structure receive output, check output “next line”, store , return , see another output queue. type implementation little bit complex, detail full implementation chapter, small example using liteq (Csárdi 2019).example application built using {promise} future, feel free browse engineering-shiny.org/shinyfuture/: find example blocking non-blocking processes.","code":"\nlibrary(shiny)\nlibrary(promises)\nlibrary(future)\nplan(multisession)\n\nui <- function(){\n  tagList(\n    # This button trigger a future, we can click several times\n    # on it when the app is running\n    actionButton(\"go\", \"go\"),\n    # This will receive the output of the future\n    verbatimTextOutput(\"rnorm\"),\n    # This plot will be drawn before the future is resolved\n    plotOutput(\"plot\")\n  )\n}\n\nserver <- function(\n  input, \n  output, \n  session\n) {\n  \n  # In our reactiveValues, we also keep track\n  # of the latest sent id\n  rv <- reactiveValues(\n    res = NULL, \n    last_id = 0\n  )\n  \n  \n  observeEvent( input$go , {\n    # When the user clicks on the button, the last_id\n    # is incremented of one\n    rv$last_id <- rv$last_id + 1\n    last_id <- rv$last_id\n    \n    # We send the code to be run in the future. One out of \n    # two calls will sleep for 3 seconds\n    future({\n      if (last_id %% 2 == 0){\n        Sys.sleep(3)\n      }\n      # We return from the future the id of the current \n      # code block\n      list(\n        id = last_id,\n        res = rnorm(5)\n      )\n    }) %...>%\n      (function(result){\n        # Printing to the console which future\n        # we are coming from\n        cli::cat_rule(\n          sprintf(\"Back from %s\", result$id)\n        )\n        # Change the value of `rv$res` only if \n        # the current id is the same as the last_id\n        if (result$id == rv$last_id){\n          rv$res <- result$res\n        }\n      }) %...!%\n      (function(error){\n        warning(error)\n      })\n    # Note that every render() function should return\n    #  something: here it will only work if the \n    #  renderPrint() returns a value, even if \n    # invisible. We use cat_rule to simulate that.\n    cli::cat_rule(\n      sprintf(\"%s sent\", rv$last_id)\n    )\n  })\n  \n  # output$rnorm will be printed whenever rv$output\n  # is available, i.e. returned from the future\n  #  and the last one sent.\n  output$rnorm <- renderPrint({\n    req(rv$res)\n  })\n  \n  # output$plot will be drawn immediately\n  output$plot <- renderPlot({\n    plot(iris)\n  })\n}\n\nshinyApp(ui, server)\nlibrary(promises)\nlibrary(future)\nplan(multisession)\n\nlibrary(liteq)\n# We create a small db in a tempfile()\ntemp_queue <- tempfile()\nqueue <- ensure_queue(\"jobs\", db = temp_queue)\nfor (i in 1:5){\n  future({\n    # Faking a random computation time\n    Sys.sleep( sample(1:5, 1) )\n    return(\n      list(\n        id = i,\n        res = rnorm(5)\n      )\n    )\n  }) %...>% \n    # Whenever we receive an output, we add it to \n    # the queue database\n    (function(results){\n      publish(\n        queue, \n        title = as.character(results$i), \n        message = paste(\n          results$res, \n          collapse = \",\"\n        )\n      )\n    }) %...!% \n    # If ever we have an error, we return it as a warning\n    warning(.)\n}\nSys.sleep(10)\n# List the messages. As you can see, the entries in title\n# are not in numerical order because they didn't came back\n# in the same order as they were sent\nlist_messages(queue)  id title status\n1  1     3  READY\n2  2     4  READY\n3  3     2  READY\n4  4     1  READY\n5  5     5  READY"},{"path":"using-javascript.html","id":"using-javascript","chapter":"17 Using JavaScript","heading":"17 Using JavaScript","text":"","code":""},{"path":"using-javascript.html","id":"prelude","chapter":"17 Using JavaScript","heading":"Prelude","text":"Note can build successful, production-grade shiny(Chang et al. 2022) application without ever writing single line JavaScript code.\nEven can use lot tools already bundle JavaScript functionalities: great example shinyjs (Attali 2021), allows interact application using JavaScript, without writing single line JavaScript.chose include chapter book help get better understanding shiny works core, show getting ease JavaScript can help get better building web applications using R long run.\ncan also help extend shiny JavaScript libraries, example, using htmlwidgets (Vaidyanathan et al. 2023), get better writing JavaScript.said, note also every inclusion external JavaScript code library can present security risk application, don’t include code don’t know/understand application unless sure .\nrule thumb, always go existing tested solution need JavaScript widgets/functionalities, instead trying implement .","code":""},{"path":"using-javascript.html","id":"introduction-1","chapter":"17 Using JavaScript","heading":"17.1 Introduction","text":"core, building shiny app building JavaScript application can talk R session.\nprocess invisible shiny developers, usually everything R.\nfact, shiny apps 100% written R.fact, writing UI elements shiny, actually building series HTML tags.example, simple shiny (Chang et al. 2022) code returns series HTML tags:Later , app launched, shiny binds events UI elements, JavaScript events communicate R, sense send data R, receive data R.\nhappens hood little bit complex scope book, general idea R talks browser web socket (can imagine small “phone line” software listening end, able send messages ),66 browser talks R web socket.time, JavaScript side websocket receives one events, page user sees modified (example, plot drawn).\nR end websocket, .e. R receives data web page, value fetched, something computed.’s important note communication happens directions: R JavaScript, JavaScript R.\nfact, write piece code like sliderInput(\"first_input\", \"Select number\", 1, 10, 5), creating binding JavaScript R, JavaScript runtime (browser) listens event happening slider id \"plop\", whenever detects something happens element, something (time value) sent back R, R computation based value.\noutput$bla <- renderPlot({}), making two communicate way around: telling JavaScript listen incoming data R id \"bla\", whenever JavaScript sees incoming data R, puts proper HTML tag (, JavaScript inserts image received R <img> tags id bla).Even everything written R, writing web application, .e..\nHTML, CSS JavaScript elements.\nrealized , possibilities endless: fact almost anything doable “classic” web app can done shiny little bit tweaking.\nalso implies getting (even little bit) better writing HTML, CSS, especially JavaScript make app better, smaller, user-friendly, JavaScript language designed interact web page: change element appearances, hide show things, click somewhere, show alerts prompts, etc.\nKnowing just enough JavaScript can improve quality app: especially using R render complex UIs: think conditional panels, simulating button click server, hide show elements, etc.\nthings good examples using JavaScript instead building less complex renderUI insertUI patterns server.Moreover, number JavaScript libraries available web tremendous; good news shiny everything needs bundle external JavaScript libraries inside application.67This section book aims : giving just enough JavaScript knowledge lighten shiny app, order improve global user developer experience.\nchapter, first review JavaScript basics can used “client-side” , .e. browser.\n, talk making R JS communicate , explore common patterns JavaScript shiny.\nFinally, quickly present functions available golem (Fay, Guyader, Rochette, et al. 2023) can used launch JavaScript.Note chapter try comprehensive JavaScript course. External resources linked throughout chapter end.","code":"\nfluidPage(\n  h2(\"hey\"), \n  textInput(\"act\", \"Ipt\")\n)<div class=\"container-fluid\">\n  <h2>hey<\/h2>\n  <div class=\"form-group shiny-input-container\">\n    <label class=\"control-label\" for=\"act\">Ipt<\/label>\n    <input id=\"act\" type=\"text\" class=\"form-control\" value=\"\"/>\n  <\/div>\n<\/div>"},{"path":"using-javascript.html","id":"a-quick-introduction-to-javascript","chapter":"17 Using JavaScript","heading":"17.2 A quick introduction to JavaScript","text":"","code":""},{"path":"using-javascript.html","id":"about-javascript","chapter":"17 Using JavaScript","heading":"17.2.1 About JavaScript","text":"JavaScript programming language designed work browser.68\nplay JavaScript console, fastest way open favorite web browser, open developer tools.\nGoogle Chrome, ’s available View > Developer > Developer Tools.\nopen new interface can access JavaScript console Console tab.\n, can try first JavaScript code!\nexample, can try running var message = \"Hello world\"; alert(message);.might guessed, focusing playing JavaScript browser console: want know insert JavaScript code inside shiny application.","code":""},{"path":"using-javascript.html","id":"including-javascript-code-in-your-app","chapter":"17 Using JavaScript","heading":"17.2.2 Including JavaScript code in your app","text":"three ways include JavaScript code inside web app:external file, served browser alongside main application pageInside <script> HTML tag inside pageInline, specific tag, example adding onclick event straight tagNote good practice comes including JavaScript add code inside external file.working golem, including JavaScript file achieved via two functions:golem::add_js_file(\"name\"), adds standard JavaScript file, .e. one meant used communicate R. ’ll see first part chapter add JavaScript code .golem::add_js_handler(\"name\"), creates file skeleton shiny handlers. ’ll see second type element JavaScript <-> R communication part.golem::add_js_binding(\"name\"), advanced use cases, want build custom inputs, .e. want create custom HTML element can used interact shiny. See shiny.rstudio.com/articles/js-custom-input.html information complete skeleton.OK, good, now?\nNote chapter, covering basic JavaScript object manipulation.\nFeel free refer first chapter JavaScript 4 {shiny} - Field Notes detailed introduction objects object manipulation, follow one resources linked end chapter.","code":""},{"path":"using-javascript.html","id":"understanding-html-class-and-id","chapter":"17 Using JavaScript","heading":"17.2.3 Understanding HTML, class, and id","text":"think web page tree, top web page root node, every element page node tree (tree called DOM, Document Object Model).\ncan work HTML nodes JavaScript: modify , bind events /listen events, hide show, etc.\nfirst, find way identify elements: either group elements unique element inside whole tree.\nHTML semantic elements, classes, ids made .\nConsider piece code:shiny code creates piece HTML code containing three nodes: div specific class (Bootstrap container), h2, level-two header, button id class.\nincluded div.\nLet’s detail :HTML tags, building blocks “tree”: div, h2 button HTML tags.button id, short “identifier”. Note id unique: id element allows refer exact element. context shiny, allows JavaScript R talk . example, rendering plot, sure rendered correct spot UI, hence need unique id renderPlot(). goes inputs: computing value based input value, sure value correct one.Elements can class can apply multiple elements. can used JavaScript, also useful styling elements CSS.","code":"\nlibrary(shiny)\nfluidPage(\n  titlePanel(\"Hello Shiny\"), \n   textInput(\"act\", \"Ipt\")\n)<div class=\"container-fluid\">\n  <h2>Hello Shiny<\/h2>\n  <div class=\"form-group shiny-input-container\">\n    <label class=\"control-label\" for=\"act\">Ipt<\/label>\n    <input id=\"act\" type=\"text\" class=\"form-control\" value=\"\"/>\n  <\/div>\n<\/div>"},{"path":"using-javascript.html","id":"querying-in-vanilla-javascript","chapter":"17 Using JavaScript","heading":"17.2.4 Querying in Vanilla JavaScript","text":"“Vanilla” JavaScript (.e. without external plugins installed), can query elements using methods document object.\nexample:Note methods introduced ES6, version JavaScript came 2015.\nversion JavaScript supported browsers since mid-2016 (June 2017 Firefox) (see JavaScript Versions W3Schools).\nusers now using browser version compatible ES6, something might want keep mind: browser version matters comes using JavaScript.\nIndeed, companies (internal reason) still using old versions Internet Explorer: constraint want aware starting build app, hence question want ask Design step.","code":"// Given\n<div id = \"first\" name=\"number\" class = \"widediv\">Hey<\/div>\n\n// Query with the ID\ndocument.querySelector(\"#first\")\ndocument.getElementById(\"first\")\n\n// With the class\ndocument.querySelectorAll(\".widediv\")\ndocument.getElementsByClassName(\"widediv\") \n\n// With the name attribute\ndocument.getElementsByName(\"number\") \n\n// Using the tag name\ndocument.getElementsByTagName(\"div\")"},{"path":"using-javascript.html","id":"about-dom-events","chapter":"17 Using JavaScript","heading":"17.2.5 About DOM events","text":"users navigate web page, generate events page: clicking, hovering elements, pressing keys, etc.\nevents listened JavaScript runtime, plus events generated users: example, “ready” event generated web page finished loading.\nevents linked specific node tree: example, click something, clicking node DOM.\nJavaScript events come play: event triggered JavaScript, can link “reaction”, words piece JavaScript code executed event occurs.examples events:click / dblclickclick / dblclickfocusfocuskeypress, keydown, keyupkeypress, keydown, keyupmousedown, mouseenter, mouseleave, mousemove, mouseout, mouseover, mouseupmousedown, mouseenter, mouseleave, mousemove, mouseout, mouseover, mouseupscrollscrollFor full list, please refer https://developer.mozilla.org/fr/docs/Web/Events.list mind, can select elements DOM, add addEventListener , define callback function (executed event triggered).\nexample, code adds event input key pressed, showing native alert() user.Note shiny also generates events, meaning can customize behavior application based events.\ncode launches alert shiny connected:wait, weird $()?\n’s jQuery, discover next section!","code":"<input type=\"text\" id = \"firstinput\">\n<script> \n  document.getElementById(\"firstinput\").addEventListener(\n    \"keypress\", \n    function(){\n      alert(\"Pressed!\")\n    }\n  )\n<\/script>$(document).on('shiny:connected', function(event) {\n  alert('Connected to the server'); \n}); "},{"path":"using-javascript.html","id":"about-jquery-and-jquery-selectors","chapter":"17 Using JavaScript","heading":"17.2.6 About jQuery and jQuery selectors","text":"jQuery framework natively included shiny.jQuery fast, small, feature-rich JavaScript library.\nmakes things like HTML document traversal manipulation, event handling, animation, Ajax much simpler easy--use API works across multitude browsers.jQuery home page (https://jquery.com)jQuery popular JavaScript library designed manipulate DOM, events, elements.\ncan used lot things, like hide show objects, change object classes, click somewhere, etc.\nable , comes notion selectors, put $().\ncan use, example:$(\"#firstinput\") refer element id firstinput$(\"#firstinput\") refer element id firstinput$(\".widediv\") refer element(s) class widediv$(\".widediv\") refer element(s) class widediv$(\"button:contains('')\") refer buttons text containing ''$(\"button:contains('')\") refer buttons text containing ''can also use special HTML attributes, specific tag.\nexample, following HTML code:contains href data-value attributes.\ncan refer [] tag name.$(\"[href = 'https://thinkr.fr']\") refers link(s) href https://thinkr.fr$(\"[href = 'https://thinkr.fr']\") refers link(s) href https://thinkr.fr$('[data-value=\"panel2\"]') refers link(s) data-value \"panel2\"$('[data-value=\"panel2\"]') refers link(s) data-value \"panel2\"selectors used identify one node(s) big tree web page.\nidentified elements, can either extract change data contained nodes, invoke methods contained within nodes.\nIndeed JavaScript, like R, can used functional language, done object-oriented way.\nwords, interact objects web page, objects contain data methods.Note specific jQuery: elements can also selected standard JavaScript.\njQuery advantage simplifying selections actions cross-platform library, making easier ship applications can work major browsers.\ncomes shiny free!Choosing jQuery vanilla JavaScript : rest chapter try mix syntaxes, put possible, can choose one comfortable .","code":"<a href = \"https://thinkr.fr\" data-value = \"panel2\">ThinkR<\/a>"},{"path":"using-javascript.html","id":"client-side-javascript","chapter":"17 Using JavaScript","heading":"17.3 Client-side JavaScript","text":"hard give exhaustive list can JavaScript inside shiny.\nshiny app part JavaScript, part R, good grasp JavaScript can quickly enhance applications.\nsaid, common things can done allow immediately optimize application: .e. small JavaScript functions prevent writing complex algorithmic logic application server.","code":""},{"path":"using-javascript.html","id":"common-patterns","chapter":"17 Using JavaScript","heading":"17.3.1 Common patterns","text":"alert(\"message\") uses built-alert-box mechanism user’s browser (.e., alert() function part jQuery built inside user’s browser).\nworks well relies browser instead relying R specific JavaScript library.\ncan use functionality replace call shinyalert (Attali Edwards 2021): result little less aesthetically pleasing, easier implement maintain.alert(\"message\") uses built-alert-box mechanism user’s browser (.e., alert() function part jQuery built inside user’s browser).\nworks well relies browser instead relying R specific JavaScript library.\ncan use functionality replace call shinyalert (Attali Edwards 2021): result little less aesthetically pleasing, easier implement maintain.var x = prompt(\"\", \"\"); function opens built-prompt, text area user can input text.\ncode, user clicks “OK”, text stored x variable, can send back R (see later chapter info ).\ncan replace something like following:var x = prompt(\"\", \"\"); function opens built-prompt, text area user can input text.\ncode, user clicks “OK”, text stored x variable, can send back R (see later chapter info ).\ncan replace something like following:$('#id').css('color', 'green');, vanilla JavaScript document.getElementById(\"demo\").style.color = \"green\"; changes CSS attributes selected element(s).\n, switching green #id element.$('#id').css('color', 'green');, vanilla JavaScript document.getElementById(\"demo\").style.color = \"green\"; changes CSS attributes selected element(s).\n, switching green #id element.$(\"#id\").text(\"\"), vanilla JavaScript document.getElementById(\"id\").innerText = \"\"; changes text content “”.\ncan used replace following:$(\"#id\").text(\"\"), vanilla JavaScript document.getElementById(\"id\").innerText = \"\"; changes text content “”.\ncan used replace following:$(\"#id\").remove();, vanilla JavaScript var elem = document.querySelector('#-element'); elem.parentNode.removeChild(elem); completely removes element DOM. can used replacement shiny::removeUI(), conditional UI. Note code doesn’t remove input values server side: elements disappear UI, nothing sent server side. safe implementation, see shinyjs.","code":"\n# Initiating a modalDialog that will ask the user to enter\n# some information\nmod <- function() {\n  # The modal box definition\n  modalDialog(\n    # Simple body with a textInput\n    tagList(\n      textInput(\"info\", \"Your info here\")\n    ),\n    footer = tagList(\n      modalButton(\"Cancel\"),\n      actionButton(\"ok\", \"OK\")\n    )\n  )\n}\n\n# When the user clicks on the \"show\" button in the UI, \n# the modalDialog() is displayed\nobserveEvent(input$show, {\n  showModal(mod())\n})\n\n# Whenever the \"ok\" button is clicked, the modal is removed\nobserveEvent(input$ok, {\n  print(input$info)\n  removeModal()\n})\noutput$ui <- renderUI({\n  # Conditionnal rendering of the UI\n  if (this){\n    tags$p(\"First\")\n  } else {\n    tags$p(\"Second\")\n  }\n})"},{"path":"using-javascript.html","id":"where-to-put-them-back-to-javascript-events","chapter":"17 Using JavaScript","heading":"17.3.2 Where to put them: Back to JavaScript Events","text":"OK, now ideas JS code can used shiny, put ?\nHTML JS concept called events, , well, events happen user manipulates web page: user clicks, hovers (mouse goes element), presses keys keyboard, etc.\nevents can used trigger JavaScript function.examples adding JavaScript functions DOM events:onclickThe onclick attribute can added straight inside HTML tag possible:shiny::tagAppendAttributes():, example, small shiny app implements behavior:can find real-life example tagAppendAttributes tidytuesday201942 (Fay 2023l) app:R/mod_dataviz.R#L109, clicking plot generates creation shiny input (see ), course, works well short JavaScript code.\nlonger JavaScript code, can write function inside external file, add app.\ngolem, works launching add_js_file(\"name\"), create .js file.\nJavaScript file automatically linked application., example, :inst/app/www/script.jsThen RInside inst/app/www/script.js, can also attach new behavior jQuery one several elements.\nexample, can add alertme / onclick behavior plots app:, plots app receive -click event.69Note series events specific shiny, can used just like one just seen:See JavaScript Events {shiny} full list JavaScript events available shiny.","code":"\n# Building a button using the native HTML tag \n# (i.e. not using the actionButton() function)\n# This button only goal is to launch this JS code\n# when it is clicked \ntags$button(\n  \"Show\",\n  onclick = \"$('#plot').show()\"\n)\n# Using tagAppendAttributes() allows to add attributes to the \n# outputed UI element\nplotOutput(\n  \"plot\"\n) %>% tagAppendAttributes(\n  onclick = \"alert('hello world')\"\n)\nlibrary(shiny)\nlibrary(magrittr)\nui <- function(){\n  fluidPage(\n    # We create a plotOutput, which will show an alert when \n    # it is clicked\n    plotOutput(\n      \"plot\"\n    ) %>% tagAppendAttributes(\n      onclick = \"alert('iris plot!')\"\n    )\n  )\n}\n\nserver <- function(input, output, session){\n  output$plot <- renderPlot({\n    plot(iris)\n  })\n}\n\nshinyApp(ui, server)function alertme(id){\n  // Asking information\n  var name = prompt(\"Who are you?\");\n  // Showing an alert\n  alert(\"Hello \" + name + \"! You're seeing \" + id);\n}\nplotOutput(\n  \"plot\"\n) %>% tagAppendAttributes(\n  # Calling the function which has been defined in the \n  # external script\n  onclick = \"alertme('plot')\"\n)function alertme(id){\n  var name = prompt(\"Who are you?\");\n  alert(\"Hello \" + name + \"! You're seeing \" + id);\n}\n\n/* We're adding this so that the function is launched only\nwhen the document is ready */\n$(function(){ \n  // Selecting all `{shiny}` plots\n  $(\".shiny-plot-output\").on(\"click\", function(){\n    /* Calling the alertme function with the id \n    of the clicked plot */\n    alertme(this.id);\n  });\n});// We define a function that will ask for the visitor name, and \n// then show an alert to welcome the visitor\nfunction alertme(){\n  var name = prompt(\"Who are you?\");\n  alert(\"Hello \" + name + \"! Welcome to my app\");\n}\n\n$(function(){ \n  // Waiting for `{shiny}` to be connected\n  $(document).on('shiny:connected', function(event) {\n    alertme();\n  });\n});"},{"path":"using-javascript.html","id":"javascript---shiny-communication","chapter":"17 Using JavaScript","heading":"17.4 JavaScript <-> {shiny} communication","text":"Now seen client-side optimization, .e.\nR anything events happen (fact R even aware happened), let’s now see can make two communicate .","code":""},{"path":"using-javascript.html","id":"from-r-to-javascript","chapter":"17 Using JavaScript","heading":"17.4.1 From R to JavaScript","text":"Calling JS server side (.e. R) done defining series CustomMessageHandler functions: functions one argument can called using session$sendCustomMessage() method server side.\nusing golem, using invoke_js() function.can define using skeleton:skeleton one golem::add_js_handler(\"first_handler\")., can called server side :Note list() argument function converted JSON, read JavaScript.\nwords, argument called x, call function list(= 1, b = 12), JavaScript able use x.x.b.example:inst/app/www/script.js:R:","code":"$( document ).ready(function() {\n  Shiny.addCustomMessageHandler('fun', function(arg) {\n \n  })\n});\nsession$sendCustomMessage(\"fun\", list())\n# OR\ngolem::invoke_js(\"fun\", ...)// We define a handler called \"computed\", that can be called \n// from the server side of the {shiny} application\nShiny.addCustomMessageHandler('computed', function(mess) {\n  // The received value (in mess) is serialized in JSON, \n  // so we can  access the list element with object.name\n  alert(\"Computed \" + mess.what + \" in \" + mess.sec + \" secs\");\n})\nobserve({\n  # Register the starting time\n  deb <- Sys.time()\n  # Mimic a long computation\n  Sys.sleep(\n    sample(1:5, 1)\n  )\n  # Calling the computed handler\n  golem::invoke_js(\n    \"computed\", \n    # We send a list, that will be turned into JSON\n    list(\n      what = \"time\", \n      sec = round(Sys.time() - deb)\n    )\n  )\n})"},{"path":"using-javascript.html","id":"from-javascript-to-r","chapter":"17 Using JavaScript","heading":"17.4.2 From JavaScript to R","text":"can opposite (JavaScript R)?\nshiny apps, browser, contain object called Shiny, may used send values R creating InputValue.\nexample, :bind input can caught server side :Shiny.setInputValue70 can, course, used inside JavaScript function.\nsmall example wraps things seen previously:inst/app/www/script.jsThese events (getting user name last plot clicked), can caught server side :give:Important note: using modules, need pass namespacing id able get back server.\ncan done using session$ns function, comes default golem-generated module.\nwords, need write something like following:","code":"// This function from the Shiny JavaScript object\n// Allows to register an input name, and a value\nShiny.setInputValue(\"rand\", Math.random())\n# Once the input is set, it can be caught with R using:\nobserveEvent( input$rand , {\n  print( input$rand )\n})function alertme(){\n  var name = prompt(\"Who are you?\");\n  alert(\"Hello \" + name + \"! Welcome to my app\");\n  Shiny.setInputValue(\"username\", name)\n}\n\n$(function(){ \n  // Waiting for `{shiny}` to be connected\n  $(document).on('shiny:connected', function(event) {\n    alertme();\n  });\n  \n  $(\".shiny-plot-output\").on(\"click\", function(){\n    /* Calling the alertme function with the id \n    of the clicked plot. \n    The `this` object here refers to the clicked element*/\n    Shiny.setInputValue(\"last_plot_clicked\", this.id);\n  });\n});\n# We wait for the output of alertme(), which will set the\n# \"username\" input value\nobserveEvent( input$username , {\n  cli::cat_rule(\"User name:\")\n  print(input$username)\n})\n\n# This will print the id of the last clicked plot\nobserveEvent( input$last_plot_clicked , {\n  cli::cat_rule(\"Last plot clicked:\")\n  print(input$last_plot_clicked)\n})> golex::run_app()\nLoading required package: shiny\n\nListening on http://127.0.0.1:5495\n── User name: ─────────────────────────────────────────────────────\n[1] \"Colin\"\n── Last plot clicked: ─────────────────────────────────────────────\n[1] \"plota\"\n── Last plot clicked: ─────────────────────────────────────────────\n[1] \"plotb\"$( document ).ready(function() {\n  // Setting a custom handler that will\n  // ask the users their name\n  // then set the returned value to a Shiny input\n  Shiny.addCustomMessageHandler('whoareyou', function(arg) {\n    var name = prompt(\"Who are you?\")\n    Shiny.setInputValue(arg.id, name);\n  })\n});\nmod_my_first_module_ui <- function(id){\n  ns <- NS(id)\n  tagList(\n    actionButton(\n      ns(\"showname\"), \"Enter your name\"\n    )\n  )\n}\n\nmod_my_first_module_server <- function(input, output, session){\n  ns <- session$ns\n  # Whenever the button is clicked, \n  # we call the CustomMessageHandler\n  observeEvent( input$showname , {\n    # Calling the \"whoareyou\" handler\n    golem::invoke_js(\n      \"whoareyou\", \n      # The id is namespaced, \n      # so that we get it back on the server-side\n      list(\n        id = ns(\"name\")\n      )\n    )\n  })\n  \n  # Waiting for input$name to  be set with JavaScript\n  observeEvent( input$name , {\n    cli::cat_rule(\"Username is:\")\n    print(input$name)\n  })\n}"},{"path":"using-javascript.html","id":"about-shinyjs-js-functions","chapter":"17 Using JavaScript","heading":"17.5 About {shinyjs} JS functions","text":"said introduction chapter, running JavaScript code don’t fully control/understand can tricky might open doors external attacks.\nmany cases, common JavaScript manipulations, ’s safer go package already proved efficient: shinyjs.package, licensed MIT since version 2.0.0, can used perform common JavaScript tasks: show, hide, alert, click, etc.See deanattali.com/shinyjs/ information use package.","code":""},{"path":"using-javascript.html","id":"one-last-thing-api-calls","chapter":"17 Using JavaScript","heading":"17.6 One last thing: API calls","text":"application uses API calls, chances right now straight R.\ndownsides approach.\nNotably, API limits requests based IP application gets lot traffic, users end unable use app restriction., switch writing API calls JavaScript?\nJavaScript run inside user’s browser, limitation apply user’s IPs, one application deployed, allowing easily scale application.can write API call using fetch() JavaScript function.\ncan used inside shiny JavaScript handler, response DOM event (example, tags$button(\"Get One!\", onclick = \"get_rand_beer()\"), see ).general skeleton work API need authentication returns JSON.Inside JavaScript (, create function available onclick event)Observe event server:Note data shared R JavaScript serialized JSON, manipulate format receive R.Learn fetch() Using Fetch.","code":"// FUNCTION definition\nconst get_rand_beer = () => {\n  // Fetching the data\n  fetch(\"https://api.punkapi.com/v2/beers/random\")\n  // What do we do when we receive the data\n  .then((data) =>{\n  // TTurn the data to JSON\n    data.json().then((res) => {\n    // Send the json to R\n      Shiny.setInputValue(\"beer\", res, {priority: 'event'})\n    })\n  })\n  // Define what happens if we fail to fetch\n  .catch((error) => {\n      alert(\"Error catching result from API\")\n  })\n};\nobserveEvent( input$beer , {\n  # Do things with beer\n})"},{"path":"using-javascript.html","id":"learn-more-about-javascript","chapter":"17 Using JavaScript","heading":"17.7 Learn more about JavaScript","text":"want interact straight R NodeJS (JavaScript terminal), can try {bubble} (Fay 2023b) package.\naware need working NodeJS installation machine.can installed GitHubYou can use RMarkdown chunks setting knitr engine:straight command line :Want learn ?\nlist external resources learn JavaScript:","code":"\nremotes::install_github(\"ColinFay/bubble\")\nbubble::set_node_engine()\nnode_repl()"},{"path":"using-javascript.html","id":"shiny-and-javascript","chapter":"17 Using JavaScript","heading":"17.7.1 {shiny} and JavaScript","text":"written online, freely available book shiny JavaScript: JavaScript 4 {shiny} - Field Notes.written online, freely available book shiny JavaScript: JavaScript 4 {shiny} - Field Notes.JavaScript {shiny} Users, companion website rstudio::conf(2020) workshop.JavaScript {shiny} Users, companion website rstudio::conf(2020) workshop.Build custom input objects.Build custom input objects.Packaging JavaScript code {shiny}.Packaging JavaScript code {shiny}.Communicating {shiny} via JavaScript.Communicating {shiny} via JavaScript.","code":""},{"path":"using-javascript.html","id":"javascript-basics","chapter":"17 Using JavaScript","heading":"17.7.2 JavaScript basics","text":"Mozilla JavaScriptw3schools JavaScriptFree Code CampJavaScript CatsLearn JS","code":""},{"path":"using-javascript.html","id":"jquery","chapter":"17 Using JavaScript","heading":"17.7.3 jQuery","text":"jQuery Learning Centerw3schools jQuery","code":""},{"path":"using-javascript.html","id":"intermediateadvanced-javascript","chapter":"17 Using JavaScript","heading":"17.7.4 Intermediate/advanced JavaScript","text":"Eloquent JavaScriptYou Don’t Know JS Yet","code":""},{"path":"css.html","id":"css","chapter":"18 A Gentle Introduction to CSS","heading":"18 A Gentle Introduction to CSS","text":"","code":""},{"path":"css.html","id":"what-is-css","chapter":"18 A Gentle Introduction to CSS","heading":"18.1 What is CSS?","text":"","code":""},{"path":"css.html","id":"about-css","chapter":"18 A Gentle Introduction to CSS","heading":"18.1.1 About CSS","text":"CSS, Cascading Style Sheets, one main technologies powers web today, along HTML JavaScript.\nHTML series tags define web page structure, JavaScript programming language allows manipulate page (well, can lot , simplifying make understandable).\nCSS handles design, .e. visual rendering web page: color header, font, background, everything makes web page look like 1983 (, simplifying sake clarity).\nevery browser, HTML element default style: example, <h1> size 2em bold, <strong> bold.\nmight happy “standard page” (CSS) looks like: reason CSS, modifying visual rendering page.want get idea importance CSS, try installing extensions like Web Developer Google Chrome.\n, go extension choose CSS, click “Disable Style”, see page without CSS looks like.example, Figure ?? rtask.thinkr.fr looks like CSS, Figure ?? Figure ?? shows looks like without CSS.CSS now seems pretty useful right?","code":""},{"path":"css.html","id":"shinys-default-fluidpage","chapter":"18 A Gentle Introduction to CSS","heading":"18.1.2 {shiny}’s default: fluidPage()","text":"shiny, default CSS: one Bootstrap 3.\ncan see, created fluidPage() , already styling applied.Compare:fluidPage, Figure ??fluidPage, Figure ??Yes, subtle, can see makes difference larger apps.","code":"\nlibrary(shiny)\nui <- function(){\n  tagList(\n    h1(\"Hey\"), \n    h2(\"You\"), \n    p(\"You rock!\"), \n    selectInput(\"what\", \"Do you\", unique(iris$Species))\n  )\n}\n\nserver <- function(\n  input, \n  output, \n  session\n){\n\n}\n\nshinyApp(ui, server)\nlibrary(shiny)\nui <- function(){\n  fluidPage(\n    h1(\"Hey\"), \n    h2(\"You\"), \n    p(\"You rock!\"), \n    selectInput(\"what\", \"Do you\", unique(iris$Species))\n  )\n}\n\nserver <- function(\n  input, \n  output, \n  session\n){\n\n}\n\nshinyApp(ui, server)"},{"path":"css.html","id":"getting-started-with-css","chapter":"18 A Gentle Introduction to CSS","heading":"18.2 Getting started with CSS","text":"CSS descriptive language, meaning declare style either tag inside external file.\nsee integrate CSS inside shiny application next section, , let’s start short introduction CSS.71","code":""},{"path":"css.html","id":"about-css-syntax","chapter":"18 A Gentle Introduction to CSS","heading":"18.2.1 About CSS syntax","text":"CSS syntax composed two elements: selector declaration block.\nCSS selector describes identify HTML tags affected style declared key-value pairs declaration block follows.\nexample easier understand, simple CSS rule:, selector h2, meaning HTML tags aimed style <h2> tags.\ndeclaration block contains key-value pair telling color red.\nNote key-value pair must end semicolon.","code":"h2 {\n  color:red;\n}"},{"path":"css.html","id":"css-selectors","chapter":"18 A Gentle Introduction to CSS","heading":"18.2.2 CSS selectors","text":"CSS selectors wide topic, many combinations things might want select inside HTML page.first selector types “standard” ones: name, id, class.\nrefer elements composing HTML tag: example, <h2 id = \"tileone\" class = \"standard\">One<\/h2>, name h2, id tileone, class standard.72To select three elements CSS:Write name -: h2.Prefix id #: #tileone.Prefix class .: .standard.can also combine elements: example, h2.standard select h2 tags class standard, h2,h3 select h2 h3.can build complex selectors: example div.standard > p select <p> tags contained inside div class standard (CSS combinator), :hover, dictates style tags hovered mouse (CSS pseudo-class), div.standard::first-letter, selects first letter div class standard (CSS pseudo-elements), h2[data-value=\"hey\"], selects h2 data-value attribute set \"hey\" (CSS attribute selector).can see, lots complex selectors can built CSS, target specific elements UI.\nmastering complex selectors main goal chapter, hence just using standard selectors rest examples book.","code":""},{"path":"css.html","id":"css-properties","chapter":"18 A Gentle Introduction to CSS","heading":"18.2.3 CSS properties","text":"Now selected elements, time apply styles!\nbrackets declaration block, define series key-value elements defining properties style: key CSS property, followed value.example, color: red; text-align: center; defines selected HTML elements, color red, text centered.\ncover possible properties, hundreds .\nFeel free refer CSS Reference page Mozilla exhaustive list available properties.","code":""},{"path":"css.html","id":"integrate-css-files-in-your-shiny-app","chapter":"18 A Gentle Introduction to CSS","heading":"18.3 Integrate CSS files in your {shiny} app","text":"Now idea start writing CSS, integrate shiny application?\nthree methods can used: writing inline, integrating inside tags$script() straight application UI code, writing external file.\nNote good practice considered integration external file.","code":""},{"path":"css.html","id":"inline-css","chapter":"18 A Gentle Introduction to CSS","heading":"18.3.1 Inline CSS","text":"need add style one specific element, can write straight inside HTML tag, seen Figure ??:method loses advantages CSS, notably, possibility applying style multiple elements.\nUse caution.","code":"\nlibrary(shiny)\nui <- function(){\n  tagList(\n    h2(style = \"color:red;\", \"This is red\")\n  )\n}\n\nserver <- function(\n  input, \n  output, \n  session\n){\n\n}\n\nshinyApp(ui, server)"},{"path":"css.html","id":"writing-in-a-tagsstyle","chapter":"18 A Gentle Introduction to CSS","heading":"18.3.2 Writing in a tags$style()","text":"tags$style() somewhere inside UI code (generally beginning UI), add CSS code straight application.Figure ?? example:works, considered best option: indeed, large amount CSS code insert app, can make code harder read adds large amount visual noise.best solution, , go alternative writing CSS inside separate file: allows separate things make UI code smaller, easier maintain separate CSS file CSS written straight R code.","code":"\nlibrary(shiny)\nui <- function(){\n  tagList(\n    tags$style(\n      \"h2{\n        color:red;\n      }\"\n    ), \n    h2(\"This is red\")\n  )\n}\n\nserver <- function(\n  input, \n  output, \n  session\n){\n\n}\n\nshinyApp(ui, server)"},{"path":"css.html","id":"including-external-files","chapter":"18 A Gentle Introduction to CSS","heading":"18.3.3 Including external files","text":"include external CSS file, use another tag: tags$link().\ntag contain three elements:rel=\"stylesheet\"type=\"text/css\"href=\"www/custom.css\"first two standard: need change ; necessary indicate HTML page creating stylesheet, type text/css.\nhref one need change: path points style file located.building application golem (Fay, Guyader, Rochette, et al. 2023), good news file creation linking transparent: call golem::add_css_file(\"name\"), file created inst/app/www, file automatically linked inside UI thanks bundle_resources() function.","code":""},{"path":"css.html","id":"using-r-packages","chapter":"18 A Gentle Introduction to CSS","heading":"18.3.4 Using R packages","text":"want use external CSS template, several packages exist can implement new custom UI designs application.\n:{resume}(Fay 2023j), provides implementation Bootstrap Resume Template.{resume}(Fay 2023j), provides implementation Bootstrap Resume Template.nessy (Fay 2023i), port NES CSS.nessy (Fay 2023i), port NES CSS.{skeleton} (Fay 2023k), Skeleton CSS.{skeleton} (Fay 2023k), Skeleton CSS.shinyMobile (Granjon, Perrier, Rudolf 2022), shiny API Framework7 (IOS/android).shinyMobile (Granjon, Perrier, Rudolf 2022), shiny API Framework7 (IOS/android).shinydashboardPlus (Granjon 2021), extensions shinydashboard.shinydashboardPlus (Granjon 2021), extensions shinydashboard.bs4Dash (Granjon 2022), Bootstrap 4 shinydashboard using AdminLTE3: example available engineering-shiny.org/bs4dashdemo/bs4Dash (Granjon 2022), Bootstrap 4 shinydashboard using AdminLTE3: example available engineering-shiny.org/bs4dashdemo/fullPage(Coene 2020), fullPage.js, pagePiling.js, multiScroll.js shiny.fullPage(Coene 2020), fullPage.js, pagePiling.js, multiScroll.js shiny.amazing things done RinteRface.","code":""},{"path":"css.html","id":"external-resources","chapter":"18 A Gentle Introduction to CSS","heading":"18.4 External resources","text":"want learn CSS, three places can get started:FreeCodeCamp, contains many course hours covering HTML CSS.FreeCodeCamp, contains many course hours covering HTML CSS.W3 Schools CSS TutorialW3 Schools CSS TutorialLearn style HTML using CSSLearn style HTML using CSS","code":""},{"path":"appendix-a---use-case-building-an-app-from-start-to-finish.html","id":"appendix-a---use-case-building-an-app-from-start-to-finish","chapter":"Appendix A - Use Case: Building an App from Start to Finish","heading":"Appendix A - Use Case: Building an App from Start to Finish","text":"chapter aims exemplifying workflow developed book using “real-life” example.\nappendix, building shiny application start finish.\n’ve chosen build application doesn’t rely heavy computation/data analysis, can focus engineering process, internals analytic methodology, spending time explaining dataset.","code":""},{"path":"appendix-a---use-case-building-an-app-from-start-to-finish.html","id":"about-the-application","chapter":"Appendix A - Use Case: Building an App from Start to Finish","heading":"About the application","text":"appendix, build “minify” application, application takes CSS, JavaScript, HTML JSON input, outputs minified version file.\nrely {minifyr} package build application.example specifications app look like:","code":"Hello! \n\nWe want to build a small application that can \nminify CSS, JavaScript, HTML and JSON. \n\nIn this app, user will be able either to paste \nthe content or to upload a file. \n\nOnce the content is pasted/upladed, they select \nthe type, which is pre-selected based on the \nfile extension. Then they click on a button, \nand the content is minified. \n\nThey can then copy the output, or download it as a file. \n\nCheers!"},{"path":"appendix-a---use-case-building-an-app-from-start-to-finish.html","id":"step-1-design-1","chapter":"Appendix A - Use Case: Building an App from Start to Finish","heading":"Step 1: Design","text":"","code":""},{"path":"appendix-a---use-case-building-an-app-from-start-to-finish.html","id":"deciphering-the-specifications","chapter":"Appendix A - Use Case: Building an App from Start to Finish","heading":"Deciphering the specifications","text":"","code":""},{"path":"appendix-a---use-case-building-an-app-from-start-to-finish.html","id":"general-observations","chapter":"Appendix A - Use Case: Building an App from Start to Finish","heading":"General observations","text":"app pretty straightforward, better handle everything page, .e everything happen page (tab).app pretty straightforward, better handle everything page, .e everything happen page (tab).plus “minification”/“minification” gain, users better idea purpose application.plus “minification”/“minification” gain, users better idea purpose application.","code":""},{"path":"appendix-a---use-case-building-an-app-from-start-to-finish.html","id":"user-experience-considerations","chapter":"Appendix A - Use Case: Building an App from Start to Finish","heading":"User experience considerations","text":"provide link explanation minification.provide link explanation minification.user might get different results based minifying algorithm use, can surprising first.\napplication alert .user might get different results based minifying algorithm use, can surprising first.\napplication alert .long printed outputs, use verbatimTextOuput, careful page width, elements natively overflow x-axis page.\ndoable following CSS: pre{ white-space: pre-wrap; word-break: keep-; }.long printed outputs, use verbatimTextOuput, careful page width, elements natively overflow x-axis page.\ndoable following CSS: pre{ white-space: pre-wrap; word-break: keep-; }.careful using semantic HTML inputs outputs.careful using semantic HTML inputs outputs.","code":""},{"path":"appendix-a---use-case-building-an-app-from-start-to-finish.html","id":"technical-points","chapter":"Appendix A - Use Case: Building an App from Start to Finish","heading":"Technical points","text":"{minifyr} wraps NodeJS module, need install NodeJS deploying.{minifyr} wraps NodeJS module, need install NodeJS deploying.sure process works, check validity file extension UI server side.sure process works, check validity file extension UI server side.","code":""},{"path":"appendix-a---use-case-building-an-app-from-start-to-finish.html","id":"building-a-concept-map","chapter":"Appendix A - Use Case: Building an App from Start to Finish","heading":"Building a concept map","text":"Figure ?? concept map application, using Xmind.","code":""},{"path":"appendix-a---use-case-building-an-app-from-start-to-finish.html","id":"asking-questions","chapter":"Appendix A - Use Case: Building an App from Start to Finish","heading":"Asking questions","text":"","code":""},{"path":"appendix-a---use-case-building-an-app-from-start-to-finish.html","id":"about-the-end-users-1","chapter":"Appendix A - Use Case: Building an App from Start to Finish","heading":"About the end users","text":"end users app?application mainly useful web developers.tech-literate?Yes.context using app?Notably work, building pet projects.machines?Laptop/personal computer.\nSmall chance using smartphone.browser version using?Hard say, given aim public community developers, probably modern browsers.using app office, phone driving tractor, plant, wearing lab coats?Nothing like: using application developing, chances using desk.","code":""},{"path":"appendix-a---use-case-building-an-app-from-start-to-finish.html","id":"building-personas-1","chapter":"Appendix A - Use Case: Building an App from Start to Finish","heading":"Building personas","text":"Let’s pick two random names personas, two fake companies might working.","code":"\nnms <- withr::with_seed(\n  608, {\n    charlatan::ch_name(2)\n    \n  }\n)\nnms[1] \"Delina Stanton\" \"Theo Torphy\"   \ncompany <- withr::with_seed(\n  608, {\n    charlatan::ch_company(2)\n  }\n)\ncompany[1] \"Witting-Witting\" \"Stehr-Stehr\"    "},{"path":"appendix-a---use-case-building-an-app-from-start-to-finish.html","id":"delina-stanton-shiny-developer-at-witting-witting","chapter":"Appendix A - Use Case: Building an App from Start to Finish","heading":"Delina Stanton: {shiny} developer at Witting-Witting","text":"Delina Stanton shiny developer Witting-Witting.\n’s learning R graduate school working master’s degree statistics.\nstarted Witting-Witting, mainly data analysis Rmd, gradually switched building shiny applications full-time.\ndiscovered minification reading “Engineering Production-Grade Shiny App” book, now wants add shiny application.","code":""},{"path":"appendix-a---use-case-building-an-app-from-start-to-finish.html","id":"theo-torphy-web-developer-and-trainer-at-stehr-stehr","chapter":"Appendix A - Use Case: Building an App from Start to Finish","heading":"Theo Torphy: web developer and trainer at Stehr-Stehr","text":"Theo Torphy web developer Stehr-Stehr.\nstudied web development university, learned minification.\nnow also charge training new recruits company works, also gives lectures university attended.\nminification automated, looking tool can use training classes explain minification works.step available https://github.com/ColinFay/minifying/tree/master/step-1-design.","code":""},{"path":"appendix-a---use-case-building-an-app-from-start-to-finish.html","id":"step-2-prototyping","chapter":"Appendix A - Use Case: Building an App from Start to Finish","heading":"Step 2: Prototyping","text":"step, building back-end application one side, UI side.\nback-end settled UI defined, working making two work .","code":""},{"path":"appendix-a---use-case-building-an-app-from-start-to-finish.html","id":"back-end-in-rmd","chapter":"Appendix A - Use Case: Building an App from Start to Finish","heading":"Back-end in Rmd","text":"back-end composed two functions:guess_minifier, take function return available algorithms file: example, JavaScript file, ’ll able use minifyr_js_babel(), minifyr_js_gcc(), minifyr_js_terser(), minifyr_js_uglify(), minifyr_js_yui() functions. type guessed based extension, function fail gracefully, make shiny crash. ’ll chose return empty string extension guessed.compress() function, takes three parameters: file input, algo outputted last function, selection, one selected user. compressed file outputted tempfile.Finally, compare() function, can compare size two files, can measure minification gain. function take two file paths., complete process:Now, time move vignette!","code":"\nlibrary(minifyr)\nguess_minifier <- function(file){\n  # We'll start by getting the file extension\n  ext <- tools::file_ext(file)\n  # Check that the extension is correct, if not, return early\n  # It's important to do this kind of check also \n  # on the server side as HTML manual tempering \n  # would allow to also send other type of files\n  if (\n    ! ext %in% c(\"js\", \"css\", \"html\", \"json\")\n  ){\n    # Return early\n    return(list())\n  }\n  # We'll then retrieve the available \n  # pattern based on the extension\n  patt <- switch(\n    ext, \n    js = \"minifyr_js_.+\",\n    html = \"minifyr_html_.+\",\n    css = \"minifyr_css_.+\",\n    json = \"minifyr_json_.+\"\n  )\n  # List all the available functions to minify the file\n  list(\n    file = file,\n    ext = ext,\n    # We return this pattern so that \n    # it will be used to update the selectInput that \n    # is used to select an algo\n    pattern = patt, \n    functions = grep(\n      patt, \n      names(\n        loadNamespace(\"minifyr\")\n      ), \n      value = TRUE\n    )\n  )\n  \n}\n\n# minifyr comes with a series of examples, \n# so we can use them as tests\nguess_minifier(\n  minifyr_example(\"css\")\n)[2:4]\nguess_minifier(\n  minifyr_example(\"js\")\n)[2:4]\nguess_minifier(\n  minifyr_example(\"html\")\n)[2:4]\nguess_minifier(\n  minifyr_example(\"json\")\n)[2:4]\n# Try with a non valid extension\nguess_minifier(\n  \"path/to/text.docx\"\n)\ncompress <- function(algo, selection){\n  # Creating a tempfile using our algo object\n  tps <- tempfile(fileext = sprintf(\".%s\", algo$ext))\n  # Getting the function with the selection\n  converter <- get(\n    grep(selection, algo$functions, value = TRUE)\n  )\n  # Do the conversion\n  converter(algo$file, tps)\n  # Return the temp file\n  return(tps)\n}\n\nalgo <- guess_minifier(\n  minifyr_example(\"js\")\n)\n\ncompress(\n  algo = algo, \n  selection = \"babel\"\n) \ncompare <- function(original, minified){\n  # Get the file size of both\n  original <- fs::file_info(original)$size\n  minified <- fs::file_info(minified)$size\n  return(original - minified)\n}\nalgo <- guess_minifier(\n  minifyr_example(\"js\")\n)\n\ncompressed <- compress(\n  algo = algo, \n  selection = \"babel\"\n)\ncompare(\n  minifyr_example(\"js\"), \n  compressed\n)"},{"path":"appendix-a---use-case-building-an-app-from-start-to-finish.html","id":"ui-prototyping","chapter":"Appendix A - Use Case: Building an App from Start to Finish","heading":"UI prototyping","text":"Let’s start drawing small mockup front-end using Excalidraw, seen Figure ??.love application “full screen”, , ’ll take inspiration split-screen layout available W3Schools.\nmock UI, also use shinipsum package.first step, start generating module skeleton application.\n, left module left part app, right module right part.\nreceive corresponding class, based CSS W3.\nNow two spots available, ’ll add two modules, fake output, simulate application behavior.\nleft side functional sense uploading file randomly add algorithms selectInput(), clicking Launch minification regenerate fake text.Now, let’s pick soft palette colors, using coolors.co, font family fonts.google.com.\nwent :One monochrome palettes coolors.co.Sora font fonts.google.com/specimen/Sora. much text displayed screen, font work well.used CSS arrange page: size, padding, alignment, colors, etc.\nwant know file, ’s located inst/app/www folder package.step available github.com/ColinFay/minifying, folder step-2-prototype.","code":""},{"path":"appendix-a---use-case-building-an-app-from-start-to-finish.html","id":"step-3-build-1","chapter":"Appendix A - Use Case: Building an App from Start to Finish","heading":"Step 3: Build","text":"Now ’ve got back-end Rmd, front end working shinipsum.\nNow time make two work together!logic adding application:file uploaded, also check format server-side: UI restriction accept parameter fileInput() enough stop users really want upload something else.file uploaded, also check format server-side: UI restriction accept parameter fileInput() enough stop users really want upload something else.file comes right extension, update algorithm selection read inside “Original content” block.file comes right extension, update algorithm selection read inside “Original content” block.user clicks “Launch minification”, create temp file minify original file inside temp file.user clicks “Launch minification”, create temp file minify original file inside temp file.file minified, update gain output reflect many bytes gained minification, add result minification “Minified content” block.file minified, update gain output reflect many bytes gained minification, add result minification “Minified content” block.Finally, “Download output” button clicked, minified file downloaded.Finally, “Download output” button clicked, minified file downloaded.process, migrate functions Rmd files inside R/ folder, use external dependencies, document business logic functions.\ncan refer dev/02_dev.R file want read exact steps taken .step available https://github.com/ColinFay/minifying/tree/master/step-3-build.","code":""},{"path":"appendix-a---use-case-building-an-app-from-start-to-finish.html","id":"step-4-strengthen-1","chapter":"Appendix A - Use Case: Building an App from Start to Finish","heading":"Step 4: Strengthen","text":"now, working application.\nTime strengthen !steps working :Turning business logic R6 class.\nR6 class generate object start app, passed modules.Turning business logic R6 class.\nR6 class generate object start app, passed modules.minification process takes couple seconds, add small progress bar user knows something happening.minification process takes couple seconds, add small progress bar user knows something happening.use R6, need manually set reactive context invalidation.\n, use triggers gargoyle.use R6, need manually set reactive context invalidation.\n, use triggers gargoyle.Chances , users testing several algorithms using application, don’t want minification process happen another time called file algorithm.\neven even important process involves calling external NodeJS process.\nprevent , caching function computation.Chances , users testing several algorithms using application, don’t want minification process happen another time called file algorithm.\neven even important process involves calling external NodeJS process.\nprevent , caching function computation.Create unseen input upload data, can build interactivity test using crrry.\ninput look like following server:Create unseen input upload data, can build interactivity test using crrry.\ninput look like following server:use pattern can combine testing suite crrry, using following pattern:’s safer wrap tests (interactive()), running checks outside current session might launch app correctly, launching external processes (one running app Chrome) might fail run non-interactively.\ntop , running inside CI might cause pain, course, work CRAN checks.’ll also building “standard” function checks, can find test/ folder.step available github.com/ColinFay/minifying, folder step-4-strengthen.","code":"\nobserveEvent( input$testingtrigger , {\n  \n  if (golem::app_dev()){\n    file$original_file <- minifyr::minifyr_example(\n      ext = input$testingtext\n    )\n    file$guess_minifier()\n    file$type <- input$upload$type\n    file$minified_file <- NULL\n    file$original_name <- input$upload$name\n    gargoyle::trigger(\"uploaded\")\n  }\n  \n})\ntest <- crrry::CrrryProc$new(\n  chrome_bin = pagedown::find_chrome(),\n  # Process to launch locally\n  fun = \"golem::document_and_reload();run_app()\",\n  # Note that you will need httpuv >= 1.5.2 for randomPort\n  chrome_port = httpuv::randomPort(), \n  headless = FALSE\n)\n\ntest$wait_for_shiny_ready()\next <- c(\"css\", \"js\", \"json\", \"html\")\nfor (i in 1:length(ext)){\n  # Set the extension value\n  test$shiny_set_input(\"left_ui_1-testingtext\", ext[i])\n  # Trigger the file to be read\n  test$shiny_set_input(\"left_ui_1-testingtrigger\", i)\n  # Launch the minification\n  test$shiny_set_input(\"left_ui_1-launch\", i)\n}\n\ntest$stop()"},{"path":"appendix-a---use-case-building-an-app-from-start-to-finish.html","id":"step-5-deploy-1","chapter":"Appendix A - Use Case: Building an App from Start to Finish","heading":"Step 5: Deploy","text":"example, deploy app three media: package, RStudio Connect, Docker.","code":""},{"path":"appendix-a---use-case-building-an-app-from-start-to-finish.html","id":"before-deployment-checklist-1","chapter":"Appendix A - Use Case: Building an App from Start to Finish","heading":"Before deployment checklist","text":"devtools::check(), run command line, return 0 errors, 0 warnings, 0 notesdevtools::check(), run command line, return 0 errors, 0 warnings, 0 notesThe current version number valid, .e current app update, version number bumped: makes sense, first deployment, keep version number 0.0.0.9000, increment dev version whenever implement changes test deployments.\n“true” deployment, bumped version 0.1.0.current version number valid, .e current app update, version number bumped: makes sense, first deployment, keep version number 0.0.0.9000, increment dev version whenever implement changes test deployments.\n“true” deployment, bumped version 0.1.0.Everything fully documented: documented functions, even internal, Vignette describes business logic, README filled.Everything fully documented: documented functions, even internal, Vignette describes business logic, README filled.Test coverage good, .e. cover sufficient amount codebase, tests cover core/strategic algorithms.Test coverage good, .e. cover sufficient amount codebase, tests cover core/strategic algorithms.person call something goes wrong clear everyone involved product..person call something goes wrong clear everyone involved product..debugging process clear everyone involved project, including communicate bugs developer team, long take get changes implemented: project made open source, bug listed Github repo.\nhelp , added link GitHub repository application.debugging process clear everyone involved project, including communicate bugs developer team, long take get changes implemented: project made open source, bug listed Github repo.\nhelp , added link GitHub repository application.(relevant) server deployed necessary software installed (Docker, Connect, Shiny Server, etc.) make application run.(relevant) server deployed necessary software installed (Docker, Connect, Shiny Server, etc.) make application run.server system requirements needed (system libraries), , installed application (’s dockerized): NodeJS need installed Docker server running RStudio Connect.\ncheck also added top run_app() availability NodeJS system, especially people installing package.\ncheck also check node-minify installed, , installed.\ncheck might take time run, performed first time app launched.server system requirements needed (system libraries), , installed application (’s dockerized): NodeJS need installed Docker server running RStudio Connect.\ncheck also added top run_app() availability NodeJS system, especially people installing package.\ncheck also check node-minify installed, , installed.\ncheck might take time run, performed first time app launched.application, deployed server, deployed port accessible users: building Dockerfile using golem, correct port exposed (.e app run port 80, also made available).\nmedium, port automatically chosen, either shiny Connect.application, deployed server, deployed port accessible users: building Dockerfile using golem, correct port exposed (.e app run port 80, also made available).\nmedium, port automatically chosen, either shiny Connect.(relevant) environment variables production server managed inside application: relevant.(relevant) environment variables production server managed inside application: relevant.(relevant) app launched correct port, least port can configured via environment variable: relevant.(relevant) app launched correct port, least port can configured via environment variable: relevant.(relevant) server app deployed access data sources (database, API…): relevant.(relevant) server app deployed access data sources (database, API…): relevant.app records data backups data: relevantIf app records data backups data: relevant","code":""},{"path":"appendix-a---use-case-building-an-app-from-start-to-finish.html","id":"deploy-as-a-tar.gz","chapter":"Appendix A - Use Case: Building an App from Start to Finish","heading":"Deploy as a tar.gz","text":"share application tar.gz, can call devtools::build(), compile tar.gz file inside parent folder current application.\ncan share archive, install remotes::install_local(\"path//tar.gz\").\nNote can also done base R, remotes offers smarter way comes managing dependencies archived package.tar.gz can also sent package repository; CRAN package manager might company.","code":""},{"path":"appendix-a---use-case-building-an-app-from-start-to-finish.html","id":"deploy-on-rstudio-connect","chapter":"Appendix A - Use Case: Building an App from Start to Finish","heading":"Deploy on RStudio Connect","text":"sure server running Connect NodeJS installed, installed minify module minifyr::minifyr_npm_install(), can create app.R using golem::add_rstudioconnect_file(), push Connect server.","code":""},{"path":"appendix-a---use-case-building-an-app-from-start-to-finish.html","id":"deploy-with-docker","chapter":"Appendix A - Use Case: Building an App from Start to Finish","heading":"Deploy with Docker","text":"create Dockerfile, ’ll start launching golem::add_dockerfile().\nfunction compute system requirements,73 create generic Dockerfile application.\ndone, create/update .dockerignore file root package, unwanted files bundled Docker image.Inside Dockerfile, also change default repo use https://packagemanager.rstudio.com//latest, proposes precompiled packages system, making installation faster.\nalso add installation NodeJS, needed application.., can go terminal compile image!Now ’ve got working image!\ncan try :step available github.com/ColinFay/minifying, folder step-5-deploy.","code":"docker build -t minifying . docker run -p 2811:80 minifying"},{"path":"appendix-b---session-info.html","id":"appendix-b---session-info","chapter":"Appendix B - Session Info","heading":"Appendix B - Session Info","text":"current version book compiled :following configuration:","code":"\nSys.Date()[1] \"2024-03-12\"\nxfun::session_info()R version 4.1.0 (2021-05-18)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nLocale:\n  LC_CTYPE=C.UTF-8       LC_NUMERIC=C          \n  LC_TIME=C.UTF-8        LC_COLLATE=C.UTF-8    \n  LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n  LC_PAPER=C.UTF-8       LC_NAME=C             \n  LC_ADDRESS=C           LC_TELEPHONE=C        \n  LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nPackage version:\n  AsioHeaders_1.22.1.2        \n  askpass_1.1                 \n  attachment_0.3.1            \n  attempt_0.3.1               \n  backports_1.4.1             \n  base64enc_0.1.3             \n  beeswarm_0.4.0              \n  bench_1.1.2                 \n  BH_1.81.0.1                 \n  bit_4.0.5                   \n  bit64_4.0.5                 \n  blob_1.2.4                  \n  bookdown_0.33               \n  brew_1.0.8                  \n  brio_1.1.3                  \n  bslib_0.4.2                 \n  cachem_1.0.7                \n  callr_3.7.5.9000            \n  charlatan_0.5.0             \n  cli_3.6.1                   \n  clipr_0.8.0                 \n  clisymbols_1.2.0            \n  cloc_0.3.5                  \n  codetools_0.2-19            \n  colorspace_2.1-0            \n  colourvalues_0.3.8          \n  commonmark_1.9.0            \n  compiler_4.1.0              \n  config_0.3.1                \n  covr_3.6.2                  \n  cpp11_0.4.3                 \n  cranlogs_2.1.1              \n  crayon_1.5.2                \n  credentials_1.3.2           \n  crosstalk_1.2.0             \n  curl_5.0.0                  \n  cyclocomp_1.1.0             \n  data.table_1.14.8           \n  datasets_4.1.0              \n  DBI_1.1.3                   \n  debugme_1.1.0               \n  desc_1.4.2                  \n  devtools_2.4.5              \n  dichromat_2.0-0.1           \n  diffobj_0.3.5               \n  digest_0.6.31               \n  dockerfiler_0.2.1           \n  dockerstats_0.1.0           \n  downlit_0.4.2               \n  dplyr_1.1.1                 \n  DT_0.27                     \n  dygraphs_1.1.1.6            \n  ellipsis_0.3.2              \n  evaluate_0.20               \n  fakir_1.0.0                 \n  fansi_1.0.4                 \n  farver_2.1.1                \n  fastmap_1.1.1               \n  fontawesome_0.5.0           \n  fs_1.6.1                    \n  generics_0.1.3              \n  gert_1.9.2                  \n  ggbeeswarm_0.7.1            \n  ggplot2_3.4.2               \n  gh_1.4.0                    \n  git2r_0.31.0                \n  gitcreds_0.1.2              \n  glue_1.6.2                  \n  golem_0.4.0                 \n  goodpractice_1.0.3          \n  graphics_4.1.0              \n  grDevices_4.1.0             \n  grid_4.1.0                  \n  gridExtra_2.3               \n  gtable_0.3.3                \n  here_1.0.1                  \n  highr_0.10                  \n  hms_1.1.3                   \n  htmltools_0.5.5             \n  htmlwidgets_1.6.2           \n  httpuv_1.6.9                \n  httr_1.4.5                  \n  httr2_0.2.2                 \n  ini_0.3.1                   \n  isoband_0.2.7               \n  jquerylib_0.1.4             \n  jsonlite_1.8.4              \n  knitr_1.42                  \n  labeling_0.4.2              \n  later_1.3.0                 \n  lattice_0.20-45             \n  lazyeval_0.2.2              \n  lifecycle_1.0.3             \n  lintr_3.0.2                 \n  lubridate_1.9.2             \n  magrittr_2.0.3              \n  markdown_1.5                \n  MASS_7.3.58.2               \n  matlab_1.0.4                \n  Matrix_1.5.3                \n  memoise_2.0.1               \n  methods_4.1.0               \n  mgcv_1.8.42                 \n  mime_0.12                   \n  minifyr_0.0.0.9100          \n  miniUI_0.1.1.1              \n  munsell_0.5.0               \n  nlme_3.1.162                \n  openssl_2.0.6               \n  packageMetrics2_1.0.1.9000  \n  packrat_0.9.1               \n  pak_0.4.0                   \n  parallel_4.1.0              \n  parsedate_1.3.1             \n  pillar_1.9.0                \n  pkgbuild_1.4.0              \n  pkgconfig_2.0.3             \n  pkgdown_2.0.7               \n  pkgload_1.3.2               \n  plogr_0.2.0                 \n  plotly_4.10.1               \n  praise_1.0.0                \n  prettyunits_1.1.1           \n  processx_3.8.0              \n  profmem_0.6.0               \n  profvis_0.3.7               \n  progress_1.2.2              \n  promises_1.2.0.1            \n  ps_1.7.4                    \n  purrr_1.0.1                 \n  R.cache_0.16.0              \n  R.methodsS3_1.8.2           \n  R.oo_1.25.0                 \n  R.utils_2.12.2              \n  R6_2.5.1                    \n  ragg_1.2.5                  \n  rappdirs_0.3.3              \n  rcmdcheck_1.4.0             \n  RColorBrewer_1.1.3          \n  Rcpp_1.0.10                 \n  readr_2.1.4                 \n  rematch2_2.1.2              \n  remotes_2.4.2.9000          \n  renv_0.12.2                 \n  rex_1.2.1                   \n  rlang_1.1.0                 \n  rmarkdown_2.21              \n  roxygen2_7.2.3              \n  rprojroot_2.0.3             \n  rsconnect_0.8.29            \n  RSQLite_2.3.1               \n  rstudioapi_0.14             \n  rversions_2.1.2             \n  rvest_1.0.3                 \n  sass_0.4.5                  \n  scales_1.2.1                \n  selectr_0.4.2               \n  sessioninfo_1.2.2           \n  shinipsum_0.0.0.9000        \n  shiny_1.7.4                 \n  shinyloadtest_1.1.0         \n  sourcetools_0.1.7.1         \n  splines_4.1.0               \n  stats_4.1.0                 \n  stringi_1.7.12              \n  stringr_1.5.0               \n  styler_1.9.1                \n  svglite_2.1.3               \n  sys_3.4.1                   \n  systemfonts_1.0.4           \n  testthat_3.1.7              \n  textshaping_0.3.6           \n  tibble_3.2.1                \n  tictoc_1.1                  \n  tidyr_1.3.0                 \n  tidyselect_1.2.0            \n  tidytuesday201942_0.0.0.9000\n  timechange_0.2.0            \n  tinytex_0.44                \n  tools_4.1.0                 \n  tzdb_0.3.0                  \n  urlchecker_1.0.1            \n  usethis_2.1.6               \n  utf8_1.2.3                  \n  utils_4.1.0                 \n  vctrs_0.6.1                 \n  vipor_0.4.5                 \n  viridis_0.6.2               \n  viridisLite_0.4.1           \n  vroom_1.6.1                 \n  waldo_0.4.0                 \n  websocket_1.4.1             \n  whisker_0.4.1               \n  whoami_1.3.0                \n  withr_2.5.0                 \n  xfun_0.38                   \n  xml2_1.3.3                  \n  xmlparsedata_1.0.5          \n  xopen_1.0.0                 \n  xtable_1.8-4                \n  xts_0.13.0                  \n  yaml_2.3.7                  \n  yesno_0.1.2                 \n  zip_2.2.2                   \n  zoo_1.8-11                  "},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
